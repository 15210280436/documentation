{
    "traces": {
        "scatter": {
            "attributes": {
                "type": "scatter",
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair."
                },
                "mode": {
                    "type": "flaglist",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover."
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the line color."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "shape": {
                        "type": "enumerated",
                        "values": [
                            "linear",
                            "spline",
                            "hv",
                            "vh",
                            "hvh",
                            "vhv"
                        ],
                        "dflt": "linear",
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes."
                    },
                    "smoothing": {
                        "type": "number",
                        "min": 0,
                        "max": 1.3,
                        "dflt": 1,
                        "description": "Has only an effect if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    }
                },
                "connectgaps": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected."
                },
                "fill": {
                    "type": "enumerated",
                    "values": [
                        "none",
                        "tozeroy",
                        "tozerox",
                        "tonexty",
                        "tonextx"
                    ],
                    "dflt": "none",
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor`."
                },
                "fillcolor": {
                    "type": "color",
                    "description": "Sets the fill color."
                },
                "marker": {
                    "symbol": {
                        "type": "enumerated",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "arrayOk": true,
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name."
                    },
                    "opacity": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "arrayOk": true,
                        "description": "Sets the marker opacity."
                    },
                    "size": {
                        "type": "number",
                        "min": 0,
                        "dflt": 6,
                        "arrayOk": true,
                        "description": "Sets the marker size (in px)."
                    },
                    "color": {
                        "type": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color."
                    },
                    "maxdisplayed": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit."
                    },
                    "sizeref": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`."
                    },
                    "sizemin": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points."
                    },
                    "sizemode": {
                        "type": "enumerated",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter",
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels."
                    },
                    "colorscale": {
                        "type": "colorscale",
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the colorscale."
                    },
                    "cauto": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically."
                    },
                    "cmax": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the upper bound of the color domain."
                    },
                    "cmin": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the lower bound of the color domain."
                    },
                    "autocolorscale": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`."
                    },
                    "reversescale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Reverses the colorscale."
                    },
                    "showscale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": true,
                            "description": "Sets the color of the lines bounding the marker points."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": true,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        },
                        "colorscale": {
                            "type": "colorscale",
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the colorscale."
                        },
                        "cauto": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data."
                        },
                        "cmax": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the upper bound of the color domain."
                        },
                        "cmin": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the lower bound of the color domain."
                        },
                        "autocolorscale": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`."
                        },
                        "reversescale": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Reverses the colorscale."
                        }
                    },
                    "colorbar": {
                        "orient": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "right"
                        },
                        "thicknessmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                        },
                        "thickness": {
                            "type": "number",
                            "min": 0,
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                        },
                        "lenmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                        },
                        "len": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                        },
                        "x": {
                            "type": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction)."
                        },
                        "xanchor": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                        },
                        "xpad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction."
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction)."
                        },
                        "yanchor": {
                            "type": "enumerated",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                        },
                        "ypad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction."
                        },
                        "outlinecolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "outlinewidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line."
                        },
                        "bordercolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "borderwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar."
                        },
                        "bgcolor": {
                            "type": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area."
                        },
                        "tickmode": {
                            "type": "enumerated",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                        },
                        "nticks": {
                            "type": "integer",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                        },
                        "tick0": {
                            "type": "number",
                            "dflt": 0,
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                        },
                        "dtick": {
                            "type": "any",
                            "dflt": 1,
                            "description": "Sets the step in-between ticks on this axis"
                        },
                        "tickvals": {
                            "type": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticktext": {
                            "type": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticks": {
                            "type": "enumerated",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "dflt": ""
                        },
                        "ticklen": {
                            "type": "number",
                            "min": 0,
                            "dflt": 5,
                            "description": "Sets the tick length (in px)."
                        },
                        "tickwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the tick width (in px)."
                        },
                        "tickcolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color."
                        },
                        "showticklabels": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn."
                        },
                        "tickfont": {
                            "type": "font",
                            "description": "Sets the tick font."
                        },
                        "tickangle": {
                            "type": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                        },
                        "tickformat": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                        },
                        "tickprefix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix."
                        },
                        "showtickprefix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                        },
                        "ticksuffix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix."
                        },
                        "showticksuffix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes."
                        },
                        "exponentformat": {
                            "type": "enumerated",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                        },
                        "showexponent": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                        },
                        "title": {
                            "type": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar."
                        },
                        "titlefont": {
                            "type": "font",
                            "description": "Sets this color bar's title font."
                        },
                        "titleside": {
                            "type": "enumerated",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        }
                    }
                },
                "textposition": {
                    "type": "enumerated",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "middle center",
                    "arrayOk": true,
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates."
                },
                "textfont": {
                    "type": "font",
                    "arrayOk": true,
                    "description": "Sets the text font."
                },
                "error_y": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "error_x": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "bar": {
            "attributes": {
                "type": "bar",
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair."
                },
                "orientation": {
                    "type": "enumerated",
                    "values": [
                        "v",
                        "h"
                    ],
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."
                },
                "marker": {
                    "color": {
                        "type": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color."
                    },
                    "colorscale": {
                        "type": "colorscale",
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the colorscale."
                    },
                    "cauto": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically."
                    },
                    "cmax": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the upper bound of the color domain."
                    },
                    "cmin": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the lower bound of the color domain."
                    },
                    "autocolorscale": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`."
                    },
                    "reversescale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Reverses the colorscale."
                    },
                    "showscale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": true,
                            "description": "Sets the color of the lines bounding the marker points."
                        },
                        "colorscale": {
                            "type": "colorscale",
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the colorscale."
                        },
                        "cauto": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data."
                        },
                        "cmax": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the upper bound of the color domain."
                        },
                        "cmin": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the lower bound of the color domain."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": true,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        },
                        "autocolorscale": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`."
                        },
                        "reversescale": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Reverses the colorscale."
                        }
                    },
                    "colorbar": {
                        "orient": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "right"
                        },
                        "thicknessmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                        },
                        "thickness": {
                            "type": "number",
                            "min": 0,
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                        },
                        "lenmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                        },
                        "len": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                        },
                        "x": {
                            "type": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction)."
                        },
                        "xanchor": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                        },
                        "xpad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction."
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction)."
                        },
                        "yanchor": {
                            "type": "enumerated",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                        },
                        "ypad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction."
                        },
                        "outlinecolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "outlinewidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line."
                        },
                        "bordercolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "borderwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar."
                        },
                        "bgcolor": {
                            "type": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area."
                        },
                        "tickmode": {
                            "type": "enumerated",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                        },
                        "nticks": {
                            "type": "integer",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                        },
                        "tick0": {
                            "type": "number",
                            "dflt": 0,
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                        },
                        "dtick": {
                            "type": "any",
                            "dflt": 1,
                            "description": "Sets the step in-between ticks on this axis"
                        },
                        "tickvals": {
                            "type": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticktext": {
                            "type": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticks": {
                            "type": "enumerated",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "dflt": ""
                        },
                        "ticklen": {
                            "type": "number",
                            "min": 0,
                            "dflt": 5,
                            "description": "Sets the tick length (in px)."
                        },
                        "tickwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the tick width (in px)."
                        },
                        "tickcolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color."
                        },
                        "showticklabels": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn."
                        },
                        "tickfont": {
                            "type": "font",
                            "description": "Sets the tick font."
                        },
                        "tickangle": {
                            "type": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                        },
                        "tickformat": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                        },
                        "tickprefix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix."
                        },
                        "showtickprefix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                        },
                        "ticksuffix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix."
                        },
                        "showticksuffix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes."
                        },
                        "exponentformat": {
                            "type": "enumerated",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                        },
                        "showexponent": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                        },
                        "title": {
                            "type": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar."
                        },
                        "titlefont": {
                            "type": "font",
                            "description": "Sets this color bar's title font."
                        },
                        "titleside": {
                            "type": "enumerated",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        }
                    }
                },
                "error_y": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "error_x": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            },
            "layoutAttributes": {
                "barmode": {
                    "type": "enumerated",
                    "values": [
                        "stack",
                        "group",
                        "overlay"
                    ],
                    "dflt": "group",
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars."
                },
                "barnorm": {
                    "type": "enumerated",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "dflt": "",
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents."
                },
                "bargap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates."
                },
                "bargroupgap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate."
                }
            }
        },
        "box": {
            "attributes": {
                "type": "box",
                "overview": "In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options.",
                "y": {
                    "type": "data_array",
                    "description": "Sets the y sample data or coordinates. See overview for more info."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the x sample data or coordinates. See overview for more info."
                },
                "x0": {
                    "type": "any",
                    "description": "Sets the x coordinate of the box. See overview for more info."
                },
                "y0": {
                    "type": "any",
                    "description": "Sets the y coordinate of the box. See overview for more info."
                },
                "whiskerwidth": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0.5,
                    "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es)."
                },
                "boxpoints": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "outliers",
                        "suspectedoutliers",
                        false
                    ],
                    "dflt": "outliers",
                    "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points"
                },
                "boxmean": {
                    "type": "enumerated",
                    "values": [
                        true,
                        "sd",
                        false
                    ],
                    "dflt": false,
                    "description": "If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn."
                },
                "jitter": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es)."
                },
                "pointpos": {
                    "type": "number",
                    "min": -2,
                    "max": 2,
                    "description": "Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes"
                },
                "orientation": {
                    "type": "enumerated",
                    "values": [
                        "v",
                        "h"
                    ],
                    "description": "Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal)."
                },
                "marker": {
                    "outliercolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of the outlier sample points."
                    },
                    "symbol": {
                        "type": "enumerated",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "arrayOk": false,
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name."
                    },
                    "opacity": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "arrayOk": false,
                        "description": "Sets the marker opacity.",
                        "dflt": 1
                    },
                    "size": {
                        "type": "number",
                        "min": 0,
                        "dflt": 6,
                        "arrayOk": false,
                        "description": "Sets the marker size (in px)."
                    },
                    "color": {
                        "type": "color",
                        "arrayOk": false,
                        "description": "Sets the marker color."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": false,
                            "description": "Sets the color of the lines bounding the marker points.",
                            "dflt": "#444"
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": false,
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "dflt": 0
                        },
                        "outliercolor": {
                            "type": "color",
                            "description": "Sets the border line color of the outlier sample points."
                        },
                        "outlierwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the border line width (in px) of the outlier sample points."
                        }
                    }
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the color of line bounding the box(es)."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the width (in px) of line bounding the box(es)."
                    }
                },
                "fillcolor": {
                    "type": "color",
                    "description": "Sets the fill color."
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            },
            "layoutAttributes": {
                "boxmode": {
                    "type": "enumerated",
                    "values": [
                        "group",
                        "overlay"
                    ],
                    "dflt": "overlay",
                    "description": "Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes."
                },
                "boxgap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0.3,
                    "description": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates."
                },
                "boxgroupgap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0.3,
                    "description": "Sets the gap (in plot fraction) between boxes of the same location coordinate."
                }
            }
        },
        "heatmap": {
            "attributes": {
                "type": "heatmap",
                "overview": "The data the describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.",
                "z": {
                    "type": "data_array",
                    "description": "Sets the z data."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each z value."
                },
                "transpose": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data."
                },
                "xtype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."
                },
                "ytype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "zsmooth": {
                    "type": "enumerated",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data."
                },
                "connectgaps": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "histogram": {
            "attributes": {
                "type": "histogram",
                "x": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the x axis."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the y axis."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair."
                },
                "orientation": {
                    "type": "enumerated",
                    "values": [
                        "v",
                        "h"
                    ],
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."
                },
                "marker": {
                    "color": {
                        "type": "data_array"
                    }
                },
                "error_y": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "error_x": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "z": {
                    "type": "data_array",
                    "description": "Sets the aggregation data."
                },
                "histfunc": {
                    "type": "enumerated",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively."
                },
                "histnorm": {
                    "type": "enumerated",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1)."
                },
                "autobinx": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm."
                },
                "nbinsx": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of x axis bins."
                },
                "xbins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the x axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the x axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each x axis bin."
                    }
                },
                "autobiny": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm."
                },
                "nbinsy": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of y axis bins."
                },
                "ybins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the y axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the y axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each y axis bin."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            },
            "layoutAttributes": {
                "barmode": {
                    "type": "enumerated",
                    "values": [
                        "stack",
                        "group",
                        "overlay"
                    ],
                    "dflt": "group",
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars."
                },
                "barnorm": {
                    "type": "enumerated",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "dflt": "",
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents."
                },
                "bargap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates."
                },
                "bargroupgap": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate."
                }
            }
        },
        "histogram2d": {
            "attributes": {
                "type": "histogram2d",
                "overview": "The data the describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.",
                "z": {
                    "type": "data_array",
                    "description": "Sets the aggregation data."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the x axis."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the y axis."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each z value."
                },
                "transpose": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data."
                },
                "xtype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."
                },
                "ytype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "zsmooth": {
                    "type": "enumerated",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data."
                },
                "connectgaps": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "marker": {
                    "color": {
                        "type": "data_array"
                    }
                },
                "orientation": {
                    "type": "enumerated",
                    "values": [
                        "v",
                        "h"
                    ],
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."
                },
                "histfunc": {
                    "type": "enumerated",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively."
                },
                "histnorm": {
                    "type": "enumerated",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1)."
                },
                "autobinx": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm."
                },
                "nbinsx": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of x axis bins."
                },
                "xbins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the x axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the x axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each x axis bin."
                    }
                },
                "autobiny": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm."
                },
                "nbinsy": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of y axis bins."
                },
                "ybins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the y axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the y axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each y axis bin."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "pie": {
            "attributes": {
                "type": "pie",
                "labels": {
                    "type": "data_array",
                    "description": "Sets the sector labels."
                },
                "label0": {
                    "type": "number",
                    "dflt": 0,
                    "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step."
                },
                "dlabel": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the label step. See `label0` for more info."
                },
                "values": {
                    "type": "data_array",
                    "description": "Sets the values of the sectors of this pie chart."
                },
                "marker": {
                    "colors": {
                        "type": "data_array",
                        "description": "Sets the color of each sector of this pie chart. If not specified, the default trace color set is used to pick the sector colors."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "dflt": "#444",
                            "arrayOk": true,
                            "description": "Sets the color of the line enclosing each sector."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "dflt": 0,
                            "arrayOk": true,
                            "description": "Sets the width (in px) of the line enclosing each sector."
                        }
                    }
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets text elements associated with each sector."
                },
                "scalegroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group."
                },
                "textinfo": {
                    "type": "flaglist",
                    "flags": [
                        "label",
                        "text",
                        "value",
                        "percent"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines which trace information appear on the graph."
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                },
                "textposition": {
                    "type": "enumerated",
                    "values": [
                        "inside",
                        "outside",
                        "auto",
                        "none"
                    ],
                    "dflt": "auto",
                    "arrayOk": true,
                    "description": "Specifies the location of the `textinfo`."
                },
                "textfont": {
                    "type": "font",
                    "description": "Sets the font used for `textinfo`."
                },
                "insidetextfont": {
                    "type": "font",
                    "description": "Sets the font used for `textinfo` lying inside the pie."
                },
                "outsidetextfont": {
                    "type": "font",
                    "description": "Sets the font used for `textinfo` lying outside the pie."
                },
                "domain": {
                    "x": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 0
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1
                        }
                    ],
                    "y": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 0
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1
                        }
                    ]
                },
                "hole": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart."
                },
                "sort": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the sectors of reordered from largest to smallest."
                },
                "direction": {
                    "type": "enumerated",
                    "values": [
                        "clockwise",
                        "counterclockwise"
                    ],
                    "dflt": "counterclockwise",
                    "description": "Specifies the direction at which succeeding sectors follow one another."
                },
                "rotation": {
                    "type": "number",
                    "min": -360,
                    "max": 360,
                    "dflt": 0,
                    "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle."
                },
                "pull": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "arrayOk": true,
                    "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices."
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                }
            },
            "layoutAttributes": {
                "hiddenlabels": {
                    "type": "data_array"
                }
            }
        },
        "contour": {
            "attributes": {
                "type": "contour",
                "overview": "The data the describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.",
                "z": {
                    "type": "data_array",
                    "description": "Sets the z data."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each z value."
                },
                "transpose": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data."
                },
                "xtype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."
                },
                "ytype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "zsmooth": {
                    "type": "enumerated",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data."
                },
                "connectgaps": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "autocontour": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether of not the contour level attributes at picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`."
                },
                "ncontours": {
                    "type": "integer",
                    "dflt": 0,
                    "description": "Sets the number of contour levels."
                },
                "contours": {
                    "start": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the starting contour level value."
                    },
                    "end": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the end contour level value."
                    },
                    "size": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the step between each contour level."
                    },
                    "coloring": {
                        "type": "enumerated",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "dflt": "fill",
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient is coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace."
                    },
                    "showlines": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*."
                    }
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    },
                    "smoothing": {
                        "type": "number",
                        "min": 0,
                        "max": 1.3,
                        "dflt": 1,
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "histogram2dcontour": {
            "attributes": {
                "type": "histogram2dcontour",
                "overview": "The data the describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.",
                "z": {
                    "type": "data_array",
                    "description": "Sets the aggregation data."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the x axis."
                },
                "x0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
                },
                "dx": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the x coordinate step. See `x0` for more info."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the sample data to be binned on the y axis."
                },
                "y0": {
                    "type": "any",
                    "dflt": 0,
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
                },
                "dy": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the y coordinate step. See `y0` for more info."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each z value."
                },
                "transpose": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Transposes the z data."
                },
                "xtype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided)."
                },
                "ytype": {
                    "type": "enumerated",
                    "values": [
                        "array",
                        "scaled"
                    ],
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)"
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "zsmooth": {
                    "type": "enumerated",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false,
                    "description": "Picks a smoothing algorithm use to smooth `z` data."
                },
                "connectgaps": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "marker": {
                    "color": {
                        "type": "data_array"
                    }
                },
                "orientation": {
                    "type": "enumerated",
                    "values": [
                        "v",
                        "h"
                    ],
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal)."
                },
                "histfunc": {
                    "type": "enumerated",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count",
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively."
                },
                "histnorm": {
                    "type": "enumerated",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": "",
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1)."
                },
                "autobinx": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm."
                },
                "nbinsx": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of x axis bins."
                },
                "xbins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the x axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the x axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each x axis bin."
                    }
                },
                "autobiny": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm."
                },
                "nbinsy": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of y axis bins."
                },
                "ybins": {
                    "start": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the starting value for the y axis bins."
                    },
                    "end": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the end value for the y axis bins."
                    },
                    "size": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between value each y axis bin."
                    }
                },
                "autocontour": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether of not the contour level attributes at picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`."
                },
                "ncontours": {
                    "type": "integer",
                    "dflt": 0,
                    "description": "Sets the number of contour levels."
                },
                "contours": {
                    "start": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the starting contour level value."
                    },
                    "end": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the end contour level value."
                    },
                    "size": {
                        "type": "number",
                        "dflt": null,
                        "description": "Sets the step between each contour level."
                    },
                    "coloring": {
                        "type": "enumerated",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "dflt": "fill",
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient is coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace."
                    },
                    "showlines": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*."
                    }
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    },
                    "smoothing": {
                        "type": "number",
                        "min": 0,
                        "max": 1.3,
                        "dflt": 1,
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "scatter3d": {
            "attributes": {
                "type": "scatter3d",
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "z": {
                    "type": "data_array",
                    "description": "Sets the z coordinates."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets text elements associated with each (x,y,z) triplet."
                },
                "mode": {
                    "type": "flaglist",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
                    "dflt": "lines+markers"
                },
                "surfaceaxis": {
                    "type": "enumerated",
                    "values": [
                        -1,
                        0,
                        1,
                        2
                    ],
                    "dflt": -1,
                    "description": "If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively."
                },
                "surfacecolor": {
                    "type": "color",
                    "description": "Sets the surface fill color."
                },
                "projection": {
                    "x": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the x axis."
                        },
                        "opacity": {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1,
                            "description": "Sets the projection color."
                        },
                        "scale": {
                            "type": "number",
                            "min": 0,
                            "max": 10,
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points."
                        }
                    },
                    "y": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the y axis."
                        },
                        "opacity": {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1,
                            "description": "Sets the projection color."
                        },
                        "scale": {
                            "type": "number",
                            "min": 0,
                            "max": 10,
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points."
                        }
                    },
                    "z": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not projections are shown along the z axis."
                        },
                        "opacity": {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1,
                            "description": "Sets the projection color."
                        },
                        "scale": {
                            "type": "number",
                            "min": 0,
                            "max": 10,
                            "dflt": 0.6666666666666666,
                            "description": "Sets the scale factor determining the size of the projection marker points."
                        }
                    }
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the line color."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    }
                },
                "marker": {
                    "color": {
                        "type": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color."
                    },
                    "symbol": {
                        "type": "enumerated",
                        "values": [
                            "circle",
                            "circle-open",
                            "square",
                            "square-open",
                            "diamond",
                            "diamond-open",
                            "cross",
                            "x"
                        ],
                        "dflt": "circle",
                        "arrayOk": true,
                        "description": "Sets the marker symbol type."
                    },
                    "size": {
                        "type": "number",
                        "min": 0,
                        "dflt": 8,
                        "arrayOk": true,
                        "description": "Sets the marker size (in px)."
                    },
                    "sizeref": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`."
                    },
                    "sizemin": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points."
                    },
                    "sizemode": {
                        "type": "enumerated",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter",
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels."
                    },
                    "opacity": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "arrayOk": true,
                        "description": "Sets the marker opacity."
                    },
                    "colorscale": {
                        "type": "colorscale",
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the colorscale."
                    },
                    "cauto": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically."
                    },
                    "cmax": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the upper bound of the color domain."
                    },
                    "cmin": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the lower bound of the color domain."
                    },
                    "autocolorscale": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`."
                    },
                    "reversescale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Reverses the colorscale."
                    },
                    "showscale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": true,
                            "description": "Sets the color of the lines bounding the marker points."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": false,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        },
                        "colorscale": {
                            "type": "colorscale",
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the colorscale."
                        },
                        "cauto": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data."
                        },
                        "cmax": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the upper bound of the color domain."
                        },
                        "cmin": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the lower bound of the color domain."
                        },
                        "autocolorscale": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`."
                        },
                        "reversescale": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Reverses the colorscale."
                        }
                    },
                    "colorbar": {
                        "orient": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "right"
                        },
                        "thicknessmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                        },
                        "thickness": {
                            "type": "number",
                            "min": 0,
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                        },
                        "lenmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                        },
                        "len": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                        },
                        "x": {
                            "type": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction)."
                        },
                        "xanchor": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                        },
                        "xpad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction."
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction)."
                        },
                        "yanchor": {
                            "type": "enumerated",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                        },
                        "ypad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction."
                        },
                        "outlinecolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "outlinewidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line."
                        },
                        "bordercolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "borderwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar."
                        },
                        "bgcolor": {
                            "type": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area."
                        },
                        "tickmode": {
                            "type": "enumerated",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                        },
                        "nticks": {
                            "type": "integer",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                        },
                        "tick0": {
                            "type": "number",
                            "dflt": 0,
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                        },
                        "dtick": {
                            "type": "any",
                            "dflt": 1,
                            "description": "Sets the step in-between ticks on this axis"
                        },
                        "tickvals": {
                            "type": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticktext": {
                            "type": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticks": {
                            "type": "enumerated",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "dflt": ""
                        },
                        "ticklen": {
                            "type": "number",
                            "min": 0,
                            "dflt": 5,
                            "description": "Sets the tick length (in px)."
                        },
                        "tickwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the tick width (in px)."
                        },
                        "tickcolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color."
                        },
                        "showticklabels": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn."
                        },
                        "tickfont": {
                            "type": "font",
                            "description": "Sets the tick font."
                        },
                        "tickangle": {
                            "type": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                        },
                        "tickformat": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                        },
                        "tickprefix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix."
                        },
                        "showtickprefix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                        },
                        "ticksuffix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix."
                        },
                        "showticksuffix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes."
                        },
                        "exponentformat": {
                            "type": "enumerated",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                        },
                        "showexponent": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                        },
                        "title": {
                            "type": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar."
                        },
                        "titlefont": {
                            "type": "font",
                            "description": "Sets this color bar's title font."
                        },
                        "titleside": {
                            "type": "enumerated",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        }
                    }
                },
                "textposition": {
                    "type": "enumerated",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "top center",
                    "arrayOk": true,
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates."
                },
                "textfont": {
                    "type": "font",
                    "arrayOk": true,
                    "description": "Sets the text font."
                },
                "error_x": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "error_y": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "error_z": {
                    "visible": {
                        "type": "boolean",
                        "description": "Determines whether or not this set of error bars is visible."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ],
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
                    },
                    "symmetric": {
                        "type": "boolean",
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                    },
                    "array": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                    },
                    "arrayminus": {
                        "type": "data_array",
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                    },
                    "value": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
                    },
                    "valueminus": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
                    },
                    "traceref": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "tracerefminus": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0
                    },
                    "copy_ystyle": {
                        "type": "boolean"
                    },
                    "copy_zstyle": {
                        "type": "boolean"
                    },
                    "color": {
                        "type": "color",
                        "description": "Sets the stoke color of the error bars."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the error bars."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "surface": {
            "attributes": {
                "type": "surface",
                "overview": "The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step.",
                "z": {
                    "type": "data_array",
                    "description": "Sets the z coordinates."
                },
                "x": {
                    "type": "data_array",
                    "description": "Sets the x coordinates."
                },
                "y": {
                    "type": "data_array",
                    "description": "Sets the y coordinates."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each z value."
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "contours": {
                    "x": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not dynamic contours are shown along the x axis"
                        },
                        "project": {
                            "x": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the x axis."
                            },
                            "y": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the y axis."
                            },
                            "z": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the z axis."
                            }
                        },
                        "color": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "usecolormap": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "width": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        },
                        "highlight": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "highlightColor": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "highlightWidth": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        }
                    },
                    "y": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not dynamic contours are shown along the y axis"
                        },
                        "project": {
                            "x": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the x axis."
                            },
                            "y": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the y axis."
                            },
                            "z": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the z axis."
                            }
                        },
                        "color": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "usecolormap": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "width": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        },
                        "highlight": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "highlightColor": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "highlightWidth": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        }
                    },
                    "z": {
                        "show": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Sets whether or not dynamic contours are shown along the z axis"
                        },
                        "project": {
                            "x": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the x axis."
                            },
                            "y": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the y axis."
                            },
                            "z": {
                                "type": "boolean",
                                "dflt": false,
                                "description": "Sets whether or not the dynamic contours are projected along the z axis."
                            }
                        },
                        "color": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "usecolormap": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "width": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        },
                        "highlight": {
                            "type": "boolean",
                            "dflt": false
                        },
                        "highlightColor": {
                            "type": "color",
                            "dflt": "#000"
                        },
                        "highlightWidth": {
                            "type": "number",
                            "min": 1,
                            "max": 16,
                            "dflt": 2
                        }
                    }
                },
                "hidesurface": {
                    "type": "boolean",
                    "dflt": false
                },
                "lighting": {
                    "ambient": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.8
                    },
                    "diffuse": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.8
                    },
                    "specular": {
                        "type": "number",
                        "min": 0,
                        "max": 2,
                        "dflt": 0.05
                    },
                    "roughness": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.5
                    },
                    "fresnel": {
                        "type": "number",
                        "min": 0,
                        "max": 5,
                        "dflt": 0.2
                    }
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "mesh3d": {
            "attributes": {
                "type": "mesh3d",
                "x": {
                    "type": "data_array"
                },
                "y": {
                    "type": "data_array"
                },
                "z": {
                    "type": "data_array"
                },
                "i": {
                    "type": "data_array"
                },
                "j": {
                    "type": "data_array"
                },
                "k": {
                    "type": "data_array"
                },
                "delaunayaxis": {
                    "type": "enumerated",
                    "values": [
                        "x",
                        "y",
                        "z"
                    ],
                    "dflt": "z"
                },
                "alphahull": {
                    "type": "number",
                    "dflt": -1
                },
                "intensity": {
                    "type": "data_array"
                },
                "color": {
                    "type": "color"
                },
                "vertexcolor": {
                    "type": "data_array"
                },
                "facecolor": {
                    "type": "data_array"
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "flatshading": {
                    "type": "boolean",
                    "dflt": false
                },
                "contour": {
                    "show": {
                        "type": "boolean",
                        "dflt": false
                    },
                    "color": {
                        "type": "color",
                        "dflt": "#000"
                    },
                    "width": {
                        "type": "number",
                        "min": 1,
                        "max": 16,
                        "dflt": 2
                    }
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "lighting": {
                    "ambient": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.8
                    },
                    "diffuse": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.8
                    },
                    "specular": {
                        "type": "number",
                        "min": 0,
                        "max": 2,
                        "dflt": 0.05
                    },
                    "roughness": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0.5
                    },
                    "fresnel": {
                        "type": "number",
                        "min": 0,
                        "max": 5,
                        "dflt": 0.2
                    }
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "scattergeo": {
            "attributes": {
                "type": "scattergeo",
                "lon": {
                    "type": "data_array",
                    "description": "Sets the longitude coordinates (in degrees East)."
                },
                "lat": {
                    "type": "data_array",
                    "description": "Sets the latitude coordinates (in degrees North)."
                },
                "locations": {
                    "type": "data_array",
                    "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info."
                },
                "locationmode": {
                    "type": "enumerated",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "dflt": "ISO-3",
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map."
                },
                "mode": {
                    "type": "flaglist",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
                    "dflt": "markers"
                },
                "text": {
                    "type": "string",
                    "dflt": "",
                    "arrayOk": true,
                    "description": "Sets text elements associated with each (x,y) pair."
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the line color."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    }
                },
                "marker": {
                    "symbol": {
                        "type": "enumerated",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "arrayOk": true,
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name."
                    },
                    "opacity": {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "arrayOk": true,
                        "description": "Sets the marker opacity."
                    },
                    "size": {
                        "type": "number",
                        "min": 0,
                        "dflt": 6,
                        "arrayOk": true,
                        "description": "Sets the marker size (in px)."
                    },
                    "sizeref": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`."
                    },
                    "sizemin": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points."
                    },
                    "sizemode": {
                        "type": "enumerated",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter",
                        "description": "Has only an effect if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels."
                    },
                    "color": {
                        "type": "color",
                        "arrayOk": true,
                        "description": "Sets the marker color."
                    },
                    "colorscale": {
                        "type": "colorscale",
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the colorscale."
                    },
                    "cauto": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically."
                    },
                    "cmax": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the upper bound of the color domain."
                    },
                    "cmin": {
                        "type": "number",
                        "dflt": null,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Sets the lower bound of the color domain."
                    },
                    "autocolorscale": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`."
                    },
                    "reversescale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Reverses the colorscale."
                    },
                    "showscale": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Has only an effect if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed."
                    },
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": true,
                            "description": "Sets the color of the lines bounding the marker points."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": true,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        },
                        "colorscale": {
                            "type": "colorscale",
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the colorscale."
                        },
                        "cauto": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data."
                        },
                        "cmax": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the upper bound of the color domain."
                        },
                        "cmin": {
                            "type": "number",
                            "dflt": null,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Sets the lower bound of the color domain."
                        },
                        "autocolorscale": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`."
                        },
                        "reversescale": {
                            "type": "boolean",
                            "dflt": false,
                            "description": "Has only an effect if `marker.color.line` is set to a numerical array. Reverses the colorscale."
                        }
                    },
                    "colorbar": {
                        "orient": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "right"
                        },
                        "thicknessmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                        },
                        "thickness": {
                            "type": "number",
                            "min": 0,
                            "dflt": 30,
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                        },
                        "lenmode": {
                            "type": "enumerated",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                        },
                        "len": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                        },
                        "x": {
                            "type": "number",
                            "dflt": 1.02,
                            "description": "Sets the x position of the color bar (in plot fraction)."
                        },
                        "xanchor": {
                            "type": "enumerated",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left",
                            "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                        },
                        "xpad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the x direction."
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0.5,
                            "description": "Sets the y position of the color bar (in plot fraction)."
                        },
                        "yanchor": {
                            "type": "enumerated",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                        },
                        "ypad": {
                            "type": "number",
                            "min": 0,
                            "dflt": 10,
                            "description": "Sets the amount of padding (in px) along the y direction."
                        },
                        "outlinecolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "outlinewidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the width (in px) of the axis line."
                        },
                        "bordercolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the axis line color."
                        },
                        "borderwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the width (in px) or the border enclosing this color bar."
                        },
                        "bgcolor": {
                            "type": "color",
                            "dflt": "rgba(0,0,0,0)",
                            "description": "Sets the color of padded area."
                        },
                        "tickmode": {
                            "type": "enumerated",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ],
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                        },
                        "nticks": {
                            "type": "integer",
                            "min": 0,
                            "dflt": 0,
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                        },
                        "tick0": {
                            "type": "number",
                            "dflt": 0,
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                        },
                        "dtick": {
                            "type": "any",
                            "dflt": 1,
                            "description": "Sets the step in-between ticks on this axis"
                        },
                        "tickvals": {
                            "type": "data_array",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticktext": {
                            "type": "data_array",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticks": {
                            "type": "enumerated",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "dflt": ""
                        },
                        "ticklen": {
                            "type": "number",
                            "min": 0,
                            "dflt": 5,
                            "description": "Sets the tick length (in px)."
                        },
                        "tickwidth": {
                            "type": "number",
                            "min": 0,
                            "dflt": 1,
                            "description": "Sets the tick width (in px)."
                        },
                        "tickcolor": {
                            "type": "color",
                            "dflt": "#444",
                            "description": "Sets the tick color."
                        },
                        "showticklabels": {
                            "type": "boolean",
                            "dflt": true,
                            "description": "Determines whether or not the tick labels are drawn."
                        },
                        "tickfont": {
                            "type": "font",
                            "description": "Sets the tick font."
                        },
                        "tickangle": {
                            "type": "angle",
                            "dflt": "auto",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                        },
                        "tickformat": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                        },
                        "tickprefix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label prefix."
                        },
                        "showtickprefix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                        },
                        "ticksuffix": {
                            "type": "string",
                            "dflt": "",
                            "description": "Sets a tick label suffix."
                        },
                        "showticksuffix": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "Same as `showtickprefix` but for tick suffixes."
                        },
                        "exponentformat": {
                            "type": "enumerated",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                        },
                        "showexponent": {
                            "type": "enumerated",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                        },
                        "title": {
                            "type": "string",
                            "dflt": "Click to enter colorscale title",
                            "description": "Sets the title of the color bar."
                        },
                        "titlefont": {
                            "type": "font",
                            "description": "Sets this color bar's title font."
                        },
                        "titleside": {
                            "type": "enumerated",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        }
                    }
                },
                "textfont": {
                    "type": "font",
                    "arrayOk": true,
                    "description": "Sets the text font."
                },
                "textposition": {
                    "type": "enumerated",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "middle center",
                    "arrayOk": true,
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates."
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        },
        "choropleth": {
            "attributes": {
                "type": "choropleth",
                "locations": {
                    "type": "data_array",
                    "description": "Sets the coordinates via location IDs or names. See `locationmode` for more info."
                },
                "locationmode": {
                    "type": "enumerated",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "dflt": "ISO-3",
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map."
                },
                "z": {
                    "type": "data_array",
                    "description": "Sets the color values."
                },
                "text": {
                    "type": "data_array",
                    "description": "Sets the text elements associated with each location."
                },
                "marker": {
                    "line": {
                        "color": {
                            "type": "color",
                            "arrayOk": true,
                            "description": "Sets the color of the lines bounding the marker points."
                        },
                        "width": {
                            "type": "number",
                            "min": 0,
                            "arrayOk": true,
                            "description": "Sets the width (in px) of the lines bounding the marker points."
                        }
                    }
                },
                "zauto": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines the whether or not the color domain is computed with respect to the input data."
                },
                "zmin": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the lower bound of color domain."
                },
                "zmax": {
                    "type": "number",
                    "dflt": null,
                    "description": "Sets the upper bound of color domain."
                },
                "colorscale": {
                    "type": "colorscale",
                    "description": "Sets the colorscale."
                },
                "autocolorscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values."
                },
                "reversescale": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Reverses the colorscale."
                },
                "showscale": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not a colorbar is displayed for this trace."
                },
                "colorbar": {
                    "orient": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "right"
                    },
                    "thicknessmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels",
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels. Use `thickness` to set the value."
                    },
                    "thickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 30,
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
                    },
                    "lenmode": {
                        "type": "enumerated",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction",
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
                    },
                    "len": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
                    },
                    "x": {
                        "type": "number",
                        "dflt": 1.02,
                        "description": "Sets the x position of the color bar (in plot fraction)."
                    },
                    "xanchor": {
                        "type": "enumerated",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left",
                        "description": "Sets this color bar's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
                    },
                    "xpad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the x direction."
                    },
                    "y": {
                        "type": "number",
                        "dflt": 0.5,
                        "description": "Sets the y position of the color bar (in plot fraction)."
                    },
                    "yanchor": {
                        "type": "enumerated",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle",
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
                    },
                    "ypad": {
                        "type": "number",
                        "min": 0,
                        "dflt": 10,
                        "description": "Sets the amount of padding (in px) along the y direction."
                    },
                    "outlinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "outlinewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "bordercolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "borderwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the width (in px) or the border enclosing this color bar."
                    },
                    "bgcolor": {
                        "type": "color",
                        "dflt": "rgba(0,0,0,0)",
                        "description": "Sets the color of padded area."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "dflt": ""
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "title": {
                        "type": "string",
                        "dflt": "Click to enter colorscale title",
                        "description": "Sets the title of the color bar."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this color bar's title font."
                    },
                    "titleside": {
                        "type": "enumerated",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    }
                },
                "visible": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
                },
                "showlegend": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
                },
                "legendgroup": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the trace."
                },
                "name": {
                    "type": "string",
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover."
                },
                "xaxis": {
                    "type": "axisid",
                    "dflt": "x",
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
                },
                "yaxis": {
                    "type": "axisid",
                    "dflt": "y",
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
                },
                "scene": {
                    "type": "sceneid",
                    "dflt": "scene",
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on."
                },
                "geo": {
                    "type": "geoid",
                    "dflt": "geo",
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on."
                },
                "uid": {
                    "type": "string",
                    "dflt": ""
                },
                "hoverinfo": {
                    "type": "flaglist",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Determines which trace information appear on hover."
                }
            }
        }
    },
    "layout": {
        "layoutAttributes": {
            "font": {
                "type": "font",
                "dflt": {
                    "family": "\"Open sans\", verdana, arial, sans-serif",
                    "size": 12,
                    "color": "#444"
                },
                "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font."
            },
            "title": {
                "type": "string",
                "dflt": "Click to enter Plot title",
                "description": "Sets the plot's title."
            },
            "titlefont": {
                "type": "font",
                "description": "Sets the title font."
            },
            "autosize": {
                "type": "enumerated",
                "values": [
                    true,
                    false,
                    "initial"
                ],
                "description": "Determines whether or not the dimensions of the figure are computed as a function of the display size."
            },
            "width": {
                "type": "number",
                "min": 10,
                "dflt": 700,
                "description": "Sets the plot's width (in px)."
            },
            "height": {
                "type": "number",
                "min": 10,
                "dflt": 450,
                "description": "Sets the plot's height (in px)."
            },
            "margin": {
                "l": {
                    "type": "number",
                    "min": 0,
                    "dflt": 80,
                    "description": "Sets the left margin (in px)."
                },
                "r": {
                    "type": "number",
                    "min": 0,
                    "dflt": 80,
                    "description": "Sets the right margin (in px)."
                },
                "t": {
                    "type": "number",
                    "min": 0,
                    "dflt": 100,
                    "description": "Sets the top margin (in px)."
                },
                "b": {
                    "type": "number",
                    "min": 0,
                    "dflt": 80,
                    "description": "Sets the bottom margin (in px)."
                },
                "pad": {
                    "type": "number",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the amount of padding (in px) between the plotting area and the axis lines"
                },
                "autoexpand": {
                    "type": "boolean",
                    "dflt": true
                }
            },
            "paper_bgcolor": {
                "type": "color",
                "dflt": "#fff",
                "description": "Sets the color of paper where the graph is drawn."
            },
            "plot_bgcolor": {
                "type": "color",
                "dflt": "#fff",
                "description": "Sets the color of plotting area in-between x and y axes."
            },
            "separators": {
                "type": "string",
                "dflt": ".,",
                "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands."
            },
            "hidesources": {
                "type": "boolean",
                "dflt": false,
                "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly cloud."
            },
            "smith": {
                "type": "enumerated",
                "values": [
                    false
                ],
                "dflt": false
            },
            "showlegend": {
                "type": "boolean",
                "description": "Determines whether or not a legend is drawn."
            },
            "dragmode": {
                "type": "enumerated",
                "values": [
                    "zoom",
                    "pan",
                    "orbit",
                    "turntable"
                ],
                "description": "Determines the mode of drag interactions."
            },
            "hovermode": {
                "type": "enumerated",
                "values": [
                    "x",
                    "y",
                    "closest",
                    false
                ],
                "description": "Determines the mode of hover interactions."
            },
            "xaxis": {
                "title": {
                    "type": "string",
                    "description": "Sets the title of this axis."
                },
                "titlefont": {
                    "type": "font",
                    "description": "Sets this axis' title font."
                },
                "type": {
                    "type": "enumerated",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "dflt": "-",
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
                },
                "autorange": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
                },
                "rangemode": {
                    "type": "enumerated",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "dflt": "normal",
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
                },
                "range": [
                    {
                        "type": "number"
                    },
                    {
                        "type": "number"
                    }
                ],
                "fixedrange": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
                },
                "tickmode": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ],
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                },
                "nticks": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                },
                "tick0": {
                    "type": "number",
                    "dflt": 0,
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                },
                "dtick": {
                    "type": "any",
                    "dflt": 1,
                    "description": "Sets the step in-between ticks on this axis"
                },
                "tickvals": {
                    "type": "data_array",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticktext": {
                    "type": "data_array",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticks": {
                    "type": "enumerated",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ],
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
                },
                "mirror": {
                    "type": "enumerated",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "dflt": false,
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
                },
                "ticklen": {
                    "type": "number",
                    "min": 0,
                    "dflt": 5,
                    "description": "Sets the tick length (in px)."
                },
                "tickwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the tick width (in px)."
                },
                "tickcolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the tick color."
                },
                "showticklabels": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the tick labels are drawn."
                },
                "tickfont": {
                    "type": "font",
                    "description": "Sets the tick font."
                },
                "tickangle": {
                    "type": "angle",
                    "dflt": "auto",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                },
                "tickprefix": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets a tick label prefix."
                },
                "showtickprefix": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                },
                "ticksuffix": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets a tick label suffix."
                },
                "showticksuffix": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Same as `showtickprefix` but for tick suffixes."
                },
                "showexponent": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                },
                "exponentformat": {
                    "type": "enumerated",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "dflt": "B",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                },
                "tickformat": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                },
                "hoverformat": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                },
                "showline": {
                    "type": "boolean",
                    "dflt": false,
                    "description": [
                        "Determines whether or not a line bounding this axis is drawn."
                    ]
                },
                "linecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the axis line color."
                },
                "linewidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the width (in px) of the axis line."
                },
                "showgrid": {
                    "type": "boolean",
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
                },
                "gridcolor": {
                    "type": "color",
                    "dflt": "#eee",
                    "description": "Sets the color of the grid lines."
                },
                "gridwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the width (in px) of the grid lines."
                },
                "zeroline": {
                    "type": "boolean",
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
                },
                "zerolinecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the line color of the zero line."
                },
                "zerolinewidth": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the zero line."
                },
                "anchor": {
                    "type": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."
                },
                "side": {
                    "type": "enumerated",
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."
                },
                "overlaying": {
                    "type": "enumerated",
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."
                },
                "domain": [
                    {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0
                    },
                    {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 1
                    }
                ],
                "position": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*."
                },
                "_isSubplotObj": true
            },
            "yaxis": {
                "title": {
                    "type": "string",
                    "description": "Sets the title of this axis."
                },
                "titlefont": {
                    "type": "font",
                    "description": "Sets this axis' title font."
                },
                "type": {
                    "type": "enumerated",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "dflt": "-",
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
                },
                "autorange": {
                    "type": "enumerated",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "dflt": true,
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
                },
                "rangemode": {
                    "type": "enumerated",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "dflt": "normal",
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
                },
                "range": [
                    {
                        "type": "number"
                    },
                    {
                        "type": "number"
                    }
                ],
                "fixedrange": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
                },
                "tickmode": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ],
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                },
                "nticks": {
                    "type": "integer",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                },
                "tick0": {
                    "type": "number",
                    "dflt": 0,
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                },
                "dtick": {
                    "type": "any",
                    "dflt": 1,
                    "description": "Sets the step in-between ticks on this axis"
                },
                "tickvals": {
                    "type": "data_array",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticktext": {
                    "type": "data_array",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticks": {
                    "type": "enumerated",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ],
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
                },
                "mirror": {
                    "type": "enumerated",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "dflt": false,
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
                },
                "ticklen": {
                    "type": "number",
                    "min": 0,
                    "dflt": 5,
                    "description": "Sets the tick length (in px)."
                },
                "tickwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the tick width (in px)."
                },
                "tickcolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the tick color."
                },
                "showticklabels": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the tick labels are drawn."
                },
                "tickfont": {
                    "type": "font",
                    "description": "Sets the tick font."
                },
                "tickangle": {
                    "type": "angle",
                    "dflt": "auto",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                },
                "tickprefix": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets a tick label prefix."
                },
                "showtickprefix": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                },
                "ticksuffix": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets a tick label suffix."
                },
                "showticksuffix": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "Same as `showtickprefix` but for tick suffixes."
                },
                "showexponent": {
                    "type": "enumerated",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                },
                "exponentformat": {
                    "type": "enumerated",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "dflt": "B",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                },
                "tickformat": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                },
                "hoverformat": {
                    "type": "string",
                    "dflt": "",
                    "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                },
                "showline": {
                    "type": "boolean",
                    "dflt": false,
                    "description": [
                        "Determines whether or not a line bounding this axis is drawn."
                    ]
                },
                "linecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the axis line color."
                },
                "linewidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the width (in px) of the axis line."
                },
                "showgrid": {
                    "type": "boolean",
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
                },
                "gridcolor": {
                    "type": "color",
                    "dflt": "#eee",
                    "description": "Sets the color of the grid lines."
                },
                "gridwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the width (in px) of the grid lines."
                },
                "zeroline": {
                    "type": "boolean",
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
                },
                "zerolinecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the line color of the zero line."
                },
                "zerolinewidth": {
                    "type": "number",
                    "dflt": 1,
                    "description": "Sets the width (in px) of the zero line."
                },
                "anchor": {
                    "type": "enumerated",
                    "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."
                },
                "side": {
                    "type": "enumerated",
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."
                },
                "overlaying": {
                    "type": "enumerated",
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."
                },
                "domain": [
                    {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 0
                    },
                    {
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "dflt": 1
                    }
                ],
                "position": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 0,
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*."
                },
                "_isSubplotObj": true
            },
            "scene": {
                "bgcolor": {
                    "type": "color",
                    "dflt": "rgba(0,0,0,0)"
                },
                "camera": {
                    "up": {
                        "x": {
                            "type": "number",
                            "dflt": 0
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0
                        },
                        "z": {
                            "type": "number",
                            "dflt": 1
                        },
                        "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up."
                    },
                    "center": {
                        "x": {
                            "type": "number",
                            "dflt": 0
                        },
                        "y": {
                            "type": "number",
                            "dflt": 0
                        },
                        "z": {
                            "type": "number",
                            "dflt": 0
                        },
                        "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation."
                    },
                    "eye": {
                        "x": {
                            "type": "number",
                            "dflt": 1.25
                        },
                        "y": {
                            "type": "number",
                            "dflt": 1.25
                        },
                        "z": {
                            "type": "number",
                            "dflt": 1.25
                        },
                        "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene."
                    }
                },
                "domain": {
                    "x": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1
                        }
                    ],
                    "y": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 0
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1
                        }
                    ]
                },
                "aspectmode": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "cube",
                        "data",
                        "manual"
                    ],
                    "dflt": "auto",
                    "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used."
                },
                "aspectratio": {
                    "x": {
                        "type": "number",
                        "min": 0
                    },
                    "y": {
                        "type": "number",
                        "min": 0
                    },
                    "z": {
                        "type": "number",
                        "min": 0
                    },
                    "description": "Sets this scene's axis aspectratio."
                },
                "xaxis": {
                    "showspikes": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
                    },
                    "spikesides": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
                    },
                    "spikethickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes."
                    },
                    "spikecolor": {
                        "type": "color",
                        "dflt": "rgb(0,0,0)",
                        "description": "Sets the color of the spikes."
                    },
                    "showbackground": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color."
                    },
                    "backgroundcolor": {
                        "type": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall."
                    },
                    "showaxeslabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled"
                    },
                    "title": {
                        "type": "string",
                        "description": "Sets the title of this axis."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this axis' title font."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
                    },
                    "autorange": {
                        "type": "enumerated",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
                    },
                    "rangemode": {
                        "type": "enumerated",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
                    },
                    "range": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "fixedrange": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
                    },
                    "mirror": {
                        "type": "enumerated",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "hoverformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "showline": {
                        "type": "boolean",
                        "dflt": false,
                        "description": [
                            "Determines whether or not a line bounding this axis is drawn."
                        ]
                    },
                    "linecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "linewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "showgrid": {
                        "type": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
                    },
                    "gridcolor": {
                        "type": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines."
                    },
                    "gridwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines."
                    },
                    "zeroline": {
                        "type": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
                    },
                    "zerolinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line."
                    },
                    "zerolinewidth": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line."
                    }
                },
                "yaxis": {
                    "showspikes": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
                    },
                    "spikesides": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
                    },
                    "spikethickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes."
                    },
                    "spikecolor": {
                        "type": "color",
                        "dflt": "rgb(0,0,0)",
                        "description": "Sets the color of the spikes."
                    },
                    "showbackground": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color."
                    },
                    "backgroundcolor": {
                        "type": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall."
                    },
                    "showaxeslabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled"
                    },
                    "title": {
                        "type": "string",
                        "description": "Sets the title of this axis."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this axis' title font."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
                    },
                    "autorange": {
                        "type": "enumerated",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
                    },
                    "rangemode": {
                        "type": "enumerated",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
                    },
                    "range": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "fixedrange": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
                    },
                    "mirror": {
                        "type": "enumerated",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "hoverformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "showline": {
                        "type": "boolean",
                        "dflt": false,
                        "description": [
                            "Determines whether or not a line bounding this axis is drawn."
                        ]
                    },
                    "linecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "linewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "showgrid": {
                        "type": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
                    },
                    "gridcolor": {
                        "type": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines."
                    },
                    "gridwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines."
                    },
                    "zeroline": {
                        "type": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
                    },
                    "zerolinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line."
                    },
                    "zerolinewidth": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line."
                    }
                },
                "zaxis": {
                    "showspikes": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
                    },
                    "spikesides": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
                    },
                    "spikethickness": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the thickness (in px) of the spikes."
                    },
                    "spikecolor": {
                        "type": "color",
                        "dflt": "rgb(0,0,0)",
                        "description": "Sets the color of the spikes."
                    },
                    "showbackground": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not this axis' wall has a background color."
                    },
                    "backgroundcolor": {
                        "type": "color",
                        "dflt": "rgba(204, 204, 204, 0.5)",
                        "description": "Sets the background color of this axis' wall."
                    },
                    "showaxeslabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Sets whether or not this axis is labeled"
                    },
                    "title": {
                        "type": "string",
                        "description": "Sets the title of this axis."
                    },
                    "titlefont": {
                        "type": "font",
                        "description": "Sets this axis' title font."
                    },
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-",
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
                    },
                    "autorange": {
                        "type": "enumerated",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true,
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
                    },
                    "rangemode": {
                        "type": "enumerated",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal",
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
                    },
                    "range": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "fixedrange": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
                    },
                    "tickmode": {
                        "type": "enumerated",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ],
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
                    },
                    "nticks": {
                        "type": "integer",
                        "min": 0,
                        "dflt": 0,
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*."
                    },
                    "tick0": {
                        "type": "number",
                        "dflt": 0,
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`."
                    },
                    "dtick": {
                        "type": "any",
                        "dflt": 1,
                        "description": "Sets the step in-between ticks on this axis"
                    },
                    "tickvals": {
                        "type": "data_array",
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticktext": {
                        "type": "data_array",
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                    },
                    "ticks": {
                        "type": "enumerated",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
                    },
                    "mirror": {
                        "type": "enumerated",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false,
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
                    },
                    "ticklen": {
                        "type": "number",
                        "min": 0,
                        "dflt": 5,
                        "description": "Sets the tick length (in px)."
                    },
                    "tickwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the tick width (in px)."
                    },
                    "tickcolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the tick color."
                    },
                    "showticklabels": {
                        "type": "boolean",
                        "dflt": true,
                        "description": "Determines whether or not the tick labels are drawn."
                    },
                    "tickfont": {
                        "type": "font",
                        "description": "Sets the tick font."
                    },
                    "tickangle": {
                        "type": "angle",
                        "dflt": "auto",
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
                    },
                    "tickprefix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label prefix."
                    },
                    "showtickprefix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
                    },
                    "ticksuffix": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets a tick label suffix."
                    },
                    "showticksuffix": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "Same as `showtickprefix` but for tick suffixes."
                    },
                    "showexponent": {
                        "type": "enumerated",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all",
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
                    },
                    "exponentformat": {
                        "type": "enumerated",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B",
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
                    },
                    "tickformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "hoverformat": {
                        "type": "string",
                        "dflt": "",
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info."
                    },
                    "showline": {
                        "type": "boolean",
                        "dflt": false,
                        "description": [
                            "Determines whether or not a line bounding this axis is drawn."
                        ]
                    },
                    "linecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the axis line color."
                    },
                    "linewidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the axis line."
                    },
                    "showgrid": {
                        "type": "boolean",
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
                    },
                    "gridcolor": {
                        "type": "color",
                        "dflt": "rgb(204, 204, 204)",
                        "description": "Sets the color of the grid lines."
                    },
                    "gridwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the width (in px) of the grid lines."
                    },
                    "zeroline": {
                        "type": "boolean",
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
                    },
                    "zerolinecolor": {
                        "type": "color",
                        "dflt": "#444",
                        "description": "Sets the line color of the zero line."
                    },
                    "zerolinewidth": {
                        "type": "number",
                        "dflt": 1,
                        "description": "Sets the width (in px) of the zero line."
                    }
                },
                "_isSubplotObj": true
            },
            "geo": {
                "domain": {
                    "x": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 0
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1,
                            "dflt": 1
                        }
                    ],
                    "y": [
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1
                        },
                        {
                            "type": "number",
                            "min": 0,
                            "max": 1
                        }
                    ]
                },
                "resolution": {
                    "type": "enumerated",
                    "values": [
                        110,
                        50
                    ],
                    "dflt": 110,
                    "coerceNumber": true,
                    "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000."
                },
                "scope": {
                    "type": "enumerated",
                    "values": [
                        "world",
                        "usa",
                        "europe",
                        "asia",
                        "africa",
                        "north america",
                        "south america"
                    ],
                    "dflt": "world",
                    "description": "Set the scope of the map."
                },
                "projection": {
                    "type": {
                        "type": "enumerated",
                        "values": [
                            "equirectangular",
                            "mercator",
                            "orthographic",
                            "natural earth",
                            "kavrayskiy7",
                            "miller",
                            "robinson",
                            "eckert4",
                            "azimuthal equal area",
                            "azimuthal equidistant",
                            "conic equal area",
                            "conic conformal",
                            "conic equidistant",
                            "gnomonic",
                            "stereographic",
                            "mollweide",
                            "hammer",
                            "transverse mercator",
                            "albers usa"
                        ],
                        "description": "Sets the projection type."
                    },
                    "rotation": {
                        "lon": {
                            "type": "number",
                            "description": "Rotates the map along parallels (in degrees East)."
                        },
                        "lat": {
                            "type": "number",
                            "description": "Rotates the map along meridians (in degrees North)."
                        },
                        "roll": {
                            "type": "number",
                            "description": "Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down."
                        }
                    },
                    "parallels": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "scale": {
                        "type": "number",
                        "min": 0,
                        "max": 10,
                        "dflt": 1,
                        "description": "Zooms in or out on the map view."
                    }
                },
                "showcoastlines": {
                    "type": "boolean",
                    "description": "Sets whether or not the coastlines are drawn."
                },
                "coastlinecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the coastline color."
                },
                "coastlinewidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the coastline stroke width (in px)."
                },
                "showland": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not land masses are filled in color."
                },
                "landcolor": {
                    "type": "color",
                    "dflt": "#F0DC82",
                    "description": "Sets the land mass color."
                },
                "showocean": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not oceans are filled in color."
                },
                "oceancolor": {
                    "type": "color",
                    "dflt": "#3399FF",
                    "description": "Sets the ocean color"
                },
                "showlakes": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not lakes are drawn."
                },
                "lakecolor": {
                    "type": "color",
                    "dflt": "#3399FF",
                    "description": "Sets the color of the lakes."
                },
                "showrivers": {
                    "type": "boolean",
                    "dflt": false,
                    "description": "Sets whether or not rivers are drawn."
                },
                "rivercolor": {
                    "type": "color",
                    "dflt": "#3399FF",
                    "description": "Sets color of the rivers."
                },
                "riverwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the rivers."
                },
                "showcountries": {
                    "type": "boolean",
                    "description": "Sets whether or not country boundaries are drawn."
                },
                "countrycolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets line color of the country boundaries."
                },
                "countrywidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets line width (in px) of the country boundaries."
                },
                "showsubunits": {
                    "type": "boolean",
                    "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn."
                },
                "subunitcolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the color of the subunits boundaries."
                },
                "subunitwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the subunits boundaries."
                },
                "showframe": {
                    "type": "boolean",
                    "description": "Sets whether or not a frame is drawn around the map."
                },
                "framecolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the color the frame."
                },
                "framewidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the stroke width (in px) of the frame."
                },
                "bgcolor": {
                    "type": "color",
                    "dflt": "#fff",
                    "description": "Set the background color of the map"
                },
                "lonaxis": {
                    "range": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "showgrid": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not graticule are shown on the map."
                    },
                    "tick0": {
                        "type": "number",
                        "description": "Sets the graticule's starting tick longitude/latitude."
                    },
                    "dtick": {
                        "type": "number",
                        "description": "Sets the graticule's longitude/latitude tick step."
                    },
                    "gridcolor": {
                        "type": "color",
                        "dflt": "#eee",
                        "description": "Sets the graticule's stroke color."
                    },
                    "gridwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the graticule's stroke width (in px)."
                    }
                },
                "lataxis": {
                    "range": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "showgrid": {
                        "type": "boolean",
                        "dflt": false,
                        "description": "Sets whether or not graticule are shown on the map."
                    },
                    "tick0": {
                        "type": "number",
                        "description": "Sets the graticule's starting tick longitude/latitude."
                    },
                    "dtick": {
                        "type": "number",
                        "description": "Sets the graticule's longitude/latitude tick step."
                    },
                    "gridcolor": {
                        "type": "color",
                        "dflt": "#eee",
                        "description": "Sets the graticule's stroke color."
                    },
                    "gridwidth": {
                        "type": "number",
                        "min": 0,
                        "dflt": 1,
                        "description": "Sets the graticule's stroke width (in px)."
                    }
                },
                "_isSubplotObj": true
            },
            "legend": {
                "bgcolor": {
                    "type": "color",
                    "description": "Sets the legend background color."
                },
                "bordercolor": {
                    "type": "color",
                    "dflt": "#444",
                    "description": "Sets the color of the border enclosing the legend."
                },
                "borderwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 0,
                    "description": "Sets the width (in px) of the border enclosing the legend."
                },
                "font": {
                    "type": "font",
                    "description": "Sets the font used to text the legend items."
                },
                "traceorder": {
                    "type": "flaglist",
                    "flags": [
                        "reversed",
                        "grouped"
                    ],
                    "extras": [
                        "normal"
                    ],
                    "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*."
                },
                "tracegroupgap": {
                    "type": "number",
                    "min": 0,
                    "dflt": 10,
                    "description": "Sets the amount of vertical space (in px) between legend groups."
                },
                "x": {
                    "type": "number",
                    "min": -2,
                    "max": 3,
                    "dflt": 1.02,
                    "description": "Sets the x position (in normalized coordinates) of the legend."
                },
                "xanchor": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "left",
                        "center",
                        "right"
                    ],
                    "dflt": "left",
                    "description": "Sets the legend's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the legend."
                },
                "y": {
                    "type": "number",
                    "min": -2,
                    "max": 3,
                    "dflt": 1,
                    "description": "Sets the y position (in normalized coordinates) of the legend."
                },
                "yanchor": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "top",
                        "middle",
                        "bottom"
                    ],
                    "dflt": "auto",
                    "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend."
                }
            },
            "annotations": {
                "_isLinkedToArray": true,
                "text": {
                    "type": "string",
                    "blankOk": false,
                    "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported."
                },
                "textangle": {
                    "type": "angle",
                    "dflt": 0,
                    "description": "Sets the angle at which the `text` is drawn with respect to the horizontal."
                },
                "font": {
                    "type": "font",
                    "description": "Sets the annotation text font."
                },
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the annotation (text + arrow)."
                },
                "align": {
                    "type": "enumerated",
                    "values": [
                        "left",
                        "center",
                        "right"
                    ],
                    "dflt": "center",
                    "description": "Sets the vertical alignment of the `text` with respect to the set `x` and `y` position. Has only an effect if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags)."
                },
                "bgcolor": {
                    "type": "color",
                    "dflt": "rgba(0,0,0,0)",
                    "description": "Sets the background color of the annotation."
                },
                "bordercolor": {
                    "type": "color",
                    "dflt": "rgba(0,0,0,0)",
                    "description": "Sets the color of the border enclosing the annotation `text`."
                },
                "borderpad": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the padding (in px) between the `text` and the enclosing border."
                },
                "borderwidth": {
                    "type": "number",
                    "min": 0,
                    "dflt": 1,
                    "description": "Sets the width (in px) of the border enclosing the annotation `text`."
                },
                "showarrow": {
                    "type": "boolean",
                    "dflt": true,
                    "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided."
                },
                "arrowcolor": {
                    "type": "color",
                    "description": "Sets the color of the annotation arrow."
                },
                "arrowhead": {
                    "type": "integer",
                    "min": 0,
                    "max": 8,
                    "dflt": 1,
                    "description": "Sets the annotation arrow head style."
                },
                "arrowsize": {
                    "type": "number",
                    "min": 0.3,
                    "dflt": 1,
                    "description": "Sets the size (in px) of annotation arrow head."
                },
                "arrowwidth": {
                    "type": "number",
                    "min": 0.1,
                    "description": "Sets the width (in px) of annotation arrow."
                },
                "ax": {
                    "type": "number",
                    "dflt": -10,
                    "description": "Sets the x component of the arrow tail about the arrow head. A positive (negative) component corresponds to an arrow pointing from right to left (left to right)"
                },
                "ay": {
                    "type": "number",
                    "dflt": -30,
                    "description": "Sets the y component of the arrow tail about the arrow head. A positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom)"
                },
                "xref": {
                    "type": "enumerated",
                    "values": [
                        "paper",
                        "/^x[0-9]/*$"
                    ],
                    "description": "Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side."
                },
                "x": {
                    "type": "number",
                    "description": "Sets the annotation's x position"
                },
                "xanchor": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "left",
                        "center",
                        "right"
                    ],
                    "dflt": "auto",
                    "description": "Sets the annotation's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side."
                },
                "yref": {
                    "type": "enumerated",
                    "values": [
                        "paper",
                        "/^y[0-9]/*$"
                    ],
                    "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top)."
                },
                "y": {
                    "type": "number",
                    "description": "Sets the annotation's y position"
                },
                "yanchor": {
                    "type": "enumerated",
                    "values": [
                        "auto",
                        "top",
                        "middle",
                        "bottom"
                    ],
                    "dflt": "auto",
                    "description": "Sets the annotation's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side."
                }
            },
            "shapes": {
                "_isLinkedToArray": true,
                "opacity": {
                    "type": "number",
                    "min": 0,
                    "max": 1,
                    "dflt": 1,
                    "description": "Sets the opacity of the shape."
                },
                "line": {
                    "color": {
                        "type": "color",
                        "description": "Sets the line color."
                    },
                    "width": {
                        "type": "number",
                        "min": 0,
                        "dflt": 2,
                        "description": "Sets the line width (in px)."
                    },
                    "dash": {
                        "type": "string",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid",
                        "description": "Sets the style of the lines."
                    }
                },
                "fillcolor": {
                    "type": "color",
                    "dflt": "rgba(0,0,0,0)",
                    "description": "Sets the color filling the shape's interior."
                },
                "type": {
                    "type": "enumerated",
                    "values": [
                        "circle",
                        "rect",
                        "path",
                        "line"
                    ],
                    "description": "Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) If *path*, draw a custom SVG path using `path`."
                },
                "xref": {
                    "type": "enumerated",
                    "description": "Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side."
                },
                "x0": {
                    "type": "any",
                    "description": "Sets the shape's starting x position. See `type` for more info."
                },
                "x1": {
                    "type": "any",
                    "description": "Sets the shape's end x position. See `type` for more info."
                },
                "yref": {
                    "type": "enumerated",
                    "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top)."
                },
                "y0": {
                    "type": "any",
                    "description": "Sets the shape's starting y position. See `type` for more info."
                },
                "y1": {
                    "type": "any",
                    "description": "Sets the shape's end y position. See `type` for more info."
                },
                "path": {
                    "type": "string",
                    "dflt": "For `type` *path* - a valid SVG path but with the pixel values replaced by data values. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789"
                }
            }
        }
    }
}