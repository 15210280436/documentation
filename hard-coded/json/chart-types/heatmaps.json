[
  {
    "examplename": "basic-heatmap", 
    "figure": {
      "data": [
        {
          "z": [
            [
              1, 
              20, 
              30
            ], 
            [
              20, 
              1, 
              60
            ], 
            [
              30, 
              60, 
              1
            ]
          ], 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "labelled-heatmap", 
    "figure": {
      "data": [
        {
          "x": [
            "Monday", 
            "Tuesday", 
            "Wednesday", 
            "Thursday", 
            "Friday"
          ], 
          "y": [
            "Morning", 
            "Afternoon", 
            "Evening"
          ], 
          "z": [
            [
              1, 
              20, 
              30, 
              50, 
              1
            ], 
            [
              20, 
              1, 
              60, 
              80, 
              30
            ], 
            [
              30, 
              60, 
              1, 
              -10, 
              20
            ]
          ], 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Greys-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "data": [
        {
          "type": "heatmap", 
          "z": ">>>z<<<", 
          "scl": "Greys"
        }
      ], 
      "layout": {
        "title": "Greys"
      }
    }
  }, 
  {
    "examplename": "Greens-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Greens"
      }, 
      "data": [
        {
          "scl": "Greens", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Bluered-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Bluered"
      }, 
      "data": [
        {
          "scl": "Bluered", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Hot-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Hot"
      }, 
      "data": [
        {
          "scl": "Hot", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Picnic-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Picnic"
      }, 
      "data": [
        {
          "scl": "Picnic", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Portland-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Portland"
      }, 
      "data": [
        {
          "scl": "Portland", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Jet-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Jet"
      }, 
      "data": [
        {
          "scl": "Jet", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "RdBu-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "RdBu"
      }, 
      "data": [
        {
          "scl": "RdBu", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Blackbody-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Blackbody"
      }, 
      "data": [
        {
          "scl": "Blackbody", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Earth-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Earth"
      }, 
      "data": [
        {
          "scl": "Earth", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "Electric-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "Electric"
      }, 
      "data": [
        {
          "scl": "Electric", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "YIOrRd-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "YIOrRd"
      }, 
      "data": [
        {
          "scl": "YIOrRd", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "YIGnBu-heatmap", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "layout": {
        "title": "YIGnBu"
      }, 
      "data": [
        {
          "scl": "YIGnBu", 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }, 
  {
    "examplename": "custom-colorscale", 
    "prepend": {
      "python": [
        "import numpy as np\n", 
        "size = 50", 
        "z = np.zeros((size, size)).tolist()", 
        "for r in range(1, size + 1):", 
        "    for c in range(1, size + 1):", 
        "        z[r-1][c-1] = np.sqrt(r*c/float(size**2))"
      ], 
      "matlab": [
        "size = 50;", 
        "z = zeros(size, size);", 
        "for r = 1:size", 
        "    for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)", 
        "    end", 
        "end"
      ], 
      "r": [
        "size <- 50", 
        "z <- matrix(0, size, size)", 
        "for(r in 1:size) {", 
        "    for(c in 1:size) {", 
        "        z[r, c] <- sqrt(r*c/size^2)", 
        "    }", 
        "}"
      ], 
      "julia": [
        "size = 50", 
        "z = rand(size, size)", 
        "for r = 1:size", 
        "  for c = 1:size", 
        "        z(r,c) = sqrt(r*c/size^2)"
      ], 
      "node": [
        "var unpack = require('ndarray-unpack');", 
        "var zeros = require('zeros');", 
        "var fill = require('ndarray-fill');\n", 
        "var size = 50;", 
        "var z = unpack(fill(zeros([size, size]), function(c,r) {", 
        "  return Math.sqrt((r*c)/(size*size));", 
        "}));"
      ]
    }, 
    "figure": {
      "data": [
        {
          "scl": [
            [
              0.0, 
              "rgb(165,0,38)"
            ], 
            [
              0.1111111111111111, 
              "rgb(215,48,39)"
            ], 
            [
              0.2222222222222222, 
              "rgb(244,109,67)"
            ], 
            [
              0.3333333333333333, 
              "rgb(253,174,97)"
            ], 
            [
              0.4444444444444444, 
              "rgb(254,224,144)"
            ], 
            [
              0.5555555555555556, 
              "rgb(224,243,248)"
            ], 
            [
              0.6666666666666666, 
              "rgb(171,217,233)"
            ], 
            [
              0.7777777777777778, 
              "rgb(116,173,209)"
            ], 
            [
              0.8888888888888888, 
              "rgb(69,117,180)"
            ], 
            [
              1.0, 
              "rgb(49,54,149)"
            ]
          ], 
          "z": ">>>z<<<", 
          "type": "heatmap"
        }
      ]
    }
  }
]