{
  "path": "hard-coded", 
  "subsections": {
    "file-settings": {
      "path": "hard-coded/file-settings", 
      "subsections": {
        "privacy": {
          "path": "hard-coded/file-settings/privacy", 
          "subsections": {
            "privacy-true": {
              "files": {
                "model.json": "hard-coded/file-settings/privacy/privacy-true/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 2, 4], \n    y: [0, 4, 2], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"privacy-privacy-true\", fileopt: \"overwrite\", auto_open: \"false\", world_readable: \"true\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "privacy-true", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 2, 4],\n        y=[0, 4, 2]\n    )\n])\n\nplot_url = py.plot(data, filename='privacy-privacy-true', world_readable=True)", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 2, 4], \n    \"y\" => [0, 4, 2], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"privacy-privacy-true\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\", \"world_readable\" => \"true\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 2, 4], \n    \"y\" =&gt; [0, 4, 2], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"privacy-privacy-true\", \"fileopt\" =&gt; \"overwrite\", \"auto_open\" =&gt; \"false\", \"world_readable\" =&gt; \"true\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/969", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 2, 4), \n    y = c(0, 4, 2), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"privacy-privacy-true\", fileopt=\"overwrite\", auto_open=\"FALSE\", world_readable=\"TRUE\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 2, 4], ...\n    'y', [0, 4, 2], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'privacy-privacy-true', 'fileopt', 'overwrite', 'auto_open', 'false', 'world_readable', 'true'));\nplot_url = response.url", 
              "path": "hard-coded/file-settings/privacy/privacy-true", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 2, 4], \n    y: [0, 4, 2], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"privacy-privacy-true\", fileopt: \"overwrite\", auto_open: \"false\", world_readable: \"true\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 2, 4], ...\n    'y', [0, 4, 2], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'privacy-privacy-true', 'fileopt', 'overwrite', 'auto_open', 'false', 'world_readable', 'true'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "plot-options": {
                  "auto_open": false, 
                  "world_readable": true
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 2, 4), \n    y = c(0, 4, 2), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"privacy-privacy-true\", fileopt=\"overwrite\", auto_open=\"FALSE\", world_readable=\"TRUE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 2, 4],\n        y=[0, 4, 2]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='privacy-privacy-true', auto_open=False, world_readable=True)"
            }, 
            "privacy-false": {
              "files": {
                "model.json": "hard-coded/file-settings/privacy/privacy-false/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 2, 4], \n    y: [0, 4, 2], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"privacy-privacy-false\", fileopt: \"overwrite\", auto_open: \"false\", world_readable: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "privacy-false", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 2, 4],\n        y=[0, 4, 2]\n    )\n])\n\nplot_url = py.plot(data, filename='privacy-privacy-false', world_readable=False)", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 2, 4], \n    \"y\" => [0, 4, 2], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"privacy-privacy-false\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\", \"world_readable\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 2, 4], \n    \"y\" =&gt; [0, 4, 2], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"privacy-privacy-false\", \"fileopt\" =&gt; \"overwrite\", \"auto_open\" =&gt; \"false\", \"world_readable\" =&gt; \"false\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/970", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 2, 4), \n    y = c(0, 4, 2), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"privacy-privacy-false\", fileopt=\"overwrite\", auto_open=\"FALSE\", world_readable=\"FALSE\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 2, 4], ...\n    'y', [0, 4, 2], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'privacy-privacy-false', 'fileopt', 'overwrite', 'auto_open', 'false', 'world_readable', 'false'));\nplot_url = response.url", 
              "path": "hard-coded/file-settings/privacy/privacy-false", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 2, 4], \n    y: [0, 4, 2], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"privacy-privacy-false\", fileopt: \"overwrite\", auto_open: \"false\", world_readable: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 2, 4], ...\n    'y', [0, 4, 2], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'privacy-privacy-false', 'fileopt', 'overwrite', 'auto_open', 'false', 'world_readable', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "plot-options": {
                  "auto_open": false, 
                  "world_readable": false
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 2, 4), \n    y = c(0, 4, 2), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"privacy-privacy-false\", fileopt=\"overwrite\", auto_open=\"FALSE\", world_readable=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 2, 4],\n        y=[0, 4, 2]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='privacy-privacy-false', auto_open=False, world_readable=False)"
            }
          }, 
          "name": "privacy", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "privacy"
          }
        }
      }, 
      "name": "file-settings", 
      "config.json": {
        "has_thumbnail": true, 
        "name": "for the people"
      }
    }, 
    "layout": {
      "path": "hard-coded/layout", 
      "subsections": {
        "sizing": {
          "path": "hard-coded/layout/sizing", 
          "subsections": {
            "size-margins": {
              "files": {
                "model.json": "hard-coded/layout/sizing/size-margins/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  width: 500, \n  height: 500, \n  autosize: false, \n  margin: {\n    l: 50, \n    r: 50, \n    b: 100, \n    t: 100, \n    pad: 4\n  }, \n  paper_bgcolor: \"#7f7f7f\", \n  plot_bgcolor: \"#c7c7c7\"\n};\n\nvar graph_options = {filename: \"sizing-size-margins\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "size-margins", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n    )\n])\nlayout = Layout(\n    width=500,\n    height=500,\n    autosize=False,\n    margin=Margin(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    paper_bgcolor='#7f7f7f',\n    plot_bgcolor='#c7c7c7'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='sizing-size-margins')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"type\" => \"scatter\"\n  ]\n]\nlayout = [\n  \"width\" => 500, \n  \"height\" => 500, \n  \"autosize\" => false, \n  \"margin\" => [\n    \"l\" => 50, \n    \"r\" => 50, \n    \"b\" => 100, \n    \"t\" => 100, \n    \"pad\" => 4\n  ], \n  \"paper_bgcolor\" => \"#7f7f7f\", \n  \"plot_bgcolor\" => \"#c7c7c7\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"sizing-size-margins\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\nlayout = [\n  \"width\" =&gt; 500, \n  \"height\" =&gt; 500, \n  \"autosize\" =&gt; false, \n  \"margin\" =&gt; [\n    \"l\" =&gt; 50, \n    \"r\" =&gt; 50, \n    \"b\" =&gt; 100, \n    \"t\" =&gt; 100, \n    \"pad\" =&gt; 4\n  ], \n  \"paper_bgcolor\" =&gt; \"#7f7f7f\", \n  \"plot_bgcolor\" =&gt; \"#c7c7c7\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"sizing-size-margins\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/971", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    type = \"scatter\"\n  )\n)\nlayout &lt;- list(\n  width = 500, \n  height = 500, \n  autosize = FALSE, \n  margin = list(\n    l = 50, \n    r = 50, \n    b = 100, \n    t = 100, \n    pad = 4\n  ), \n  paper_bgcolor = \"#7f7f7f\", \n  plot_bgcolor = \"#c7c7c7\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"sizing-size-margins\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'width', 500, ...\n    'height', 500, ...\n    'autosize', false, ...\n    'margin', struct(...\n      'l', 50, ...\n      'r', 50, ...\n      'b', 100, ...\n      't', 100, ...\n      'pad', 4), ...\n    'paper_bgcolor', '#7f7f7f', ...\n    'plot_bgcolor', '#c7c7c7');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'sizing-size-margins', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/sizing/size-margins", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  width: 500, \n  height: 500, \n  autosize: false, \n  margin: {\n    l: 50, \n    r: 50, \n    b: 100, \n    t: 100, \n    pad: 4\n  }, \n  paper_bgcolor: \"#7f7f7f\", \n  plot_bgcolor: \"#c7c7c7\"\n};\n\nvar graph_options = {filename: \"sizing-size-margins\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'width', 500, ...\n    'height', 500, ...\n    'autosize', false, ...\n    'margin', struct(...\n      'l', 50, ...\n      'r', 50, ...\n      'b', 100, ...\n      't', 100, ...\n      'pad', 4), ...\n    'paper_bgcolor', '#7f7f7f', ...\n    'plot_bgcolor', '#c7c7c7');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'sizing-size-margins', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    type = \"scatter\"\n  )\n)\nlayout <- list(\n  width = 500, \n  height = 500, \n  autosize = FALSE, \n  margin = list(\n    l = 50, \n    r = 50, \n    b = 100, \n    t = 100, \n    pad = 4\n  ), \n  paper_bgcolor = \"#7f7f7f\", \n  plot_bgcolor = \"#c7c7c7\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"sizing-size-margins\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n    )\n])\nlayout = Layout(\n    width=500,\n    height=500,\n    autosize=False,\n    margin=Margin(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    paper_bgcolor='#7f7f7f',\n    plot_bgcolor='#c7c7c7'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='sizing-size-margins', auto_open=False)"
            }
          }, 
          "name": "sizing", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "sizing"
          }
        }, 
        "latex": {
          "path": "hard-coded/layout/latex", 
          "subsections": {
            "latex": {
              "files": {
                "model.json": "hard-coded/layout/latex/latex/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [1, 4, 9, 16], \n  name: \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [0.5, 2, 4.5, 8], \n  name: \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {title: \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"}, \n  yaxis: {title: \"$d, r \\text{ (solar radius)}$\"}\n};\n\nvar graph_options = {filename: \"latex-latex\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "latex", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 4, 9, 16],\n    name='$\\\\alpha_{1c} = 352 \\\\pm 11 \\\\text{ km s}^{-1}$'\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[0.5, 2, 4.5, 8],\n    name='$\\\\beta_{1c} = 25 \\\\pm 11 \\\\text{ km s}^{-1}$'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        title='$\\\\sqrt{(n_\\\\text{c}(t|{T_\\\\text{early}}))}$'\n    ),\n    yaxis=YAxis(\n        title='$d, r \\\\text{ (solar radius)}$'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='latex-latex')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [1, 4, 9, 16], \n  \"name\" => \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [0.5, 2, 4.5, 8], \n  \"name\" => \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"title\" => \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"], \n  \"yaxis\" => [\"title\" => \"$d, r \\text{ (solar radius)}$\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"latex-latex\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [1, 4, 9, 16], \n  \"name\" =&gt; \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [0.5, 2, 4.5, 8], \n  \"name\" =&gt; \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"title\" =&gt; \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"], \n  \"yaxis\" =&gt; [\"title\" =&gt; \"$d, r \\text{ (solar radius)}$\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"latex-latex\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/972", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(1, 4, 9, 16), \n  name = \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(0.5, 2, 4.5, 8), \n  name = \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(title = \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"), \n  yaxis = list(title = \"$d, r \\text{ (solar radius)}$\")\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"latex-latex\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [1, 4, 9, 16], ...\n  'name', '$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [0.5, 2, 4.5, 8], ...\n  'name', '$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('title', '$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$'), ...\n    'yaxis', struct('title', '$d, r \\text{ (solar radius)}$'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'latex-latex', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/latex/latex", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [1, 4, 9, 16], \n  name: \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [0.5, 2, 4.5, 8], \n  name: \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {title: \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"}, \n  yaxis: {title: \"$d, r \\text{ (solar radius)}$\"}\n};\n\nvar graph_options = {filename: \"latex-latex\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [1, 4, 9, 16], ...\n  'name', '$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [0.5, 2, 4.5, 8], ...\n  'name', '$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('title', '$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$'), ...\n    'yaxis', struct('title', '$d, r \\text{ (solar radius)}$'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'latex-latex', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(1, 4, 9, 16), \n  name = \"$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(0.5, 2, 4.5, 8), \n  name = \"$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(title = \"$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$\"), \n  yaxis = list(title = \"$d, r \\text{ (solar radius)}$\")\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"latex-latex\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 4, 9, 16],\n    name='$\\\\alpha_{1c} = 352 \\\\pm 11 \\\\text{ km s}^{-1}$'\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[0.5, 2, 4.5, 8],\n    name='$\\\\beta_{1c} = 25 \\\\pm 11 \\\\text{ km s}^{-1}$'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        title='$\\\\sqrt{(n_\\\\text{c}(t|{T_\\\\text{early}}))}$'\n    ),\n    yaxis=YAxis(\n        title='$d, r \\\\text{ (solar radius)}$'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='latex-latex', auto_open=False)"
            }
          }, 
          "name": "latex", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "latex"
          }
        }, 
        "axes": {
          "path": "hard-coded/layout/axes", 
          "subsections": {
            "axes-booleans": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-booleans/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    showline: false, \n    ticks: \"\", \n    showticklabels: false, \n    showgrid: false, \n    autorange: true, \n    autotick: true, \n    zeroline: false\n  }, \n  yaxis: {\n    showline: false, \n    ticks: \"\", \n    showticklabels: false, \n    showgrid: false, \n    autorange: true, \n    autotick: true, \n    zeroline: false\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-booleans\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-booleans", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        showline=False,\n        ticks='',\n        showticklabels=False,\n        showgrid=False,\n        autorange=True,\n        autotick=True,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        showline=False,\n        ticks='',\n        showticklabels=False,\n        showgrid=False,\n        autorange=True,\n        autotick=True,\n        zeroline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-booleans')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\n    \"showline\" => false, \n    \"ticks\" => \"\", \n    \"showticklabels\" => false, \n    \"showgrid\" => false, \n    \"autorange\" => true, \n    \"autotick\" => true, \n    \"zeroline\" => false\n  ], \n  \"yaxis\" => [\n    \"showline\" => false, \n    \"ticks\" => \"\", \n    \"showticklabels\" => false, \n    \"showgrid\" => false, \n    \"autorange\" => true, \n    \"autotick\" => true, \n    \"zeroline\" => false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-booleans\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"showline\" =&gt; false, \n    \"ticks\" =&gt; \"\", \n    \"showticklabels\" =&gt; false, \n    \"showgrid\" =&gt; false, \n    \"autorange\" =&gt; true, \n    \"autotick\" =&gt; true, \n    \"zeroline\" =&gt; false\n  ], \n  \"yaxis\" =&gt; [\n    \"showline\" =&gt; false, \n    \"ticks\" =&gt; \"\", \n    \"showticklabels\" =&gt; false, \n    \"showgrid\" =&gt; false, \n    \"autorange\" =&gt; true, \n    \"autotick\" =&gt; true, \n    \"zeroline\" =&gt; false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-booleans\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/973", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(\n    showline = FALSE, \n    ticks = \"\", \n    showticklabels = FALSE, \n    showgrid = FALSE, \n    autorange = TRUE, \n    autotick = TRUE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    showline = FALSE, \n    ticks = \"\", \n    showticklabels = FALSE, \n    showgrid = FALSE, \n    autorange = TRUE, \n    autotick = TRUE, \n    zeroline = FALSE\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-booleans\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'showline', false, ...\n      'ticks', '', ...\n      'showticklabels', false, ...\n      'showgrid', false, ...\n      'autorange', true, ...\n      'autotick', true, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'showline', false, ...\n      'ticks', '', ...\n      'showticklabels', false, ...\n      'showgrid', false, ...\n      'autorange', true, ...\n      'autotick', true, ...\n      'zeroline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-booleans', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-booleans", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    showline: false, \n    ticks: \"\", \n    showticklabels: false, \n    showgrid: false, \n    autorange: true, \n    autotick: true, \n    zeroline: false\n  }, \n  yaxis: {\n    showline: false, \n    ticks: \"\", \n    showticklabels: false, \n    showgrid: false, \n    autorange: true, \n    autotick: true, \n    zeroline: false\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-booleans\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'showline', false, ...\n      'ticks', '', ...\n      'showticklabels', false, ...\n      'showgrid', false, ...\n      'autorange', true, ...\n      'autotick', true, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'showline', false, ...\n      'ticks', '', ...\n      'showticklabels', false, ...\n      'showgrid', false, ...\n      'autorange', true, ...\n      'autotick', true, ...\n      'zeroline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-booleans', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(\n    showline = FALSE, \n    ticks = \"\", \n    showticklabels = FALSE, \n    showgrid = FALSE, \n    autorange = TRUE, \n    autotick = TRUE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    showline = FALSE, \n    ticks = \"\", \n    showticklabels = FALSE, \n    showgrid = FALSE, \n    autorange = TRUE, \n    autotick = TRUE, \n    zeroline = FALSE\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-booleans\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        showline=False,\n        ticks='',\n        showticklabels=False,\n        showgrid=False,\n        autorange=True,\n        autotick=True,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        showline=False,\n        ticks='',\n        showticklabels=False,\n        showgrid=False,\n        autorange=True,\n        autotick=True,\n        zeroline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-booleans', auto_open=False)"
            }, 
            "axes-lines": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-lines/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    showline: true, \n    linecolor: \"#636363\", \n    linewidth: 6, \n    showgrid: true, \n    gridcolor: \"#bdbdbd\", \n    gridwidth: 2, \n    zeroline: true, \n    zerolinecolor: \"#969696\", \n    zerolinewidth: 4, \n    mirror: \"ticks\"\n  }, \n  yaxis: {\n    showline: true, \n    linecolor: \"#636363\", \n    linewidth: 6, \n    showgrid: true, \n    gridcolor: \"#bdbdbd\", \n    gridwidth: 2, \n    zeroline: true, \n    zerolinecolor: \"#969696\", \n    zerolinewidth: 4, \n    mirror: \"ticks\"\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-lines\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-lines", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        showline=True,\n        linecolor='#636363',\n        linewidth=6,\n        showgrid=True,\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zeroline=True,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        mirror='ticks'\n    ),\n    yaxis=YAxis(\n        showline=True,\n        linecolor='#636363',\n        linewidth=6,\n        showgrid=True,\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zeroline=True,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        mirror='ticks'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-lines')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\n    \"showline\" => true, \n    \"linecolor\" => \"#636363\", \n    \"linewidth\" => 6, \n    \"showgrid\" => true, \n    \"gridcolor\" => \"#bdbdbd\", \n    \"gridwidth\" => 2, \n    \"zeroline\" => true, \n    \"zerolinecolor\" => \"#969696\", \n    \"zerolinewidth\" => 4, \n    \"mirror\" => \"ticks\"\n  ], \n  \"yaxis\" => [\n    \"showline\" => true, \n    \"linecolor\" => \"#636363\", \n    \"linewidth\" => 6, \n    \"showgrid\" => true, \n    \"gridcolor\" => \"#bdbdbd\", \n    \"gridwidth\" => 2, \n    \"zeroline\" => true, \n    \"zerolinecolor\" => \"#969696\", \n    \"zerolinewidth\" => 4, \n    \"mirror\" => \"ticks\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-lines\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"showline\" =&gt; true, \n    \"linecolor\" =&gt; \"#636363\", \n    \"linewidth\" =&gt; 6, \n    \"showgrid\" =&gt; true, \n    \"gridcolor\" =&gt; \"#bdbdbd\", \n    \"gridwidth\" =&gt; 2, \n    \"zeroline\" =&gt; true, \n    \"zerolinecolor\" =&gt; \"#969696\", \n    \"zerolinewidth\" =&gt; 4, \n    \"mirror\" =&gt; \"ticks\"\n  ], \n  \"yaxis\" =&gt; [\n    \"showline\" =&gt; true, \n    \"linecolor\" =&gt; \"#636363\", \n    \"linewidth\" =&gt; 6, \n    \"showgrid\" =&gt; true, \n    \"gridcolor\" =&gt; \"#bdbdbd\", \n    \"gridwidth\" =&gt; 2, \n    \"zeroline\" =&gt; true, \n    \"zerolinecolor\" =&gt; \"#969696\", \n    \"zerolinewidth\" =&gt; 4, \n    \"mirror\" =&gt; \"ticks\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-lines\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/974", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(\n    showline = TRUE, \n    linecolor = \"#636363\", \n    linewidth = 6, \n    showgrid = TRUE, \n    gridcolor = \"#bdbdbd\", \n    gridwidth = 2, \n    zeroline = TRUE, \n    zerolinecolor = \"#969696\", \n    zerolinewidth = 4, \n    mirror = \"ticks\"\n  ), \n  yaxis = list(\n    showline = TRUE, \n    linecolor = \"#636363\", \n    linewidth = 6, \n    showgrid = TRUE, \n    gridcolor = \"#bdbdbd\", \n    gridwidth = 2, \n    zeroline = TRUE, \n    zerolinecolor = \"#969696\", \n    zerolinewidth = 4, \n    mirror = \"ticks\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-lines\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'showline', true, ...\n      'linecolor', '#636363', ...\n      'linewidth', 6, ...\n      'showgrid', true, ...\n      'gridcolor', '#bdbdbd', ...\n      'gridwidth', 2, ...\n      'zeroline', true, ...\n      'zerolinecolor', '#969696', ...\n      'zerolinewidth', 4, ...\n      'mirror', 'ticks'), ...\n    'yaxis', struct(...\n      'showline', true, ...\n      'linecolor', '#636363', ...\n      'linewidth', 6, ...\n      'showgrid', true, ...\n      'gridcolor', '#bdbdbd', ...\n      'gridwidth', 2, ...\n      'zeroline', true, ...\n      'zerolinecolor', '#969696', ...\n      'zerolinewidth', 4, ...\n      'mirror', 'ticks'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-lines', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-lines", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    showline: true, \n    linecolor: \"#636363\", \n    linewidth: 6, \n    showgrid: true, \n    gridcolor: \"#bdbdbd\", \n    gridwidth: 2, \n    zeroline: true, \n    zerolinecolor: \"#969696\", \n    zerolinewidth: 4, \n    mirror: \"ticks\"\n  }, \n  yaxis: {\n    showline: true, \n    linecolor: \"#636363\", \n    linewidth: 6, \n    showgrid: true, \n    gridcolor: \"#bdbdbd\", \n    gridwidth: 2, \n    zeroline: true, \n    zerolinecolor: \"#969696\", \n    zerolinewidth: 4, \n    mirror: \"ticks\"\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-lines\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'showline', true, ...\n      'linecolor', '#636363', ...\n      'linewidth', 6, ...\n      'showgrid', true, ...\n      'gridcolor', '#bdbdbd', ...\n      'gridwidth', 2, ...\n      'zeroline', true, ...\n      'zerolinecolor', '#969696', ...\n      'zerolinewidth', 4, ...\n      'mirror', 'ticks'), ...\n    'yaxis', struct(...\n      'showline', true, ...\n      'linecolor', '#636363', ...\n      'linewidth', 6, ...\n      'showgrid', true, ...\n      'gridcolor', '#bdbdbd', ...\n      'gridwidth', 2, ...\n      'zeroline', true, ...\n      'zerolinecolor', '#969696', ...\n      'zerolinewidth', 4, ...\n      'mirror', 'ticks'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-lines', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(\n    showline = TRUE, \n    linecolor = \"#636363\", \n    linewidth = 6, \n    showgrid = TRUE, \n    gridcolor = \"#bdbdbd\", \n    gridwidth = 2, \n    zeroline = TRUE, \n    zerolinecolor = \"#969696\", \n    zerolinewidth = 4, \n    mirror = \"ticks\"\n  ), \n  yaxis = list(\n    showline = TRUE, \n    linecolor = \"#636363\", \n    linewidth = 6, \n    showgrid = TRUE, \n    gridcolor = \"#bdbdbd\", \n    gridwidth = 2, \n    zeroline = TRUE, \n    zerolinecolor = \"#969696\", \n    zerolinewidth = 4, \n    mirror = \"ticks\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-lines\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        showline=True,\n        linecolor='#636363',\n        linewidth=6,\n        showgrid=True,\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zeroline=True,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        mirror='ticks'\n    ),\n    yaxis=YAxis(\n        showline=True,\n        linecolor='#636363',\n        linewidth=6,\n        showgrid=True,\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zeroline=True,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        mirror='ticks'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-lines', auto_open=False)"
            }, 
            "axes-ticks": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-ticks/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    tick0: 0, \n    dtick: 0.25, \n    ticks: \"outside\", \n    ticklen: 8, \n    tickcolor: \"#000\", \n    tickwidth: 4, \n    autotick: false\n  }, \n  yaxis: {\n    tick0: 0, \n    dtick: 0.25, \n    ticks: \"outside\", \n    ticklen: 8, \n    tickcolor: \"#000\", \n    tickwidth: 4, \n    autotick: false\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-ticks\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-ticks", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        tick0=0,\n        dtick=0.25,\n        ticks='outside',\n        ticklen=8,\n        tickcolor='#000',\n        tickwidth=4,\n        autotick=False\n    ),\n    yaxis=YAxis(\n        tick0=0,\n        dtick=0.25,\n        ticks='outside',\n        ticklen=8,\n        tickcolor='#000',\n        tickwidth=4,\n        autotick=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-ticks')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\n    \"tick0\" => 0, \n    \"dtick\" => 0.25, \n    \"ticks\" => \"outside\", \n    \"ticklen\" => 8, \n    \"tickcolor\" => \"#000\", \n    \"tickwidth\" => 4, \n    \"autotick\" => false\n  ], \n  \"yaxis\" => [\n    \"tick0\" => 0, \n    \"dtick\" => 0.25, \n    \"ticks\" => \"outside\", \n    \"ticklen\" => 8, \n    \"tickcolor\" => \"#000\", \n    \"tickwidth\" => 4, \n    \"autotick\" => false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-ticks\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"tick0\" =&gt; 0, \n    \"dtick\" =&gt; 0.25, \n    \"ticks\" =&gt; \"outside\", \n    \"ticklen\" =&gt; 8, \n    \"tickcolor\" =&gt; \"#000\", \n    \"tickwidth\" =&gt; 4, \n    \"autotick\" =&gt; false\n  ], \n  \"yaxis\" =&gt; [\n    \"tick0\" =&gt; 0, \n    \"dtick\" =&gt; 0.25, \n    \"ticks\" =&gt; \"outside\", \n    \"ticklen\" =&gt; 8, \n    \"tickcolor\" =&gt; \"#000\", \n    \"tickwidth\" =&gt; 4, \n    \"autotick\" =&gt; false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-ticks\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/975", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(\n    tick0 = 0, \n    dtick = 0.25, \n    ticks = \"outside\", \n    ticklen = 8, \n    tickcolor = \"#000\", \n    tickwidth = 4, \n    autotick = FALSE\n  ), \n  yaxis = list(\n    tick0 = 0, \n    dtick = 0.25, \n    ticks = \"outside\", \n    ticklen = 8, \n    tickcolor = \"#000\", \n    tickwidth = 4, \n    autotick = FALSE\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-ticks\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'tick0', 0, ...\n      'dtick', 0.25, ...\n      'ticks', 'outside', ...\n      'ticklen', 8, ...\n      'tickcolor', '#000', ...\n      'tickwidth', 4, ...\n      'autotick', false), ...\n    'yaxis', struct(...\n      'tick0', 0, ...\n      'dtick', 0.25, ...\n      'ticks', 'outside', ...\n      'ticklen', 8, ...\n      'tickcolor', '#000', ...\n      'tickwidth', 4, ...\n      'autotick', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-ticks', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-ticks", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    tick0: 0, \n    dtick: 0.25, \n    ticks: \"outside\", \n    ticklen: 8, \n    tickcolor: \"#000\", \n    tickwidth: 4, \n    autotick: false\n  }, \n  yaxis: {\n    tick0: 0, \n    dtick: 0.25, \n    ticks: \"outside\", \n    ticklen: 8, \n    tickcolor: \"#000\", \n    tickwidth: 4, \n    autotick: false\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-ticks\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'tick0', 0, ...\n      'dtick', 0.25, ...\n      'ticks', 'outside', ...\n      'ticklen', 8, ...\n      'tickcolor', '#000', ...\n      'tickwidth', 4, ...\n      'autotick', false), ...\n    'yaxis', struct(...\n      'tick0', 0, ...\n      'dtick', 0.25, ...\n      'ticks', 'outside', ...\n      'ticklen', 8, ...\n      'tickcolor', '#000', ...\n      'tickwidth', 4, ...\n      'autotick', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-ticks', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(\n    tick0 = 0, \n    dtick = 0.25, \n    ticks = \"outside\", \n    ticklen = 8, \n    tickcolor = \"#000\", \n    tickwidth = 4, \n    autotick = FALSE\n  ), \n  yaxis = list(\n    tick0 = 0, \n    dtick = 0.25, \n    ticks = \"outside\", \n    ticklen = 8, \n    tickcolor = \"#000\", \n    tickwidth = 4, \n    autotick = FALSE\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-ticks\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        tick0=0,\n        dtick=0.25,\n        ticks='outside',\n        ticklen=8,\n        tickcolor='#000',\n        tickwidth=4,\n        autotick=False\n    ),\n    yaxis=YAxis(\n        tick0=0,\n        dtick=0.25,\n        ticks='outside',\n        ticklen=8,\n        tickcolor='#000',\n        tickwidth=4,\n        autotick=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-ticks', auto_open=False)"
            }, 
            "axes-labels": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-labels/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    title: \"AXIS TITLE\", \n    showticklabels: true, \n    tickangle: 45, \n    exponentformat: \"e\", \n    showexponent: \"All\", \n    titlefont: {\n      family: \"Arial, sans-serif\", \n      size: 18, \n      color: \"lightgrey\"\n    }, \n    tickfont: {\n      family: \"Old Standard TT, serif\", \n      size: 14, \n      color: \"black\"\n    }\n  }, \n  yaxis: {\n    title: \"AXIS TITLE\", \n    showticklabels: true, \n    tickangle: 45, \n    exponentformat: \"e\", \n    showexponent: \"All\", \n    titlefont: {\n      family: \"Arial, sans-serif\", \n      size: 18, \n      color: \"lightgrey\"\n    }, \n    tickfont: {\n      family: \"Old Standard TT, serif\", \n      size: 14, \n      color: \"black\"\n    }\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-labels\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-labels", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        title='AXIS TITLE',\n        showticklabels=True,\n        tickangle=45,\n        exponentformat='e',\n        showexponent='All',\n        titlefont=Font(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        tickfont=Font(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        )\n    ),\n    yaxis=YAxis(\n        title='AXIS TITLE',\n        showticklabels=True,\n        tickangle=45,\n        exponentformat='e',\n        showexponent='All',\n        titlefont=Font(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        tickfont=Font(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        )\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-labels')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\n    \"title\" => \"AXIS TITLE\", \n    \"showticklabels\" => true, \n    \"tickangle\" => 45, \n    \"exponentformat\" => \"e\", \n    \"showexponent\" => \"All\", \n    \"titlefont\" => [\n      \"family\" => \"Arial, sans-serif\", \n      \"size\" => 18, \n      \"color\" => \"lightgrey\"\n    ], \n    \"tickfont\" => [\n      \"family\" => \"Old Standard TT, serif\", \n      \"size\" => 14, \n      \"color\" => \"black\"\n    ]\n  ], \n  \"yaxis\" => [\n    \"title\" => \"AXIS TITLE\", \n    \"showticklabels\" => true, \n    \"tickangle\" => 45, \n    \"exponentformat\" => \"e\", \n    \"showexponent\" => \"All\", \n    \"titlefont\" => [\n      \"family\" => \"Arial, sans-serif\", \n      \"size\" => 18, \n      \"color\" => \"lightgrey\"\n    ], \n    \"tickfont\" => [\n      \"family\" => \"Old Standard TT, serif\", \n      \"size\" => 14, \n      \"color\" => \"black\"\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-labels\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"title\" =&gt; \"AXIS TITLE\", \n    \"showticklabels\" =&gt; true, \n    \"tickangle\" =&gt; 45, \n    \"exponentformat\" =&gt; \"e\", \n    \"showexponent\" =&gt; \"All\", \n    \"titlefont\" =&gt; [\n      \"family\" =&gt; \"Arial, sans-serif\", \n      \"size\" =&gt; 18, \n      \"color\" =&gt; \"lightgrey\"\n    ], \n    \"tickfont\" =&gt; [\n      \"family\" =&gt; \"Old Standard TT, serif\", \n      \"size\" =&gt; 14, \n      \"color\" =&gt; \"black\"\n    ]\n  ], \n  \"yaxis\" =&gt; [\n    \"title\" =&gt; \"AXIS TITLE\", \n    \"showticklabels\" =&gt; true, \n    \"tickangle\" =&gt; 45, \n    \"exponentformat\" =&gt; \"e\", \n    \"showexponent\" =&gt; \"All\", \n    \"titlefont\" =&gt; [\n      \"family\" =&gt; \"Arial, sans-serif\", \n      \"size\" =&gt; 18, \n      \"color\" =&gt; \"lightgrey\"\n    ], \n    \"tickfont\" =&gt; [\n      \"family\" =&gt; \"Old Standard TT, serif\", \n      \"size\" =&gt; 14, \n      \"color\" =&gt; \"black\"\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-labels\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/976", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(\n    title = \"AXIS TITLE\", \n    showticklabels = TRUE, \n    tickangle = 45, \n    exponentformat = \"e\", \n    showexponent = \"All\", \n    titlefont = list(\n      family = \"Arial, sans-serif\", \n      size = 18, \n      color = \"lightgrey\"\n    ), \n    tickfont = list(\n      family = \"Old Standard TT, serif\", \n      size = 14, \n      color = \"black\"\n    )\n  ), \n  yaxis = list(\n    title = \"AXIS TITLE\", \n    showticklabels = TRUE, \n    tickangle = 45, \n    exponentformat = \"e\", \n    showexponent = \"All\", \n    titlefont = list(\n      family = \"Arial, sans-serif\", \n      size = 18, \n      color = \"lightgrey\"\n    ), \n    tickfont = list(\n      family = \"Old Standard TT, serif\", \n      size = 14, \n      color = \"black\"\n    )\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-labels\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'title', 'AXIS TITLE', ...\n      'showticklabels', true, ...\n      'tickangle', 45, ...\n      'exponentformat', 'e', ...\n      'showexponent', 'All', ...\n      'titlefont', struct(...\n        'family', 'Arial, sans-serif', ...\n        'size', 18, ...\n        'color', 'lightgrey'), ...\n      'tickfont', struct(...\n        'family', 'Old Standard TT, serif', ...\n        'size', 14, ...\n        'color', 'black')), ...\n    'yaxis', struct(...\n      'title', 'AXIS TITLE', ...\n      'showticklabels', true, ...\n      'tickangle', 45, ...\n      'exponentformat', 'e', ...\n      'showexponent', 'All', ...\n      'titlefont', struct(...\n        'family', 'Arial, sans-serif', ...\n        'size', 18, ...\n        'color', 'lightgrey'), ...\n      'tickfont', struct(...\n        'family', 'Old Standard TT, serif', ...\n        'size', 14, ...\n        'color', 'black')));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-labels', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-labels", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    title: \"AXIS TITLE\", \n    showticklabels: true, \n    tickangle: 45, \n    exponentformat: \"e\", \n    showexponent: \"All\", \n    titlefont: {\n      family: \"Arial, sans-serif\", \n      size: 18, \n      color: \"lightgrey\"\n    }, \n    tickfont: {\n      family: \"Old Standard TT, serif\", \n      size: 14, \n      color: \"black\"\n    }\n  }, \n  yaxis: {\n    title: \"AXIS TITLE\", \n    showticklabels: true, \n    tickangle: 45, \n    exponentformat: \"e\", \n    showexponent: \"All\", \n    titlefont: {\n      family: \"Arial, sans-serif\", \n      size: 18, \n      color: \"lightgrey\"\n    }, \n    tickfont: {\n      family: \"Old Standard TT, serif\", \n      size: 14, \n      color: \"black\"\n    }\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-labels\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'title', 'AXIS TITLE', ...\n      'showticklabels', true, ...\n      'tickangle', 45, ...\n      'exponentformat', 'e', ...\n      'showexponent', 'All', ...\n      'titlefont', struct(...\n        'family', 'Arial, sans-serif', ...\n        'size', 18, ...\n        'color', 'lightgrey'), ...\n      'tickfont', struct(...\n        'family', 'Old Standard TT, serif', ...\n        'size', 14, ...\n        'color', 'black')), ...\n    'yaxis', struct(...\n      'title', 'AXIS TITLE', ...\n      'showticklabels', true, ...\n      'tickangle', 45, ...\n      'exponentformat', 'e', ...\n      'showexponent', 'All', ...\n      'titlefont', struct(...\n        'family', 'Arial, sans-serif', ...\n        'size', 18, ...\n        'color', 'lightgrey'), ...\n      'tickfont', struct(...\n        'family', 'Old Standard TT, serif', ...\n        'size', 14, ...\n        'color', 'black')));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-labels', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(\n    title = \"AXIS TITLE\", \n    showticklabels = TRUE, \n    tickangle = 45, \n    exponentformat = \"e\", \n    showexponent = \"All\", \n    titlefont = list(\n      family = \"Arial, sans-serif\", \n      size = 18, \n      color = \"lightgrey\"\n    ), \n    tickfont = list(\n      family = \"Old Standard TT, serif\", \n      size = 14, \n      color = \"black\"\n    )\n  ), \n  yaxis = list(\n    title = \"AXIS TITLE\", \n    showticklabels = TRUE, \n    tickangle = 45, \n    exponentformat = \"e\", \n    showexponent = \"All\", \n    titlefont = list(\n      family = \"Arial, sans-serif\", \n      size = 18, \n      color = \"lightgrey\"\n    ), \n    tickfont = list(\n      family = \"Old Standard TT, serif\", \n      size = 14, \n      color = \"black\"\n    )\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-labels\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        title='AXIS TITLE',\n        showticklabels=True,\n        tickangle=45,\n        exponentformat='e',\n        showexponent='All',\n        titlefont=Font(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        tickfont=Font(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        )\n    ),\n    yaxis=YAxis(\n        title='AXIS TITLE',\n        showticklabels=True,\n        tickangle=45,\n        exponentformat='e',\n        showexponent='All',\n        titlefont=Font(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        tickfont=Font(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        )\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-labels', auto_open=False)"
            }, 
            "axes-reversed": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-reversed/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [1, 2], \n    y: [1, 2], \n    type: \"scatter\"\n  }\n];\nvar layout = {xaxis: {autorange: \"reversed\"}};\n\nvar graph_options = {filename: \"axes-axes-reversed\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-reversed", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[1, 2],\n        y=[1, 2]\n    )\n])\nlayout = Layout(\n    xaxis=XAxis(\n        autorange='reversed'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-reversed')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [1, 2], \n    \"y\" => [1, 2], \n    \"type\" => \"scatter\"\n  ]\n]\nlayout = [\"xaxis\" => [\"autorange\" => \"reversed\"]]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-reversed\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [1, 2], \n    \"y\" =&gt; [1, 2], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\nlayout = [\"xaxis\" =&gt; [\"autorange\" =&gt; \"reversed\"]]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-reversed\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/977", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(1, 2), \n    y = c(1, 2), \n    type = \"scatter\"\n  )\n)\nlayout &lt;- list(xaxis = list(autorange = \"reversed\"))\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-reversed\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [1, 2], ...\n    'y', [1, 2], ...\n    'type', 'scatter')...\n};\nlayout = struct('xaxis', struct('autorange', 'reversed'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-reversed', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-reversed", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [1, 2], \n    y: [1, 2], \n    type: \"scatter\"\n  }\n];\nvar layout = {xaxis: {autorange: \"reversed\"}};\n\nvar graph_options = {filename: \"axes-axes-reversed\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [1, 2], ...\n    'y', [1, 2], ...\n    'type', 'scatter')...\n};\nlayout = struct('xaxis', struct('autorange', 'reversed'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-reversed', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(1, 2), \n    y = c(1, 2), \n    type = \"scatter\"\n  )\n)\nlayout <- list(xaxis = list(autorange = \"reversed\"))\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-reversed\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[1, 2],\n        y=[1, 2]\n    )\n])\nlayout = Layout(\n    xaxis=XAxis(\n        autorange='reversed'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-reversed', auto_open=False)"
            }, 
            "axes-range-manual": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-range-manual/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {range: [2, 5]}, \n  yaxis: {range: [2, 5]}\n};\n\nvar graph_options = {filename: \"axes-axes-range-manual\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-range-manual", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        range=[2, 5]\n    ),\n    yaxis=YAxis(\n        range=[2, 5]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-range-manual')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"range\" => [2, 5]], \n  \"yaxis\" => [\"range\" => [2, 5]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-range-manual\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"range\" =&gt; [2, 5]], \n  \"yaxis\" =&gt; [\"range\" =&gt; [2, 5]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-range-manual\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/978", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(range = c(2, 5)), \n  yaxis = list(range = c(2, 5))\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-manual\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('range', [2, 5]), ...\n    'yaxis', struct('range', [2, 5]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-manual', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-range-manual", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {range: [2, 5]}, \n  yaxis: {range: [2, 5]}\n};\n\nvar graph_options = {filename: \"axes-axes-range-manual\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('range', [2, 5]), ...\n    'yaxis', struct('range', [2, 5]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-manual', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(range = c(2, 5)), \n  yaxis = list(range = c(2, 5))\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-manual\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        range=[2, 5]\n    ),\n    yaxis=YAxis(\n        range=[2, 5]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-range-manual', auto_open=False)"
            }, 
            "axes-range-mode": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-range-mode/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [2, 4, 6], \n    y: [-3, 0, 3], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  xaxis: {\n    autorange: true, \n    rangemode: \"tozero\"\n  }, \n  yaxis: {\n    autorange: true, \n    rangemode: \"nonnegative\"\n  }, \n  showlegend: false\n};\n\nvar graph_options = {filename: \"axes-axes-range-mode\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-range-mode", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[2, 4, 6],\n        y=[-3, 0, 3]\n    )\n])\nlayout = Layout(\n    xaxis=XAxis(\n        autorange=True,\n        rangemode='tozero'\n    ),\n    yaxis=YAxis(\n        autorange=True,\n        rangemode='nonnegative'\n    ),\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-range-mode')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [2, 4, 6], \n    \"y\" => [-3, 0, 3], \n    \"type\" => \"scatter\"\n  ]\n]\nlayout = [\n  \"xaxis\" => [\n    \"autorange\" => true, \n    \"rangemode\" => \"tozero\"\n  ], \n  \"yaxis\" => [\n    \"autorange\" => true, \n    \"rangemode\" => \"nonnegative\"\n  ], \n  \"showlegend\" => false\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-range-mode\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [2, 4, 6], \n    \"y\" =&gt; [-3, 0, 3], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"autorange\" =&gt; true, \n    \"rangemode\" =&gt; \"tozero\"\n  ], \n  \"yaxis\" =&gt; [\n    \"autorange\" =&gt; true, \n    \"rangemode\" =&gt; \"nonnegative\"\n  ], \n  \"showlegend\" =&gt; false\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-range-mode\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/979", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(2, 4, 6), \n    y = c(-3, 0, 3), \n    type = \"scatter\"\n  )\n)\nlayout &lt;- list(\n  xaxis = list(\n    autorange = TRUE, \n    rangemode = \"tozero\"\n  ), \n  yaxis = list(\n    autorange = TRUE, \n    rangemode = \"nonnegative\"\n  ), \n  showlegend = FALSE\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-mode\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [2, 4, 6], ...\n    'y', [-3, 0, 3], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'xaxis', struct(...\n      'autorange', true, ...\n      'rangemode', 'tozero'), ...\n    'yaxis', struct(...\n      'autorange', true, ...\n      'rangemode', 'nonnegative'), ...\n    'showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-mode', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-range-mode", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [2, 4, 6], \n    y: [-3, 0, 3], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  xaxis: {\n    autorange: true, \n    rangemode: \"tozero\"\n  }, \n  yaxis: {\n    autorange: true, \n    rangemode: \"nonnegative\"\n  }, \n  showlegend: false\n};\n\nvar graph_options = {filename: \"axes-axes-range-mode\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [2, 4, 6], ...\n    'y', [-3, 0, 3], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'xaxis', struct(...\n      'autorange', true, ...\n      'rangemode', 'tozero'), ...\n    'yaxis', struct(...\n      'autorange', true, ...\n      'rangemode', 'nonnegative'), ...\n    'showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-mode', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(2, 4, 6), \n    y = c(-3, 0, 3), \n    type = \"scatter\"\n  )\n)\nlayout <- list(\n  xaxis = list(\n    autorange = TRUE, \n    rangemode = \"tozero\"\n  ), \n  yaxis = list(\n    autorange = TRUE, \n    rangemode = \"nonnegative\"\n  ), \n  showlegend = FALSE\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-mode\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[2, 4, 6],\n        y=[-3, 0, 3]\n    )\n])\nlayout = Layout(\n    xaxis=XAxis(\n        autorange=True,\n        rangemode='tozero'\n    ),\n    yaxis=YAxis(\n        autorange=True,\n        rangemode='nonnegative'\n    ),\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-range-mode', auto_open=False)"
            }, 
            "axes-range-type": {
              "files": {
                "model.json": "hard-coded/layout/axes/axes-range-type/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    type: \"log\", \n    autorange: true\n  }, \n  yaxis: {\n    type: \"log\", \n    autorange: true\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-range-type\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "axes-range-type", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='log',\n        autorange=True\n    ),\n    yaxis=YAxis(\n        type='log',\n        autorange=True\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='axes-axes-range-type')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\n    \"type\" => \"log\", \n    \"autorange\" => true\n  ], \n  \"yaxis\" => [\n    \"type\" => \"log\", \n    \"autorange\" => true\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"axes-axes-range-type\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"type\" =&gt; \"log\", \n    \"autorange\" =&gt; true\n  ], \n  \"yaxis\" =&gt; [\n    \"type\" =&gt; \"log\", \n    \"autorange\" =&gt; true\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"axes-axes-range-type\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/980", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(\n    type = \"log\", \n    autorange = TRUE\n  ), \n  yaxis = list(\n    type = \"log\", \n    autorange = TRUE\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-type\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'type', 'log', ...\n      'autorange', true), ...\n    'yaxis', struct(...\n      'type', 'log', ...\n      'autorange', true));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-type', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/axes/axes-range-type", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    type: \"log\", \n    autorange: true\n  }, \n  yaxis: {\n    type: \"log\", \n    autorange: true\n  }\n};\n\nvar graph_options = {filename: \"axes-axes-range-type\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [8, 7, 6, 5, 4, 3, 2, 1, 0], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct(...\n      'type', 'log', ...\n      'autorange', true), ...\n    'yaxis', struct(...\n      'type', 'log', ...\n      'autorange', true));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'axes-axes-range-type', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(8, 7, 6, 5, 4, 3, 2, 1, 0), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(\n    type = \"log\", \n    autorange = TRUE\n  ), \n  yaxis = list(\n    type = \"log\", \n    autorange = TRUE\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"axes-axes-range-type\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='log',\n        autorange=True\n    ),\n    yaxis=YAxis(\n        type='log',\n        autorange=True\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='axes-axes-range-type', auto_open=False)"
            }
          }, 
          "name": "axes", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "axes"
          }
        }, 
        "legends": {
          "path": "hard-coded/layout/legends", 
          "subsections": {
            "legend-visibility": {
              "files": {
                "model.json": "hard-coded/layout/legends/legend-visibility/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"legends-legend-visibility\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "legend-visibility", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='legends-legend-visibility')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"showlegend\" => false]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"legends-legend-visibility\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"showlegend\" =&gt; false]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"legends-legend-visibility\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/981", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(showlegend = FALSE)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-visibility\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-visibility', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/legends/legend-visibility", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"legends-legend-visibility\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-visibility', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(showlegend = FALSE)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-visibility\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='legends-legend-visibility', auto_open=False)"
            }, 
            "legend-style": {
              "files": {
                "model.json": "hard-coded/layout/legends/legend-style/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {legend: {\n    x: 0, \n    y: 1, \n    bgcolor: \"#E2E2E2\", \n    bordercolor: \"#FFFFFF\", \n    borderwidth: 2, \n    font: {\n      family: \"sans-serif\", \n      size: 12, \n      color: \"#000\"\n    }, \n    showlegend: true, \n    traceorder: \"normal\"\n  }};\n\nvar graph_options = {filename: \"legends-legend-style\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "legend-style", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=0,\n        y=1,\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=2,\n        font=Font(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        showlegend=True,\n        traceorder='normal'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='legends-legend-style')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"legend\" => [\n    \"x\" => 0, \n    \"y\" => 1, \n    \"bgcolor\" => \"#E2E2E2\", \n    \"bordercolor\" => \"#FFFFFF\", \n    \"borderwidth\" => 2, \n    \"font\" => [\n      \"family\" => \"sans-serif\", \n      \"size\" => 12, \n      \"color\" => \"#000\"\n    ], \n    \"showlegend\" => true, \n    \"traceorder\" => \"normal\"\n  ]]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"legends-legend-style\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"legend\" =&gt; [\n    \"x\" =&gt; 0, \n    \"y\" =&gt; 1, \n    \"bgcolor\" =&gt; \"#E2E2E2\", \n    \"bordercolor\" =&gt; \"#FFFFFF\", \n    \"borderwidth\" =&gt; 2, \n    \"font\" =&gt; [\n      \"family\" =&gt; \"sans-serif\", \n      \"size\" =&gt; 12, \n      \"color\" =&gt; \"#000\"\n    ], \n    \"showlegend\" =&gt; true, \n    \"traceorder\" =&gt; \"normal\"\n  ]]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"legends-legend-style\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/982", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(legend = list(\n    x = 0, \n    y = 1, \n    bgcolor = \"#E2E2E2\", \n    bordercolor = \"#FFFFFF\", \n    borderwidth = 2, \n    font = list(\n      family = \"sans-serif\", \n      size = 12, \n      color = \"#000\"\n    ), \n    showlegend = TRUE, \n    traceorder = \"normal\"\n  ))\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-style\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('legend', struct(...\n      'x', 0, ...\n      'y', 1, ...\n      'bgcolor', '#E2E2E2', ...\n      'bordercolor', '#FFFFFF', ...\n      'borderwidth', 2, ...\n      'font', struct(...\n        'family', 'sans-serif', ...\n        'size', 12, ...\n        'color', '#000'), ...\n      'showlegend', true, ...\n      'traceorder', 'normal'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-style', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/legends/legend-style", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {legend: {\n    x: 0, \n    y: 1, \n    bgcolor: \"#E2E2E2\", \n    bordercolor: \"#FFFFFF\", \n    borderwidth: 2, \n    font: {\n      family: \"sans-serif\", \n      size: 12, \n      color: \"#000\"\n    }, \n    showlegend: true, \n    traceorder: \"normal\"\n  }};\n\nvar graph_options = {filename: \"legends-legend-style\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('legend', struct(...\n      'x', 0, ...\n      'y', 1, ...\n      'bgcolor', '#E2E2E2', ...\n      'bordercolor', '#FFFFFF', ...\n      'borderwidth', 2, ...\n      'font', struct(...\n        'family', 'sans-serif', ...\n        'size', 12, ...\n        'color', '#000'), ...\n      'showlegend', true, ...\n      'traceorder', 'normal'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-style', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(legend = list(\n    x = 0, \n    y = 1, \n    bgcolor = \"#E2E2E2\", \n    bordercolor = \"#FFFFFF\", \n    borderwidth = 2, \n    font = list(\n      family = \"sans-serif\", \n      size = 12, \n      color = \"#000\"\n    ), \n    showlegend = TRUE, \n    traceorder = \"normal\"\n  ))\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-style\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=0,\n        y=1,\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=2,\n        font=Font(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        showlegend=True,\n        traceorder='normal'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='legends-legend-style', auto_open=False)"
            }, 
            "legend-labels": {
              "files": {
                "model.json": "hard-coded/layout/legends/legend-labels/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  name: \"Orange Trace\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  name: \"Blue Trace\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"legends-legend-labels\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "legend-labels", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4],\n    name='Orange Trace'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4],\n    name='Blue Trace'\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='legends-legend-labels')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"name\" => \"Orange Trace\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"name\" => \"Blue Trace\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"legends-legend-labels\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"name\" =&gt; \"Orange Trace\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"name\" =&gt; \"Blue Trace\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"legends-legend-labels\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/983", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  name = \"Orange Trace\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  name = \"Blue Trace\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"legends-legend-labels\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'name', 'Orange Trace', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'name', 'Blue Trace', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'legends-legend-labels', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/legends/legend-labels", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  name: \"Orange Trace\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  name: \"Blue Trace\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"legends-legend-labels\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'name', 'Orange Trace', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'name', 'Blue Trace', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'legends-legend-labels', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  name = \"Orange Trace\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  name = \"Blue Trace\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"legends-legend-labels\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4],\n    name='Orange Trace'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4],\n    name='Blue Trace'\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='legends-legend-labels', auto_open=False)"
            }, 
            "legend-inside": {
              "files": {
                "model.json": "hard-coded/layout/legends/legend-inside/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  legend: {\n    x: 1, \n    y: 1\n  }, \n  showlegend: true\n};\n\nvar graph_options = {filename: \"legends-legend-inside\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "legend-inside", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=1,\n        y=1\n    ),\n    showlegend=True\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='legends-legend-inside')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"legend\" => [\n    \"x\" => 1, \n    \"y\" => 1\n  ], \n  \"showlegend\" => true\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"legends-legend-inside\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"legend\" =&gt; [\n    \"x\" =&gt; 1, \n    \"y\" =&gt; 1\n  ], \n  \"showlegend\" =&gt; true\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"legends-legend-inside\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/984", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  legend = list(\n    x = 1, \n    y = 1\n  ), \n  showlegend = TRUE\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-inside\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'legend', struct(...\n      'x', 1, ...\n      'y', 1), ...\n    'showlegend', true);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-inside', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/legends/legend-inside", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  legend: {\n    x: 1, \n    y: 1\n  }, \n  showlegend: true\n};\n\nvar graph_options = {filename: \"legends-legend-inside\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'legend', struct(...\n      'x', 1, ...\n      'y', 1), ...\n    'showlegend', true);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-inside', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  legend = list(\n    x = 1, \n    y = 1\n  ), \n  showlegend = TRUE\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-inside\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=1,\n        y=1\n    ),\n    showlegend=True\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='legends-legend-inside', auto_open=False)"
            }, 
            "legend-outside": {
              "files": {
                "model.json": "hard-coded/layout/legends/legend-outside/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  legend: {\n    x: 100, \n    y: 1\n  }, \n  showlegend: true\n};\n\nvar graph_options = {filename: \"legends-legend-outside\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "legend-outside", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=100,\n        y=1\n    ),\n    showlegend=True\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='legends-legend-outside')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"legend\" => [\n    \"x\" => 100, \n    \"y\" => 1\n  ], \n  \"showlegend\" => true\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"legends-legend-outside\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"legend\" =&gt; [\n    \"x\" =&gt; 100, \n    \"y\" =&gt; 1\n  ], \n  \"showlegend\" =&gt; true\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"legends-legend-outside\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/985", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  legend = list(\n    x = 100, \n    y = 1\n  ), \n  showlegend = TRUE\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-outside\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'legend', struct(...\n      'x', 100, ...\n      'y', 1), ...\n    'showlegend', true);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-outside', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/legends/legend-outside", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  legend: {\n    x: 100, \n    y: 1\n  }, \n  showlegend: true\n};\n\nvar graph_options = {filename: \"legends-legend-outside\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 3, 6, 4, 5, 2, 3, 5, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 7, 8, 3, 6, 3, 3, 4], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'legend', struct(...\n      'x', 100, ...\n      'y', 1), ...\n    'showlegend', true);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'legends-legend-outside', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 3, 6, 4, 5, 2, 3, 5, 4), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 7, 8, 3, 6, 3, 3, 4), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  legend = list(\n    x = 100, \n    y = 1\n  ), \n  showlegend = TRUE\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"legends-legend-outside\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 3, 6, 4, 5, 2, 3, 5, 4]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 7, 8, 3, 6, 3, 3, 4]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    legend=Legend(\n        x=100,\n        y=1\n    ),\n    showlegend=True\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='legends-legend-outside', auto_open=False)"
            }
          }, 
          "name": "legends", 
          "config.json": {
            "has_thumbnail": false, 
            "name": "legendz", 
            "relative_url": "dahlegendz"
          }
        }, 
        "labels": {
          "path": "hard-coded/layout/labels", 
          "subsections": {
            "styling-names": {
              "files": {
                "model.json": "hard-coded/layout/labels/styling-names/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  name: \"Name of Trace 1\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [1, 0, 3, 2, 5, 4, 7, 6, 8], \n  name: \"Name of Trace 2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Plot Title\", \n  xaxis: {\n    title: \"x Axis\", \n    titlefont: {\n      family: \"Courier New, monospace\", \n      size: 18, \n      color: \"#7f7f7f\"\n    }\n  }, \n  yaxis: {\n    title: \"y Axis\", \n    titlefont: {\n      family: \"Courier New, monospace\", \n      size: 18, \n      color: \"#7f7f7f\"\n    }\n  }\n};\n\nvar graph_options = {filename: \"labels-styling-names\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "styling-names", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    name='Name of Trace 1'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],\n    name='Name of Trace 2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Plot Title',\n    xaxis=XAxis(\n        title='x Axis',\n        titlefont=Font(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=YAxis(\n        title='y Axis',\n        titlefont=Font(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='labels-styling-names')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"name\" => \"Name of Trace 1\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [1, 0, 3, 2, 5, 4, 7, 6, 8], \n  \"name\" => \"Name of Trace 2\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" => \"Plot Title\", \n  \"xaxis\" => [\n    \"title\" => \"x Axis\", \n    \"titlefont\" => [\n      \"family\" => \"Courier New, monospace\", \n      \"size\" => 18, \n      \"color\" => \"#7f7f7f\"\n    ]\n  ], \n  \"yaxis\" => [\n    \"title\" => \"y Axis\", \n    \"titlefont\" => [\n      \"family\" => \"Courier New, monospace\", \n      \"size\" => 18, \n      \"color\" => \"#7f7f7f\"\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"labels-styling-names\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"name\" =&gt; \"Name of Trace 1\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [1, 0, 3, 2, 5, 4, 7, 6, 8], \n  \"name\" =&gt; \"Name of Trace 2\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" =&gt; \"Plot Title\", \n  \"xaxis\" =&gt; [\n    \"title\" =&gt; \"x Axis\", \n    \"titlefont\" =&gt; [\n      \"family\" =&gt; \"Courier New, monospace\", \n      \"size\" =&gt; 18, \n      \"color\" =&gt; \"#7f7f7f\"\n    ]\n  ], \n  \"yaxis\" =&gt; [\n    \"title\" =&gt; \"y Axis\", \n    \"titlefont\" =&gt; [\n      \"family\" =&gt; \"Courier New, monospace\", \n      \"size\" =&gt; 18, \n      \"color\" =&gt; \"#7f7f7f\"\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"labels-styling-names\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/986", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  name = \"Name of Trace 1\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(1, 0, 3, 2, 5, 4, 7, 6, 8), \n  name = \"Name of Trace 2\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  title = \"Plot Title\", \n  xaxis = list(\n    title = \"x Axis\", \n    titlefont = list(\n      family = \"Courier New, monospace\", \n      size = 18, \n      color = \"#7f7f7f\"\n    )\n  ), \n  yaxis = list(\n    title = \"y Axis\", \n    titlefont = list(\n      family = \"Courier New, monospace\", \n      size = 18, \n      color = \"#7f7f7f\"\n    )\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"labels-styling-names\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'name', 'Name of Trace 1', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [1, 0, 3, 2, 5, 4, 7, 6, 8], ...\n  'name', 'Name of Trace 2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Plot Title', ...\n    'xaxis', struct(...\n      'title', 'x Axis', ...\n      'titlefont', struct(...\n        'family', 'Courier New, monospace', ...\n        'size', 18, ...\n        'color', '#7f7f7f')), ...\n    'yaxis', struct(...\n      'title', 'y Axis', ...\n      'titlefont', struct(...\n        'family', 'Courier New, monospace', ...\n        'size', 18, ...\n        'color', '#7f7f7f')));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'labels-styling-names', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/labels/styling-names", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  name: \"Name of Trace 1\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [1, 0, 3, 2, 5, 4, 7, 6, 8], \n  name: \"Name of Trace 2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Plot Title\", \n  xaxis: {\n    title: \"x Axis\", \n    titlefont: {\n      family: \"Courier New, monospace\", \n      size: 18, \n      color: \"#7f7f7f\"\n    }\n  }, \n  yaxis: {\n    title: \"y Axis\", \n    titlefont: {\n      family: \"Courier New, monospace\", \n      size: 18, \n      color: \"#7f7f7f\"\n    }\n  }\n};\n\nvar graph_options = {filename: \"labels-styling-names\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'name', 'Name of Trace 1', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [1, 0, 3, 2, 5, 4, 7, 6, 8], ...\n  'name', 'Name of Trace 2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Plot Title', ...\n    'xaxis', struct(...\n      'title', 'x Axis', ...\n      'titlefont', struct(...\n        'family', 'Courier New, monospace', ...\n        'size', 18, ...\n        'color', '#7f7f7f')), ...\n    'yaxis', struct(...\n      'title', 'y Axis', ...\n      'titlefont', struct(...\n        'family', 'Courier New, monospace', ...\n        'size', 18, ...\n        'color', '#7f7f7f')));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'labels-styling-names', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  name = \"Name of Trace 1\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(1, 0, 3, 2, 5, 4, 7, 6, 8), \n  name = \"Name of Trace 2\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  title = \"Plot Title\", \n  xaxis = list(\n    title = \"x Axis\", \n    titlefont = list(\n      family = \"Courier New, monospace\", \n      size = 18, \n      color = \"#7f7f7f\"\n    )\n  ), \n  yaxis = list(\n    title = \"y Axis\", \n    titlefont = list(\n      family = \"Courier New, monospace\", \n      size = 18, \n      color = \"#7f7f7f\"\n    )\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"labels-styling-names\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    name='Name of Trace 1'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],\n    name='Name of Trace 2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Plot Title',\n    xaxis=XAxis(\n        title='x Axis',\n        titlefont=Font(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    ),\n    yaxis=YAxis(\n        title='y Axis',\n        titlefont=Font(\n            family='Courier New, monospace',\n            size=18,\n            color='#7f7f7f'\n        )\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='labels-styling-names', auto_open=False)"
            }
          }, 
          "name": "labels", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "labels"
          }
        }, 
        "global-font": {
          "path": "hard-coded/layout/global-font", 
          "subsections": {
            "global-font": {
              "files": {
                "model.json": "hard-coded/layout/global-font/global-font/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  title: \"Global Font\", \n  font: {\n    family: \"Courier New, monospace\", \n    size: 18, \n    color: \"#7f7f7f\"\n  }\n};\n\nvar graph_options = {filename: \"global-font-global-font\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "global-font", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n    )\n])\nlayout = Layout(\n    title='Global Font',\n    font=Font(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='global-font-global-font')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"y\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"type\" => \"scatter\"\n  ]\n]\nlayout = [\n  \"title\" => \"Global Font\", \n  \"font\" => [\n    \"family\" => \"Courier New, monospace\", \n    \"size\" => 18, \n    \"color\" => \"#7f7f7f\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"global-font-global-font\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"y\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\nlayout = [\n  \"title\" =&gt; \"Global Font\", \n  \"font\" =&gt; [\n    \"family\" =&gt; \"Courier New, monospace\", \n    \"size\" =&gt; 18, \n    \"color\" =&gt; \"#7f7f7f\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"global-font-global-font\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/987", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    type = \"scatter\"\n  )\n)\nlayout &lt;- list(\n  title = \"Global Font\", \n  font = list(\n    family = \"Courier New, monospace\", \n    size = 18, \n    color = \"#7f7f7f\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"global-font-global-font\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'title', 'Global Font', ...\n    'font', struct(...\n      'family', 'Courier New, monospace', ...\n      'size', 18, ...\n      'color', '#7f7f7f'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'global-font-global-font', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/global-font/global-font", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n    type: \"scatter\"\n  }\n];\nvar layout = {\n  title: \"Global Font\", \n  font: {\n    family: \"Courier New, monospace\", \n    size: 18, \n    color: \"#7f7f7f\"\n  }\n};\n\nvar graph_options = {filename: \"global-font-global-font\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'y', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n    'type', 'scatter')...\n};\nlayout = struct(...\n    'title', 'Global Font', ...\n    'font', struct(...\n      'family', 'Courier New, monospace', ...\n      'size', 18, ...\n      'color', '#7f7f7f'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'global-font-global-font', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    y = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n    type = \"scatter\"\n  )\n)\nlayout <- list(\n  title = \"Global Font\", \n  font = list(\n    family = \"Courier New, monospace\", \n    size = 18, \n    color = \"#7f7f7f\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"global-font-global-font\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n    )\n])\nlayout = Layout(\n    title='Global Font',\n    font=Font(\n        family='Courier New, monospace',\n        size=18,\n        color='#7f7f7f'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='global-font-global-font', auto_open=False)"
            }
          }, 
          "name": "global-font", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "global-font"
          }
        }, 
        "annotations": {
          "path": "hard-coded/layout/annotations", 
          "subsections": {
            "simple-annotation": {
              "files": {
                "model.json": "hard-coded/layout/annotations/simple-annotation/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"Annotation Text\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-simple-annotation\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "simple-annotation", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='Annotation Text',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='annotations-simple-annotation')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" => false, \n  \"annotations\" => [\n    [\n      \"x\" => 2, \n      \"y\" => 5, \n      \"text\" => \"Annotation Text\", \n      \"xref\" => \"x\", \n      \"yref\" => \"y\", \n      \"showarrow\" => true, \n      \"arrowhead\" => 7, \n      \"ay\" => -40, \n      \"ax\" => 0\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"annotations-simple-annotation\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" =&gt; false, \n  \"annotations\" =&gt; [\n    [\n      \"x\" =&gt; 2, \n      \"y\" =&gt; 5, \n      \"text\" =&gt; \"Annotation Text\", \n      \"xref\" =&gt; \"x\", \n      \"yref\" =&gt; \"y\", \n      \"showarrow\" =&gt; true, \n      \"arrowhead\" =&gt; 7, \n      \"ay\" =&gt; -40, \n      \"ax\" =&gt; 0\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"annotations-simple-annotation\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/988", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"Annotation Text\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    )\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-simple-annotation\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'Annotation Text', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-simple-annotation', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/annotations/simple-annotation", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"Annotation Text\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-simple-annotation\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'Annotation Text', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-simple-annotation', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"Annotation Text\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    )\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-simple-annotation\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='Annotation Text',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='annotations-simple-annotation', auto_open=False)"
            }, 
            "multiple-annotation": {
              "files": {
                "model.json": "hard-coded/layout/annotations/multiple-annotation/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"Annotation Text\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }, \n    {\n      x: 4, \n      y: 4, \n      text: \"Annotation Text 2\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-multiple-annotation\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "multiple-annotation", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='Annotation Text',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        ),\n        Annotation(\n            x=4,\n            y=4,\n            text='Annotation Text 2',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='annotations-multiple-annotation')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" => false, \n  \"annotations\" => [\n    [\n      \"x\" => 2, \n      \"y\" => 5, \n      \"text\" => \"Annotation Text\", \n      \"xref\" => \"x\", \n      \"yref\" => \"y\", \n      \"showarrow\" => true, \n      \"arrowhead\" => 7, \n      \"ay\" => -40, \n      \"ax\" => 0\n    ], \n    [\n      \"x\" => 4, \n      \"y\" => 4, \n      \"text\" => \"Annotation Text 2\", \n      \"xref\" => \"x\", \n      \"yref\" => \"y\", \n      \"showarrow\" => true, \n      \"arrowhead\" => 7, \n      \"ay\" => -40, \n      \"ax\" => 0\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"annotations-multiple-annotation\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" =&gt; false, \n  \"annotations\" =&gt; [\n    [\n      \"x\" =&gt; 2, \n      \"y\" =&gt; 5, \n      \"text\" =&gt; \"Annotation Text\", \n      \"xref\" =&gt; \"x\", \n      \"yref\" =&gt; \"y\", \n      \"showarrow\" =&gt; true, \n      \"arrowhead\" =&gt; 7, \n      \"ay\" =&gt; -40, \n      \"ax\" =&gt; 0\n    ], \n    [\n      \"x\" =&gt; 4, \n      \"y\" =&gt; 4, \n      \"text\" =&gt; \"Annotation Text 2\", \n      \"xref\" =&gt; \"x\", \n      \"yref\" =&gt; \"y\", \n      \"showarrow\" =&gt; true, \n      \"arrowhead\" =&gt; 7, \n      \"ay\" =&gt; -40, \n      \"ax\" =&gt; 0\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"annotations-multiple-annotation\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/989", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"Annotation Text\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    ), \n    list(\n      x = 4, \n      y = 4, \n      text = \"Annotation Text 2\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    )\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-multiple-annotation\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'Annotation Text', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0), ...\n      struct(...\n        'x', 4, ...\n        'y', 4, ...\n        'text', 'Annotation Text 2', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-multiple-annotation', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/annotations/multiple-annotation", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"Annotation Text\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }, \n    {\n      x: 4, \n      y: 4, \n      text: \"Annotation Text 2\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowhead: 7, \n      ay: -40, \n      ax: 0\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-multiple-annotation\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'Annotation Text', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0), ...\n      struct(...\n        'x', 4, ...\n        'y', 4, ...\n        'text', 'Annotation Text 2', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowhead', 7, ...\n        'ay', -40, ...\n        'ax', 0)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-multiple-annotation', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"Annotation Text\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    ), \n    list(\n      x = 4, \n      y = 4, \n      text = \"Annotation Text 2\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowhead = 7, \n      ay = -40, \n      ax = 0\n    )\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-multiple-annotation\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='Annotation Text',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        ),\n        Annotation(\n            x=4,\n            y=4,\n            text='Annotation Text 2',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowhead=7,\n            ay=-40,\n            ax=0\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='annotations-multiple-annotation', auto_open=False)"
            }, 
            "style-annotation": {
              "files": {
                "model.json": "hard-coded/layout/annotations/style-annotation/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"max=5\", \n      bordercolor: \"#c7c7c7\", \n      borderwidth: 2, \n      borderpad: 4, \n      bgcolor: \"#ff7f0e\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowwidth: 2, \n      arrowcolor: \"#636363\", \n      arrowhead: 2, \n      arrowsize: 1, \n      font: {\n        family: \"Courier New, monospace\", \n        size: 16, \n        color: \"#ffffff\"\n      }, \n      opacity: 0.8, \n      align: \"center\", \n      ay: -30, \n      ax: 20\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-style-annotation\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "style-annotation", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='max=5',\n            bordercolor='#c7c7c7',\n            borderwidth=2,\n            borderpad=4,\n            bgcolor='#ff7f0e',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowwidth=2,\n            arrowcolor='#636363',\n            arrowhead=2,\n            arrowsize=1,\n            font=Font(\n                family='Courier New, monospace',\n                size=16,\n                color='#ffffff'\n            ),\n            opacity=0.8,\n            align='center',\n            ay=-30,\n            ax=20\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='annotations-style-annotation')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" => [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" => false, \n  \"annotations\" => [\n    [\n      \"x\" => 2, \n      \"y\" => 5, \n      \"text\" => \"max=5\", \n      \"bordercolor\" => \"#c7c7c7\", \n      \"borderwidth\" => 2, \n      \"borderpad\" => 4, \n      \"bgcolor\" => \"#ff7f0e\", \n      \"xref\" => \"x\", \n      \"yref\" => \"y\", \n      \"showarrow\" => true, \n      \"arrowwidth\" => 2, \n      \"arrowcolor\" => \"#636363\", \n      \"arrowhead\" => 2, \n      \"arrowsize\" => 1, \n      \"font\" => [\n        \"family\" => \"Courier New, monospace\", \n        \"size\" => 16, \n        \"color\" => \"#ffffff\"\n      ], \n      \"opacity\" => 0.8, \n      \"align\" => \"center\", \n      \"ay\" => -30, \n      \"ax\" => 20\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"annotations-style-annotation\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  \"y\" =&gt; [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"showlegend\" =&gt; false, \n  \"annotations\" =&gt; [\n    [\n      \"x\" =&gt; 2, \n      \"y\" =&gt; 5, \n      \"text\" =&gt; \"max=5\", \n      \"bordercolor\" =&gt; \"#c7c7c7\", \n      \"borderwidth\" =&gt; 2, \n      \"borderpad\" =&gt; 4, \n      \"bgcolor\" =&gt; \"#ff7f0e\", \n      \"xref\" =&gt; \"x\", \n      \"yref\" =&gt; \"y\", \n      \"showarrow\" =&gt; true, \n      \"arrowwidth\" =&gt; 2, \n      \"arrowcolor\" =&gt; \"#636363\", \n      \"arrowhead\" =&gt; 2, \n      \"arrowsize\" =&gt; 1, \n      \"font\" =&gt; [\n        \"family\" =&gt; \"Courier New, monospace\", \n        \"size\" =&gt; 16, \n        \"color\" =&gt; \"#ffffff\"\n      ], \n      \"opacity\" =&gt; 0.8, \n      \"align\" =&gt; \"center\", \n      \"ay\" =&gt; -30, \n      \"ax\" =&gt; 20\n    ]\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"annotations-style-annotation\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/990", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"max=5\", \n      bordercolor = \"#c7c7c7\", \n      borderwidth = 2, \n      borderpad = 4, \n      bgcolor = \"#ff7f0e\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowwidth = 2, \n      arrowcolor = \"#636363\", \n      arrowhead = 2, \n      arrowsize = 1, \n      font = list(\n        family = \"Courier New, monospace\", \n        size = 16, \n        color = \"#ffffff\"\n      ), \n      opacity = 0.8, \n      align = \"center\", \n      ay = -30, \n      ax = 20\n    )\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-style-annotation\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'max=5', ...\n        'bordercolor', '#c7c7c7', ...\n        'borderwidth', 2, ...\n        'borderpad', 4, ...\n        'bgcolor', '#ff7f0e', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowwidth', 2, ...\n        'arrowcolor', '#636363', ...\n        'arrowhead', 2, ...\n        'arrowsize', 1, ...\n        'font', struct(...\n          'family', 'Courier New, monospace', ...\n          'size', 16, ...\n          'color', '#ffffff'), ...\n        'opacity', 0.8, ...\n        'align', 'center', ...\n        'ay', -30, ...\n        'ax', 20)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-style-annotation', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/layout/annotations/style-annotation", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8], \n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false, \n  annotations: [\n    {\n      x: 2, \n      y: 5, \n      text: \"max=5\", \n      bordercolor: \"#c7c7c7\", \n      borderwidth: 2, \n      borderpad: 4, \n      bgcolor: \"#ff7f0e\", \n      xref: \"x\", \n      yref: \"y\", \n      showarrow: true, \n      arrowwidth: 2, \n      arrowcolor: \"#636363\", \n      arrowhead: 2, \n      arrowsize: 1, \n      font: {\n        family: \"Courier New, monospace\", \n        size: 16, \n        color: \"#ffffff\"\n      }, \n      opacity: 0.8, \n      align: \"center\", \n      ay: -30, \n      ax: 20\n    }\n  ]\n};\n\nvar graph_options = {filename: \"annotations-style-annotation\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 1, 3, 2, 4, 3, 4, 6, 5], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5, 6, 7, 8], ...\n  'y', [0, 4, 5, 1, 2, 2, 3, 4, 2], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'showlegend', false, ...\n    'annotations', { {...\n      struct(...\n        'x', 2, ...\n        'y', 5, ...\n        'text', 'max=5', ...\n        'bordercolor', '#c7c7c7', ...\n        'borderwidth', 2, ...\n        'borderpad', 4, ...\n        'bgcolor', '#ff7f0e', ...\n        'xref', 'x', ...\n        'yref', 'y', ...\n        'showarrow', true, ...\n        'arrowwidth', 2, ...\n        'arrowcolor', '#636363', ...\n        'arrowhead', 2, ...\n        'arrowsize', 1, ...\n        'font', struct(...\n          'family', 'Courier New, monospace', ...\n          'size', 16, ...\n          'color', '#ffffff'), ...\n        'opacity', 0.8, ...\n        'align', 'center', ...\n        'ay', -30, ...\n        'ax', 20)...\n    } });\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'annotations-style-annotation', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 1, 3, 2, 4, 3, 4, 6, 5), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5, 6, 7, 8), \n  y = c(0, 4, 5, 1, 2, 2, 3, 4, 2), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  showlegend = FALSE, \n  annotations = list(\n    list(\n      x = 2, \n      y = 5, \n      text = \"max=5\", \n      bordercolor = \"#c7c7c7\", \n      borderwidth = 2, \n      borderpad = 4, \n      bgcolor = \"#ff7f0e\", \n      xref = \"x\", \n      yref = \"y\", \n      showarrow = TRUE, \n      arrowwidth = 2, \n      arrowcolor = \"#636363\", \n      arrowhead = 2, \n      arrowsize = 1, \n      font = list(\n        family = \"Courier New, monospace\", \n        size = 16, \n        color = \"#ffffff\"\n      ), \n      opacity = 0.8, \n      align = \"center\", \n      ay = -30, \n      ax = 20\n    )\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"annotations-style-annotation\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False,\n    annotations=Annotations([\n        Annotation(\n            x=2,\n            y=5,\n            text='max=5',\n            bordercolor='#c7c7c7',\n            borderwidth=2,\n            borderpad=4,\n            bgcolor='#ff7f0e',\n            xref='x',\n            yref='y',\n            showarrow=True,\n            arrowwidth=2,\n            arrowcolor='#636363',\n            arrowhead=2,\n            arrowsize=1,\n            font=Font(\n                family='Courier New, monospace',\n                size=16,\n                color='#ffffff'\n            ),\n            opacity=0.8,\n            align='center',\n            ay=-30,\n            ax=20\n        )\n    ])\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='annotations-style-annotation', auto_open=False)"
            }
          }, 
          "name": "annotations", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "annotations"
          }
        }
      }, 
      "name": "layout", 
      "config.json": {
        "has_thumbnail": false, 
        "name": "layoutz"
      }
    }, 
    "multiple-axes-insets-subplots": {
      "path": "hard-coded/multiple-axes-insets-subplots", 
      "subsections": {
        "multiple-axes": {
          "path": "hard-coded/multiple-axes-insets-subplots/multiple-axes", 
          "subsections": {
            "multiple-axes-double": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/multiple-axes/multiple-axes-double/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [40, 50, 60], \n  name: \"yaxis data\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [4, 5, 6], \n  name: \"yaxis2 data\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Double Y Axis Example\", \n  yaxis: {title: \"yaxis title\"}, \n  yaxis2: {\n    title: \"yaxis2 title\", \n    titlefont: {color: \"rgb(148, 103, 189)\"}, \n    tickfont: {color: \"rgb(148, 103, 189)\"}, \n    side: \"right\", \n    overlaying: \"y\"\n  }\n};\n\nvar graph_options = {filename: \"multiple-axes-multiple-axes-double\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "multiple-axes-double", 
              "image.png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAgAElEQVR4XuydD3zP1f7H3x//ZmUzVKRpiKXCRMmsXSHdSF3k367qcouhP0wp+nNvt7qZ9GPcuExl1RV366ISlWsuC1ORySSKaRTVbKbaZuP8Pu+Pvuu7f9+/n/+f13k8PLCdzznn8zrnc56f1znnc44k5EAIUAAKQAEoAAWggKUVkAB0S9cfCg8FoAAUgAJQQFEAQEdDgAJQAApAAShgAwUAdBtUIm4BCkABKAAFoACAjjYABaAAFIACUMAGCgDoNqhE3AIUgAJQAApAAQAdbQAKQAEoAAWggA0UANBtUIm4BSgABaAAFIACADraABSAAlAACkABGygAoNugEnELUAAKQAEoAAUAdLQBKAAFoAAUgAI2UABAt0El4hagABSAAlAACgDoaANQAApAASgABWygAIBug0q0yy1s2bKFnn322crbqVevHoWHh1N0dDQNHDiQbrzxRk1v9eWXX6atW7fSsmXLPObjazxPiTz22GN06tQp+uc//0mSJFWJunPnTpoxYwbNnTuXunTp4rEsa9eupfnz59OSJUuoffv2AemzcuVKysrKooULFwZ0ffV6c09k0qRJNGzYsIDSNfIiNerYyPIjb2cqAKA7s95NedcuMMybN48uvPBCKi8vp++//562b99O//3vf+mmm24iBiGDXovgayfuazxPZfz6669p4sSJ9Pjjj1Pfvn0ro/LhhwzBli1b0t/+9jevt8lxv/vuO+rXrx899NBDXuPXFoFhvnv3bnrwwQcDut5Vby+88IJSb+7hkksuoYiIiIDSNfIiNerYyPIjb2cqAKA7s95NedcuMLz11lvUtGnTKmX85JNP6Mknn6R77rmHxowZo0n5uRPnl4dXXnnFY/pqdfbJycm0b98+evXVV6lBgwZKnhs3biQGI+fRpk0bj+U4cOAAPfDAA8ofToOdduPGjTXRxlOinupN98KolKFadaxScZAMFPBJAQDdJ5kQSQ8FvIGBnfvmzZspIyODGjZsqBSJoZaWlka5ubmKo2/Xrh0lJCRUGZ6fNWsW/fjjj/R///d/VW7j3XffVYa8161bp/ycO/Fdu3Ypw/v8u2+//ZYuuOAC6tOnD913330UEhJSGa/60DyXg69nQNevX5+uv/56xWm3aNGiTulOnDhB48aN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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis data'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[4, 5, 6],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Double Y Axis Example',\n    yaxis=YAxis(\n        title='yaxis title'\n    ),\n    yaxis2=YAxis(\n        title='yaxis2 title',\n        titlefont=Font(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=Font(\n            color='rgb(148, 103, 189)'\n        ),\n        side='right',\n        overlaying='y'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='multiple-axes-multiple-axes-double')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [40, 50, 60], \n  \"name\" => \"yaxis data\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [2, 3, 4], \n  \"y\" => [4, 5, 6], \n  \"name\" => \"yaxis2 data\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" => \"Double Y Axis Example\", \n  \"yaxis\" => [\"title\" => \"yaxis title\"], \n  \"yaxis2\" => [\n    \"title\" => \"yaxis2 title\", \n    \"titlefont\" => [\"color\" => \"rgb(148, 103, 189)\"], \n    \"tickfont\" => [\"color\" => \"rgb(148, 103, 189)\"], \n    \"side\" => \"right\", \n    \"overlaying\" => \"y\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"multiple-axes-multiple-axes-double\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [40, 50, 60], \n  \"name\" =&gt; \"yaxis data\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [2, 3, 4], \n  \"y\" =&gt; [4, 5, 6], \n  \"name\" =&gt; \"yaxis2 data\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" =&gt; \"Double Y Axis Example\", \n  \"yaxis\" =&gt; [\"title\" =&gt; \"yaxis title\"], \n  \"yaxis2\" =&gt; [\n    \"title\" =&gt; \"yaxis2 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"rgb(148, 103, 189)\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"rgb(148, 103, 189)\"], \n    \"side\" =&gt; \"right\", \n    \"overlaying\" =&gt; \"y\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"multiple-axes-multiple-axes-double\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/991", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(40, 50, 60), \n  name = \"yaxis data\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(2, 3, 4), \n  y = c(4, 5, 6), \n  name = \"yaxis2 data\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  title = \"Double Y Axis Example\", \n  yaxis = list(title = \"yaxis title\"), \n  yaxis2 = list(\n    title = \"yaxis2 title\", \n    titlefont = list(color = \"rgb(148, 103, 189)\"), \n    tickfont = list(color = \"rgb(148, 103, 189)\"), \n    side = \"right\", \n    overlaying = \"y\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"multiple-axes-multiple-axes-double\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [40, 50, 60], ...\n  'name', 'yaxis data', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [4, 5, 6], ...\n  'name', 'yaxis2 data', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Double Y Axis Example', ...\n    'yaxis', struct('title', 'yaxis title'), ...\n    'yaxis2', struct(...\n      'title', 'yaxis2 title', ...\n      'titlefont', struct('color', 'rgb(148, 103, 189)'), ...\n      'tickfont', struct('color', 'rgb(148, 103, 189)'), ...\n      'side', 'right', ...\n      'overlaying', 'y'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'multiple-axes-multiple-axes-double', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/multiple-axes/multiple-axes-double", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [40, 50, 60], \n  name: \"yaxis data\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [4, 5, 6], \n  name: \"yaxis2 data\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Double Y Axis Example\", \n  yaxis: {title: \"yaxis title\"}, \n  yaxis2: {\n    title: \"yaxis2 title\", \n    titlefont: {color: \"rgb(148, 103, 189)\"}, \n    tickfont: {color: \"rgb(148, 103, 189)\"}, \n    side: \"right\", \n    overlaying: \"y\"\n  }\n};\n\nvar graph_options = {filename: \"multiple-axes-multiple-axes-double\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [40, 50, 60], ...\n  'name', 'yaxis data', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [4, 5, 6], ...\n  'name', 'yaxis2 data', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Double Y Axis Example', ...\n    'yaxis', struct('title', 'yaxis title'), ...\n    'yaxis2', struct(...\n      'title', 'yaxis2 title', ...\n      'titlefont', struct('color', 'rgb(148, 103, 189)'), ...\n      'tickfont', struct('color', 'rgb(148, 103, 189)'), ...\n      'side', 'right', ...\n      'overlaying', 'y'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'multiple-axes-multiple-axes-double', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(40, 50, 60), \n  name = \"yaxis data\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(2, 3, 4), \n  y = c(4, 5, 6), \n  name = \"yaxis2 data\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  title = \"Double Y Axis Example\", \n  yaxis = list(title = \"yaxis title\"), \n  yaxis2 = list(\n    title = \"yaxis2 title\", \n    titlefont = list(color = \"rgb(148, 103, 189)\"), \n    tickfont = list(color = \"rgb(148, 103, 189)\"), \n    side = \"right\", \n    overlaying = \"y\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"multiple-axes-multiple-axes-double\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis data'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[4, 5, 6],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Double Y Axis Example',\n    yaxis=YAxis(\n        title='yaxis title'\n    ),\n    yaxis2=YAxis(\n        title='yaxis2 title',\n        titlefont=Font(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=Font(\n            color='rgb(148, 103, 189)'\n        ),\n        side='right',\n        overlaying='y'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='multiple-axes-multiple-axes-double', auto_open=False)"
            }, 
            "multiple-axes-multiple": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/multiple-axes/multiple-axes-multiple/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  name: \"yaxis1 data\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [40, 50, 60], \n  name: \"yaxis2 data\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [400, 500, 600], \n  name: \"yaxis3 data\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4, 5, 6], \n  y: [40000, 50000, 60000], \n  name: \"yaxis4 data\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar trace5 = {\n  x: [5, 6, 7], \n  y: [400000, 500000, 600000], \n  name: \"yaxis5 data\", \n  yaxis: \"y5\", \n  type: \"scatter\"\n};\nvar trace6 = {\n  x: [6, 7, 8], \n  y: [4000000, 5000000, 6000000], \n  name: \"yaxis6 data\", \n  yaxis: \"y6\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\nvar layout = {\n  title: \"multiple y-axes example\", \n  xaxis: {domain: [0.3, 0.7]}, \n  yaxis: {\n    title: \"yaxis title\", \n    titlefont: {color: \"#1f77b4\"}, \n    tickfont: {color: \"#1f77b4\"}\n  }, \n  width: 800, \n  yaxis2: {\n    title: \"yaxis2 title\", \n    titlefont: {color: \"#ff7f0e\"}, \n    tickfont: {color: \"#ff7f0e\"}, \n    position: 0.15, \n    anchor: \"free\", \n    side: \"left\", \n    overlaying: \"y\"\n  }, \n  yaxis3: {\n    title: \"yaxis3 title\", \n    titlefont: {color: \"#2ca02c\"}, \n    tickfont: {color: \"#2ca02c\"}, \n    position: 0, \n    anchor: \"free\", \n    side: \"left\", \n    overlaying: \"y\"\n  }, \n  yaxis4: {\n    title: \"yaxis4 title\", \n    titlefont: {color: \"#d62728\"}, \n    tickfont: {color: \"#d62728\"}, \n    anchor: \"x\", \n    side: \"right\", \n    overlaying: \"y\"\n  }, \n  yaxis5: {\n    title: \"yaxis5 title\", \n    titlefont: {color: \"#9467bd\"}, \n    tickfont: {color: \"#9467bd\"}, \n    position: 0.85, \n    anchor: \"free\", \n    side: \"right\", \n    overlaying: \"y\"\n  }, \n  yaxis6: {\n    title: \"yaxis6 title\", \n    titlefont: {color: \"#8c564b\"}, \n    tickfont: {color: \"#8c564b\"}, \n    position: 1.0, \n    anchor: \"free\", \n    side: \"right\", \n    overlaying: \"y\"\n  }\n};\n\nvar graph_options = {filename: \"multiple-axes-multiple-axes-multiple\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "multiple-axes-multiple", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6],\n    name='yaxis1 data'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[40, 50, 60],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[400, 500, 600],\n    name='yaxis3 data',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4, 5, 6],\n    y=[40000, 50000, 60000],\n    name='yaxis4 data',\n    yaxis='y4'\n)\ntrace5 = Scatter(\n    x=[5, 6, 7],\n    y=[400000, 500000, 600000],\n    name='yaxis5 data',\n    yaxis='y5'\n)\ntrace6 = Scatter(\n    x=[6, 7, 8],\n    y=[4000000, 5000000, 6000000],\n    name='yaxis6 data',\n    yaxis='y6'\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5, trace6])\nlayout = Layout(\n    title='multiple y-axes example',\n    xaxis=XAxis(\n        domain=[0.3, 0.7]\n    ),\n    yaxis=YAxis(\n        title='yaxis title',\n        titlefont=Font(\n            color='#1f77b4'\n        ),\n        tickfont=Font(\n            color='#1f77b4'\n        )\n    ),\n    width=800,\n    yaxis2=YAxis(\n        title='yaxis2 title',\n        titlefont=Font(\n            color='#ff7f0e'\n        ),\n        tickfont=Font(\n            color='#ff7f0e'\n        ),\n        position=0.15,\n        anchor='free',\n        side='left',\n        overlaying='y'\n    ),\n    yaxis3=YAxis(\n        title='yaxis3 title',\n        titlefont=Font(\n            color='#2ca02c'\n        ),\n        tickfont=Font(\n            color='#2ca02c'\n        ),\n        position=0,\n        anchor='free',\n        side='left',\n        overlaying='y'\n    ),\n    yaxis4=YAxis(\n        title='yaxis4 title',\n        titlefont=Font(\n            color='#d62728'\n        ),\n        tickfont=Font(\n            color='#d62728'\n        ),\n        anchor='x',\n        side='right',\n        overlaying='y'\n    ),\n    yaxis5=YAxis(\n        title='yaxis5 title',\n        titlefont=Font(\n            color='#9467bd'\n        ),\n        tickfont=Font(\n            color='#9467bd'\n        ),\n        position=0.85,\n        anchor='free',\n        side='right',\n        overlaying='y'\n    ),\n    yaxis6=YAxis(\n        title='yaxis6 title',\n        titlefont=Font(\n            color='#8c564b'\n        ),\n        tickfont=Font(\n            color='#8c564b'\n        ),\n        position=1.0,\n        anchor='free',\n        side='right',\n        overlaying='y'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='multiple-axes-multiple-axes-multiple')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [4, 5, 6], \n  \"name\" => \"yaxis1 data\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [2, 3, 4], \n  \"y\" => [40, 50, 60], \n  \"name\" => \"yaxis2 data\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [3, 4, 5], \n  \"y\" => [400, 500, 600], \n  \"name\" => \"yaxis3 data\", \n  \"yaxis\" => \"y3\", \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"x\" => [4, 5, 6], \n  \"y\" => [40000, 50000, 60000], \n  \"name\" => \"yaxis4 data\", \n  \"yaxis\" => \"y4\", \n  \"type\" => \"scatter\"\n]\ntrace5 = [\n  \"x\" => [5, 6, 7], \n  \"y\" => [400000, 500000, 600000], \n  \"name\" => \"yaxis5 data\", \n  \"yaxis\" => \"y5\", \n  \"type\" => \"scatter\"\n]\ntrace6 = [\n  \"x\" => [6, 7, 8], \n  \"y\" => [4000000, 5000000, 6000000], \n  \"name\" => \"yaxis6 data\", \n  \"yaxis\" => \"y6\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = [\n  \"title\" => \"multiple y-axes example\", \n  \"xaxis\" => [\"domain\" => [0.3, 0.7]], \n  \"yaxis\" => [\n    \"title\" => \"yaxis title\", \n    \"titlefont\" => [\"color\" => \"#1f77b4\"], \n    \"tickfont\" => [\"color\" => \"#1f77b4\"]\n  ], \n  \"width\" => 800, \n  \"yaxis2\" => [\n    \"title\" => \"yaxis2 title\", \n    \"titlefont\" => [\"color\" => \"#ff7f0e\"], \n    \"tickfont\" => [\"color\" => \"#ff7f0e\"], \n    \"position\" => 0.15, \n    \"anchor\" => \"free\", \n    \"side\" => \"left\", \n    \"overlaying\" => \"y\"\n  ], \n  \"yaxis3\" => [\n    \"title\" => \"yaxis3 title\", \n    \"titlefont\" => [\"color\" => \"#2ca02c\"], \n    \"tickfont\" => [\"color\" => \"#2ca02c\"], \n    \"position\" => 0, \n    \"anchor\" => \"free\", \n    \"side\" => \"left\", \n    \"overlaying\" => \"y\"\n  ], \n  \"yaxis4\" => [\n    \"title\" => \"yaxis4 title\", \n    \"titlefont\" => [\"color\" => \"#d62728\"], \n    \"tickfont\" => [\"color\" => \"#d62728\"], \n    \"anchor\" => \"x\", \n    \"side\" => \"right\", \n    \"overlaying\" => \"y\"\n  ], \n  \"yaxis5\" => [\n    \"title\" => \"yaxis5 title\", \n    \"titlefont\" => [\"color\" => \"#9467bd\"], \n    \"tickfont\" => [\"color\" => \"#9467bd\"], \n    \"position\" => 0.85, \n    \"anchor\" => \"free\", \n    \"side\" => \"right\", \n    \"overlaying\" => \"y\"\n  ], \n  \"yaxis6\" => [\n    \"title\" => \"yaxis6 title\", \n    \"titlefont\" => [\"color\" => \"#8c564b\"], \n    \"tickfont\" => [\"color\" => \"#8c564b\"], \n    \"position\" => 1.0, \n    \"anchor\" => \"free\", \n    \"side\" => \"right\", \n    \"overlaying\" => \"y\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"multiple-axes-multiple-axes-multiple\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [4, 5, 6], \n  \"name\" =&gt; \"yaxis1 data\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [2, 3, 4], \n  \"y\" =&gt; [40, 50, 60], \n  \"name\" =&gt; \"yaxis2 data\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [3, 4, 5], \n  \"y\" =&gt; [400, 500, 600], \n  \"name\" =&gt; \"yaxis3 data\", \n  \"yaxis\" =&gt; \"y3\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"x\" =&gt; [4, 5, 6], \n  \"y\" =&gt; [40000, 50000, 60000], \n  \"name\" =&gt; \"yaxis4 data\", \n  \"yaxis\" =&gt; \"y4\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace5 = [\n  \"x\" =&gt; [5, 6, 7], \n  \"y\" =&gt; [400000, 500000, 600000], \n  \"name\" =&gt; \"yaxis5 data\", \n  \"yaxis\" =&gt; \"y5\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace6 = [\n  \"x\" =&gt; [6, 7, 8], \n  \"y\" =&gt; [4000000, 5000000, 6000000], \n  \"name\" =&gt; \"yaxis6 data\", \n  \"yaxis\" =&gt; \"y6\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = [\n  \"title\" =&gt; \"multiple y-axes example\", \n  \"xaxis\" =&gt; [\"domain\" =&gt; [0.3, 0.7]], \n  \"yaxis\" =&gt; [\n    \"title\" =&gt; \"yaxis title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#1f77b4\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#1f77b4\"]\n  ], \n  \"width\" =&gt; 800, \n  \"yaxis2\" =&gt; [\n    \"title\" =&gt; \"yaxis2 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#ff7f0e\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#ff7f0e\"], \n    \"position\" =&gt; 0.15, \n    \"anchor\" =&gt; \"free\", \n    \"side\" =&gt; \"left\", \n    \"overlaying\" =&gt; \"y\"\n  ], \n  \"yaxis3\" =&gt; [\n    \"title\" =&gt; \"yaxis3 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#2ca02c\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#2ca02c\"], \n    \"position\" =&gt; 0, \n    \"anchor\" =&gt; \"free\", \n    \"side\" =&gt; \"left\", \n    \"overlaying\" =&gt; \"y\"\n  ], \n  \"yaxis4\" =&gt; [\n    \"title\" =&gt; \"yaxis4 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#d62728\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#d62728\"], \n    \"anchor\" =&gt; \"x\", \n    \"side\" =&gt; \"right\", \n    \"overlaying\" =&gt; \"y\"\n  ], \n  \"yaxis5\" =&gt; [\n    \"title\" =&gt; \"yaxis5 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#9467bd\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#9467bd\"], \n    \"position\" =&gt; 0.85, \n    \"anchor\" =&gt; \"free\", \n    \"side\" =&gt; \"right\", \n    \"overlaying\" =&gt; \"y\"\n  ], \n  \"yaxis6\" =&gt; [\n    \"title\" =&gt; \"yaxis6 title\", \n    \"titlefont\" =&gt; [\"color\" =&gt; \"#8c564b\"], \n    \"tickfont\" =&gt; [\"color\" =&gt; \"#8c564b\"], \n    \"position\" =&gt; 1.0, \n    \"anchor\" =&gt; \"free\", \n    \"side\" =&gt; \"right\", \n    \"overlaying\" =&gt; \"y\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"multiple-axes-multiple-axes-multiple\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/992", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  name = \"yaxis1 data\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(2, 3, 4), \n  y = c(40, 50, 60), \n  name = \"yaxis2 data\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(3, 4, 5), \n  y = c(400, 500, 600), \n  name = \"yaxis3 data\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  x = c(4, 5, 6), \n  y = c(40000, 50000, 60000), \n  name = \"yaxis4 data\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ntrace5 &lt;- list(\n  x = c(5, 6, 7), \n  y = c(400000, 500000, 600000), \n  name = \"yaxis5 data\", \n  yaxis = \"y5\", \n  type = \"scatter\"\n)\ntrace6 &lt;- list(\n  x = c(6, 7, 8), \n  y = c(4000000, 5000000, 6000000), \n  name = \"yaxis6 data\", \n  yaxis = \"y6\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4, trace5, trace6)\nlayout &lt;- list(\n  title = \"multiple y-axes example\", \n  xaxis = list(domain = c(0.3, 0.7)), \n  yaxis = list(\n    title = \"yaxis title\", \n    titlefont = list(color = \"#1f77b4\"), \n    tickfont = list(color = \"#1f77b4\")\n  ), \n  width = 800, \n  yaxis2 = list(\n    title = \"yaxis2 title\", \n    titlefont = list(color = \"#ff7f0e\"), \n    tickfont = list(color = \"#ff7f0e\"), \n    position = 0.15, \n    anchor = \"free\", \n    side = \"left\", \n    overlaying = \"y\"\n  ), \n  yaxis3 = list(\n    title = \"yaxis3 title\", \n    titlefont = list(color = \"#2ca02c\"), \n    tickfont = list(color = \"#2ca02c\"), \n    position = 0, \n    anchor = \"free\", \n    side = \"left\", \n    overlaying = \"y\"\n  ), \n  yaxis4 = list(\n    title = \"yaxis4 title\", \n    titlefont = list(color = \"#d62728\"), \n    tickfont = list(color = \"#d62728\"), \n    anchor = \"x\", \n    side = \"right\", \n    overlaying = \"y\"\n  ), \n  yaxis5 = list(\n    title = \"yaxis5 title\", \n    titlefont = list(color = \"#9467bd\"), \n    tickfont = list(color = \"#9467bd\"), \n    position = 0.85, \n    anchor = \"free\", \n    side = \"right\", \n    overlaying = \"y\"\n  ), \n  yaxis6 = list(\n    title = \"yaxis6 title\", \n    titlefont = list(color = \"#8c564b\"), \n    tickfont = list(color = \"#8c564b\"), \n    position = 1.0, \n    anchor = \"free\", \n    side = \"right\", \n    overlaying = \"y\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"multiple-axes-multiple-axes-multiple\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'name', 'yaxis1 data', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [40, 50, 60], ...\n  'name', 'yaxis2 data', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [400, 500, 600], ...\n  'name', 'yaxis3 data', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4, 5, 6], ...\n  'y', [40000, 50000, 60000], ...\n  'name', 'yaxis4 data', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'x', [5, 6, 7], ...\n  'y', [400000, 500000, 600000], ...\n  'name', 'yaxis5 data', ...\n  'yaxis', 'y5', ...\n  'type', 'scatter');\ntrace6 = struct(...\n  'x', [6, 7, 8], ...\n  'y', [4000000, 5000000, 6000000], ...\n  'name', 'yaxis6 data', ...\n  'yaxis', 'y6', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5, trace6};\nlayout = struct(...\n    'title', 'multiple y-axes example', ...\n    'xaxis', struct('domain', [0.3, 0.7]), ...\n    'yaxis', struct(...\n      'title', 'yaxis title', ...\n      'titlefont', struct('color', '#1f77b4'), ...\n      'tickfont', struct('color', '#1f77b4')), ...\n    'width', 800, ...\n    'yaxis2', struct(...\n      'title', 'yaxis2 title', ...\n      'titlefont', struct('color', '#ff7f0e'), ...\n      'tickfont', struct('color', '#ff7f0e'), ...\n      'position', 0.15, ...\n      'anchor', 'free', ...\n      'side', 'left', ...\n      'overlaying', 'y'), ...\n    'yaxis3', struct(...\n      'title', 'yaxis3 title', ...\n      'titlefont', struct('color', '#2ca02c'), ...\n      'tickfont', struct('color', '#2ca02c'), ...\n      'position', 0, ...\n      'anchor', 'free', ...\n      'side', 'left', ...\n      'overlaying', 'y'), ...\n    'yaxis4', struct(...\n      'title', 'yaxis4 title', ...\n      'titlefont', struct('color', '#d62728'), ...\n      'tickfont', struct('color', '#d62728'), ...\n      'anchor', 'x', ...\n      'side', 'right', ...\n      'overlaying', 'y'), ...\n    'yaxis5', struct(...\n      'title', 'yaxis5 title', ...\n      'titlefont', struct('color', '#9467bd'), ...\n      'tickfont', struct('color', '#9467bd'), ...\n      'position', 0.85, ...\n      'anchor', 'free', ...\n      'side', 'right', ...\n      'overlaying', 'y'), ...\n    'yaxis6', struct(...\n      'title', 'yaxis6 title', ...\n      'titlefont', struct('color', '#8c564b'), ...\n      'tickfont', struct('color', '#8c564b'), ...\n      'position', 1.0, ...\n      'anchor', 'free', ...\n      'side', 'right', ...\n      'overlaying', 'y'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'multiple-axes-multiple-axes-multiple', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/multiple-axes/multiple-axes-multiple", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  name: \"yaxis1 data\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [40, 50, 60], \n  name: \"yaxis2 data\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [400, 500, 600], \n  name: \"yaxis3 data\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4, 5, 6], \n  y: [40000, 50000, 60000], \n  name: \"yaxis4 data\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar trace5 = {\n  x: [5, 6, 7], \n  y: [400000, 500000, 600000], \n  name: \"yaxis5 data\", \n  yaxis: \"y5\", \n  type: \"scatter\"\n};\nvar trace6 = {\n  x: [6, 7, 8], \n  y: [4000000, 5000000, 6000000], \n  name: \"yaxis6 data\", \n  yaxis: \"y6\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\nvar layout = {\n  title: \"multiple y-axes example\", \n  xaxis: {domain: [0.3, 0.7]}, \n  yaxis: {\n    title: \"yaxis title\", \n    titlefont: {color: \"#1f77b4\"}, \n    tickfont: {color: \"#1f77b4\"}\n  }, \n  width: 800, \n  yaxis2: {\n    title: \"yaxis2 title\", \n    titlefont: {color: \"#ff7f0e\"}, \n    tickfont: {color: \"#ff7f0e\"}, \n    position: 0.15, \n    anchor: \"free\", \n    side: \"left\", \n    overlaying: \"y\"\n  }, \n  yaxis3: {\n    title: \"yaxis3 title\", \n    titlefont: {color: \"#2ca02c\"}, \n    tickfont: {color: \"#2ca02c\"}, \n    position: 0, \n    anchor: \"free\", \n    side: \"left\", \n    overlaying: \"y\"\n  }, \n  yaxis4: {\n    title: \"yaxis4 title\", \n    titlefont: {color: \"#d62728\"}, \n    tickfont: {color: \"#d62728\"}, \n    anchor: \"x\", \n    side: \"right\", \n    overlaying: \"y\"\n  }, \n  yaxis5: {\n    title: \"yaxis5 title\", \n    titlefont: {color: \"#9467bd\"}, \n    tickfont: {color: \"#9467bd\"}, \n    position: 0.85, \n    anchor: \"free\", \n    side: \"right\", \n    overlaying: \"y\"\n  }, \n  yaxis6: {\n    title: \"yaxis6 title\", \n    titlefont: {color: \"#8c564b\"}, \n    tickfont: {color: \"#8c564b\"}, \n    position: 1.0, \n    anchor: \"free\", \n    side: \"right\", \n    overlaying: \"y\"\n  }\n};\n\nvar graph_options = {filename: \"multiple-axes-multiple-axes-multiple\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'name', 'yaxis1 data', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [40, 50, 60], ...\n  'name', 'yaxis2 data', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [400, 500, 600], ...\n  'name', 'yaxis3 data', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4, 5, 6], ...\n  'y', [40000, 50000, 60000], ...\n  'name', 'yaxis4 data', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'x', [5, 6, 7], ...\n  'y', [400000, 500000, 600000], ...\n  'name', 'yaxis5 data', ...\n  'yaxis', 'y5', ...\n  'type', 'scatter');\ntrace6 = struct(...\n  'x', [6, 7, 8], ...\n  'y', [4000000, 5000000, 6000000], ...\n  'name', 'yaxis6 data', ...\n  'yaxis', 'y6', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5, trace6};\nlayout = struct(...\n    'title', 'multiple y-axes example', ...\n    'xaxis', struct('domain', [0.3, 0.7]), ...\n    'yaxis', struct(...\n      'title', 'yaxis title', ...\n      'titlefont', struct('color', '#1f77b4'), ...\n      'tickfont', struct('color', '#1f77b4')), ...\n    'width', 800, ...\n    'yaxis2', struct(...\n      'title', 'yaxis2 title', ...\n      'titlefont', struct('color', '#ff7f0e'), ...\n      'tickfont', struct('color', '#ff7f0e'), ...\n      'position', 0.15, ...\n      'anchor', 'free', ...\n      'side', 'left', ...\n      'overlaying', 'y'), ...\n    'yaxis3', struct(...\n      'title', 'yaxis3 title', ...\n      'titlefont', struct('color', '#2ca02c'), ...\n      'tickfont', struct('color', '#2ca02c'), ...\n      'position', 0, ...\n      'anchor', 'free', ...\n      'side', 'left', ...\n      'overlaying', 'y'), ...\n    'yaxis4', struct(...\n      'title', 'yaxis4 title', ...\n      'titlefont', struct('color', '#d62728'), ...\n      'tickfont', struct('color', '#d62728'), ...\n      'anchor', 'x', ...\n      'side', 'right', ...\n      'overlaying', 'y'), ...\n    'yaxis5', struct(...\n      'title', 'yaxis5 title', ...\n      'titlefont', struct('color', '#9467bd'), ...\n      'tickfont', struct('color', '#9467bd'), ...\n      'position', 0.85, ...\n      'anchor', 'free', ...\n      'side', 'right', ...\n      'overlaying', 'y'), ...\n    'yaxis6', struct(...\n      'title', 'yaxis6 title', ...\n      'titlefont', struct('color', '#8c564b'), ...\n      'tickfont', struct('color', '#8c564b'), ...\n      'position', 1.0, ...\n      'anchor', 'free', ...\n      'side', 'right', ...\n      'overlaying', 'y'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'multiple-axes-multiple-axes-multiple', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  name = \"yaxis1 data\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(2, 3, 4), \n  y = c(40, 50, 60), \n  name = \"yaxis2 data\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(3, 4, 5), \n  y = c(400, 500, 600), \n  name = \"yaxis3 data\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 <- list(\n  x = c(4, 5, 6), \n  y = c(40000, 50000, 60000), \n  name = \"yaxis4 data\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ntrace5 <- list(\n  x = c(5, 6, 7), \n  y = c(400000, 500000, 600000), \n  name = \"yaxis5 data\", \n  yaxis = \"y5\", \n  type = \"scatter\"\n)\ntrace6 <- list(\n  x = c(6, 7, 8), \n  y = c(4000000, 5000000, 6000000), \n  name = \"yaxis6 data\", \n  yaxis = \"y6\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4, trace5, trace6)\nlayout <- list(\n  title = \"multiple y-axes example\", \n  xaxis = list(domain = c(0.3, 0.7)), \n  yaxis = list(\n    title = \"yaxis title\", \n    titlefont = list(color = \"#1f77b4\"), \n    tickfont = list(color = \"#1f77b4\")\n  ), \n  width = 800, \n  yaxis2 = list(\n    title = \"yaxis2 title\", \n    titlefont = list(color = \"#ff7f0e\"), \n    tickfont = list(color = \"#ff7f0e\"), \n    position = 0.15, \n    anchor = \"free\", \n    side = \"left\", \n    overlaying = \"y\"\n  ), \n  yaxis3 = list(\n    title = \"yaxis3 title\", \n    titlefont = list(color = \"#2ca02c\"), \n    tickfont = list(color = \"#2ca02c\"), \n    position = 0, \n    anchor = \"free\", \n    side = \"left\", \n    overlaying = \"y\"\n  ), \n  yaxis4 = list(\n    title = \"yaxis4 title\", \n    titlefont = list(color = \"#d62728\"), \n    tickfont = list(color = \"#d62728\"), \n    anchor = \"x\", \n    side = \"right\", \n    overlaying = \"y\"\n  ), \n  yaxis5 = list(\n    title = \"yaxis5 title\", \n    titlefont = list(color = \"#9467bd\"), \n    tickfont = list(color = \"#9467bd\"), \n    position = 0.85, \n    anchor = \"free\", \n    side = \"right\", \n    overlaying = \"y\"\n  ), \n  yaxis6 = list(\n    title = \"yaxis6 title\", \n    titlefont = list(color = \"#8c564b\"), \n    tickfont = list(color = \"#8c564b\"), \n    position = 1.0, \n    anchor = \"free\", \n    side = \"right\", \n    overlaying = \"y\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"multiple-axes-multiple-axes-multiple\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6],\n    name='yaxis1 data'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[40, 50, 60],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[400, 500, 600],\n    name='yaxis3 data',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4, 5, 6],\n    y=[40000, 50000, 60000],\n    name='yaxis4 data',\n    yaxis='y4'\n)\ntrace5 = Scatter(\n    x=[5, 6, 7],\n    y=[400000, 500000, 600000],\n    name='yaxis5 data',\n    yaxis='y5'\n)\ntrace6 = Scatter(\n    x=[6, 7, 8],\n    y=[4000000, 5000000, 6000000],\n    name='yaxis6 data',\n    yaxis='y6'\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5, trace6])\nlayout = Layout(\n    title='multiple y-axes example',\n    xaxis=XAxis(\n        domain=[0.3, 0.7]\n    ),\n    yaxis=YAxis(\n        title='yaxis title',\n        titlefont=Font(\n            color='#1f77b4'\n        ),\n        tickfont=Font(\n            color='#1f77b4'\n        )\n    ),\n    width=800,\n    yaxis2=YAxis(\n        title='yaxis2 title',\n        titlefont=Font(\n            color='#ff7f0e'\n        ),\n        tickfont=Font(\n            color='#ff7f0e'\n        ),\n        position=0.15,\n        anchor='free',\n        side='left',\n        overlaying='y'\n    ),\n    yaxis3=YAxis(\n        title='yaxis3 title',\n        titlefont=Font(\n            color='#2ca02c'\n        ),\n        tickfont=Font(\n            color='#2ca02c'\n        ),\n        position=0,\n        anchor='free',\n        side='left',\n        overlaying='y'\n    ),\n    yaxis4=YAxis(\n        title='yaxis4 title',\n        titlefont=Font(\n            color='#d62728'\n        ),\n        tickfont=Font(\n            color='#d62728'\n        ),\n        anchor='x',\n        side='right',\n        overlaying='y'\n    ),\n    yaxis5=YAxis(\n        title='yaxis5 title',\n        titlefont=Font(\n            color='#9467bd'\n        ),\n        tickfont=Font(\n            color='#9467bd'\n        ),\n        position=0.85,\n        anchor='free',\n        side='right',\n        overlaying='y'\n    ),\n    yaxis6=YAxis(\n        title='yaxis6 title',\n        titlefont=Font(\n            color='#8c564b'\n        ),\n        tickfont=Font(\n            color='#8c564b'\n        ),\n        position=1.0,\n        anchor='free',\n        side='right',\n        overlaying='y'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='multiple-axes-multiple-axes-multiple', auto_open=False)"
            }
          }, 
          "name": "multiple-axes", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "multiple-axes"
          }
        }, 
        "subplots": {
          "path": "hard-coded/multiple-axes-insets-subplots/subplots", 
          "subsections": {
            "multiple-subplots": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/multiple-subplots/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [300, 400, 500], \n  y: [600, 700, 800], \n  xaxis: \"x3\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4000, 5000, 6000], \n  y: [7000, 8000, 9000], \n  xaxis: \"x4\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis: {domain: [0, 0.45]}, \n  xaxis4: {\n    domain: [0.55, 1], \n    anchor: \"y4\"\n  }, \n  xaxis3: {\n    domain: [0, 0.45], \n    anchor: \"y3\"\n  }, \n  xaxis2: {domain: [0.55, 1]}, \n  yaxis2: {\n    domain: [0, 0.45], \n    anchor: \"x2\"\n  }, \n  yaxis3: {domain: [0.55, 1]}, \n  yaxis4: {\n    domain: [0.55, 1], \n    anchor: \"x4\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-multiple-subplots\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "multiple-subplots", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[300, 400, 500],\n    y=[600, 700, 800],\n    xaxis='x3',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis='x4',\n    yaxis='y4'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    xaxis3=XAxis(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=XAxis(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=YAxis(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=YAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis4=YAxis(\n        domain=[0.55, 1],\n        anchor='x4'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-multiple-subplots')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [4, 5, 6], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [20, 30, 40], \n  \"y\" => [50, 60, 70], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [300, 400, 500], \n  \"y\" => [600, 700, 800], \n  \"xaxis\" => \"x3\", \n  \"yaxis\" => \"y3\", \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"x\" => [4000, 5000, 6000], \n  \"y\" => [7000, 8000, 9000], \n  \"xaxis\" => \"x4\", \n  \"yaxis\" => \"y4\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" => [\"domain\" => [0, 0.45]], \n  \"yaxis\" => [\"domain\" => [0, 0.45]], \n  \"xaxis4\" => [\n    \"domain\" => [0.55, 1], \n    \"anchor\" => \"y4\"\n  ], \n  \"xaxis3\" => [\n    \"domain\" => [0, 0.45], \n    \"anchor\" => \"y3\"\n  ], \n  \"xaxis2\" => [\"domain\" => [0.55, 1]], \n  \"yaxis2\" => [\n    \"domain\" => [0, 0.45], \n    \"anchor\" => \"x2\"\n  ], \n  \"yaxis3\" => [\"domain\" => [0.55, 1]], \n  \"yaxis4\" => [\n    \"domain\" => [0.55, 1], \n    \"anchor\" => \"x4\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-multiple-subplots\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [4, 5, 6], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [20, 30, 40], \n  \"y\" =&gt; [50, 60, 70], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [300, 400, 500], \n  \"y\" =&gt; [600, 700, 800], \n  \"xaxis\" =&gt; \"x3\", \n  \"yaxis\" =&gt; \"y3\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"x\" =&gt; [4000, 5000, 6000], \n  \"y\" =&gt; [7000, 8000, 9000], \n  \"xaxis\" =&gt; \"x4\", \n  \"yaxis\" =&gt; \"y4\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" =&gt; [\"domain\" =&gt; [0, 0.45]], \n  \"yaxis\" =&gt; [\"domain\" =&gt; [0, 0.45]], \n  \"xaxis4\" =&gt; [\n    \"domain\" =&gt; [0.55, 1], \n    \"anchor\" =&gt; \"y4\"\n  ], \n  \"xaxis3\" =&gt; [\n    \"domain\" =&gt; [0, 0.45], \n    \"anchor\" =&gt; \"y3\"\n  ], \n  \"xaxis2\" =&gt; [\"domain\" =&gt; [0.55, 1]], \n  \"yaxis2\" =&gt; [\n    \"domain\" =&gt; [0, 0.45], \n    \"anchor\" =&gt; \"x2\"\n  ], \n  \"yaxis3\" =&gt; [\"domain\" =&gt; [0.55, 1]], \n  \"yaxis4\" =&gt; [\n    \"domain\" =&gt; [0.55, 1], \n    \"anchor\" =&gt; \"x4\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-multiple-subplots\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/993", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(300, 400, 500), \n  y = c(600, 700, 800), \n  xaxis = \"x3\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  x = c(4000, 5000, 6000), \n  y = c(7000, 8000, 9000), \n  xaxis = \"x4\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4)\nlayout &lt;- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis = list(domain = c(0, 0.45)), \n  xaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"y4\"\n  ), \n  xaxis3 = list(\n    domain = c(0, 0.45), \n    anchor = \"y3\"\n  ), \n  xaxis2 = list(domain = c(0.55, 1)), \n  yaxis2 = list(\n    domain = c(0, 0.45), \n    anchor = \"x2\"\n  ), \n  yaxis3 = list(domain = c(0.55, 1)), \n  yaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"x4\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-multiple-subplots\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [300, 400, 500], ...\n  'y', [600, 700, 800], ...\n  'xaxis', 'x3', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4000, 5000, 6000], ...\n  'y', [7000, 8000, 9000], ...\n  'xaxis', 'x4', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis', struct('domain', [0, 0.45]), ...\n    'xaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'y4'), ...\n    'xaxis3', struct(...\n      'domain', [0, 0.45], ...\n      'anchor', 'y3'), ...\n    'xaxis2', struct('domain', [0.55, 1]), ...\n    'yaxis2', struct(...\n      'domain', [0, 0.45], ...\n      'anchor', 'x2'), ...\n    'yaxis3', struct('domain', [0.55, 1]), ...\n    'yaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'x4'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-multiple-subplots', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/multiple-subplots", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [300, 400, 500], \n  y: [600, 700, 800], \n  xaxis: \"x3\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4000, 5000, 6000], \n  y: [7000, 8000, 9000], \n  xaxis: \"x4\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis: {domain: [0, 0.45]}, \n  xaxis4: {\n    domain: [0.55, 1], \n    anchor: \"y4\"\n  }, \n  xaxis3: {\n    domain: [0, 0.45], \n    anchor: \"y3\"\n  }, \n  xaxis2: {domain: [0.55, 1]}, \n  yaxis2: {\n    domain: [0, 0.45], \n    anchor: \"x2\"\n  }, \n  yaxis3: {domain: [0.55, 1]}, \n  yaxis4: {\n    domain: [0.55, 1], \n    anchor: \"x4\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-multiple-subplots\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [300, 400, 500], ...\n  'y', [600, 700, 800], ...\n  'xaxis', 'x3', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4000, 5000, 6000], ...\n  'y', [7000, 8000, 9000], ...\n  'xaxis', 'x4', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis', struct('domain', [0, 0.45]), ...\n    'xaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'y4'), ...\n    'xaxis3', struct(...\n      'domain', [0, 0.45], ...\n      'anchor', 'y3'), ...\n    'xaxis2', struct('domain', [0.55, 1]), ...\n    'yaxis2', struct(...\n      'domain', [0, 0.45], ...\n      'anchor', 'x2'), ...\n    'yaxis3', struct('domain', [0.55, 1]), ...\n    'yaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'x4'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-multiple-subplots', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(300, 400, 500), \n  y = c(600, 700, 800), \n  xaxis = \"x3\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 <- list(\n  x = c(4000, 5000, 6000), \n  y = c(7000, 8000, 9000), \n  xaxis = \"x4\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4)\nlayout <- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis = list(domain = c(0, 0.45)), \n  xaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"y4\"\n  ), \n  xaxis3 = list(\n    domain = c(0, 0.45), \n    anchor = \"y3\"\n  ), \n  xaxis2 = list(domain = c(0.55, 1)), \n  yaxis2 = list(\n    domain = c(0, 0.45), \n    anchor = \"x2\"\n  ), \n  yaxis3 = list(domain = c(0.55, 1)), \n  yaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"x4\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-multiple-subplots\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[300, 400, 500],\n    y=[600, 700, 800],\n    xaxis='x3',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis='x4',\n    yaxis='y4'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    xaxis3=XAxis(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=XAxis(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=YAxis(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=YAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis4=YAxis(\n        domain=[0.55, 1],\n        anchor='x4'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-multiple-subplots', auto_open=False)"
            }, 
            "shared-axes-subplots": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/shared-axes-subplots/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [2, 3, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [5, 5, 5], \n  xaxis: \"x2\", \n  yaxis: \"y\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [2, 3, 4], \n  y: [600, 700, 800], \n  xaxis: \"x\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4000, 5000, 6000], \n  y: [7000, 8000, 9000], \n  xaxis: \"x4\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis: {domain: [0, 0.45]}, \n  xaxis4: {\n    domain: [0.55, 1], \n    anchor: \"y4\"\n  }, \n  xaxis2: {domain: [0.55, 1]}, \n  yaxis3: {domain: [0.55, 1]}, \n  yaxis4: {\n    domain: [0.55, 1], \n    anchor: \"x4\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-shared-axes-subplots\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "shared-axes-subplots", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[2, 3, 4]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[5, 5, 5],\n    xaxis='x2',\n    yaxis='y'\n)\ntrace3 = Scatter(\n    x=[2, 3, 4],\n    y=[600, 700, 800],\n    xaxis='x',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis='x4',\n    yaxis='y4'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    xaxis4=XAxis(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis3=YAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis4=YAxis(\n        domain=[0.55, 1],\n        anchor='x4'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-shared-axes-subplots')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [2, 3, 4], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [20, 30, 40], \n  \"y\" => [5, 5, 5], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [2, 3, 4], \n  \"y\" => [600, 700, 800], \n  \"xaxis\" => \"x\", \n  \"yaxis\" => \"y3\", \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"x\" => [4000, 5000, 6000], \n  \"y\" => [7000, 8000, 9000], \n  \"xaxis\" => \"x4\", \n  \"yaxis\" => \"y4\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" => [\"domain\" => [0, 0.45]], \n  \"yaxis\" => [\"domain\" => [0, 0.45]], \n  \"xaxis4\" => [\n    \"domain\" => [0.55, 1], \n    \"anchor\" => \"y4\"\n  ], \n  \"xaxis2\" => [\"domain\" => [0.55, 1]], \n  \"yaxis3\" => [\"domain\" => [0.55, 1]], \n  \"yaxis4\" => [\n    \"domain\" => [0.55, 1], \n    \"anchor\" => \"x4\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-shared-axes-subplots\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [2, 3, 4], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [20, 30, 40], \n  \"y\" =&gt; [5, 5, 5], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [2, 3, 4], \n  \"y\" =&gt; [600, 700, 800], \n  \"xaxis\" =&gt; \"x\", \n  \"yaxis\" =&gt; \"y3\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"x\" =&gt; [4000, 5000, 6000], \n  \"y\" =&gt; [7000, 8000, 9000], \n  \"xaxis\" =&gt; \"x4\", \n  \"yaxis\" =&gt; \"y4\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" =&gt; [\"domain\" =&gt; [0, 0.45]], \n  \"yaxis\" =&gt; [\"domain\" =&gt; [0, 0.45]], \n  \"xaxis4\" =&gt; [\n    \"domain\" =&gt; [0.55, 1], \n    \"anchor\" =&gt; \"y4\"\n  ], \n  \"xaxis2\" =&gt; [\"domain\" =&gt; [0.55, 1]], \n  \"yaxis3\" =&gt; [\"domain\" =&gt; [0.55, 1]], \n  \"yaxis4\" =&gt; [\n    \"domain\" =&gt; [0.55, 1], \n    \"anchor\" =&gt; \"x4\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-shared-axes-subplots\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/994", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(2, 3, 4), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(20, 30, 40), \n  y = c(5, 5, 5), \n  xaxis = \"x2\", \n  yaxis = \"y\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(2, 3, 4), \n  y = c(600, 700, 800), \n  xaxis = \"x\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  x = c(4000, 5000, 6000), \n  y = c(7000, 8000, 9000), \n  xaxis = \"x4\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4)\nlayout &lt;- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis = list(domain = c(0, 0.45)), \n  xaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"y4\"\n  ), \n  xaxis2 = list(domain = c(0.55, 1)), \n  yaxis3 = list(domain = c(0.55, 1)), \n  yaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"x4\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-shared-axes-subplots\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [2, 3, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [5, 5, 5], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [600, 700, 800], ...\n  'xaxis', 'x', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4000, 5000, 6000], ...\n  'y', [7000, 8000, 9000], ...\n  'xaxis', 'x4', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis', struct('domain', [0, 0.45]), ...\n    'xaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'y4'), ...\n    'xaxis2', struct('domain', [0.55, 1]), ...\n    'yaxis3', struct('domain', [0.55, 1]), ...\n    'yaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'x4'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-shared-axes-subplots', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/shared-axes-subplots", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [2, 3, 4], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [5, 5, 5], \n  xaxis: \"x2\", \n  yaxis: \"y\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [2, 3, 4], \n  y: [600, 700, 800], \n  xaxis: \"x\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [4000, 5000, 6000], \n  y: [7000, 8000, 9000], \n  xaxis: \"x4\", \n  yaxis: \"y4\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis: {domain: [0, 0.45]}, \n  xaxis4: {\n    domain: [0.55, 1], \n    anchor: \"y4\"\n  }, \n  xaxis2: {domain: [0.55, 1]}, \n  yaxis3: {domain: [0.55, 1]}, \n  yaxis4: {\n    domain: [0.55, 1], \n    anchor: \"x4\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-shared-axes-subplots\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [2, 3, 4], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [5, 5, 5], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [600, 700, 800], ...\n  'xaxis', 'x', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [4000, 5000, 6000], ...\n  'y', [7000, 8000, 9000], ...\n  'xaxis', 'x4', ...\n  'yaxis', 'y4', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis', struct('domain', [0, 0.45]), ...\n    'xaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'y4'), ...\n    'xaxis2', struct('domain', [0.55, 1]), ...\n    'yaxis3', struct('domain', [0.55, 1]), ...\n    'yaxis4', struct(...\n      'domain', [0.55, 1], ...\n      'anchor', 'x4'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-shared-axes-subplots', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(2, 3, 4), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(20, 30, 40), \n  y = c(5, 5, 5), \n  xaxis = \"x2\", \n  yaxis = \"y\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(2, 3, 4), \n  y = c(600, 700, 800), \n  xaxis = \"x\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ntrace4 <- list(\n  x = c(4000, 5000, 6000), \n  y = c(7000, 8000, 9000), \n  xaxis = \"x4\", \n  yaxis = \"y4\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4)\nlayout <- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis = list(domain = c(0, 0.45)), \n  xaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"y4\"\n  ), \n  xaxis2 = list(domain = c(0.55, 1)), \n  yaxis3 = list(domain = c(0.55, 1)), \n  yaxis4 = list(\n    domain = c(0.55, 1), \n    anchor = \"x4\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-shared-axes-subplots\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[2, 3, 4]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[5, 5, 5],\n    xaxis='x2',\n    yaxis='y'\n)\ntrace3 = Scatter(\n    x=[2, 3, 4],\n    y=[600, 700, 800],\n    xaxis='x',\n    yaxis='y3'\n)\ntrace4 = Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis='x4',\n    yaxis='y4'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    xaxis4=XAxis(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis3=YAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis4=YAxis(\n        domain=[0.55, 1],\n        anchor='x4'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-shared-axes-subplots', auto_open=False)"
            }, 
            "simple-inset": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/simple-inset/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 3, 2], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [30, 40, 50], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  yaxis2: {\n    domain: [0.6, 0.95], \n    anchor: \"x2\"\n  }, \n  xaxis2: {\n    domain: [0.6, 0.95], \n    anchor: \"y2\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-simple-inset\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "simple-inset", 
              "image.png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAgAElEQVR4Xu29C3QVRbr3/WwghMAkwgQRJXLzBYF4Bt4FMwIRfb2gMKDDfICAiuIBA8wgED+FcFgoI67hKncV8EMYcQCHcxSVi4CggshFUGcGIgMKnMGDwXdAkEsAA/X107hjJ9lJ+tm7eqer93+v5TpzSFV116+e3r9d3fV0hZT1IXxAAARAAARAAASMJhCC0I0eP5w8CIAACIAACNgEIHQEAgiAAAiAAAgEgACEHoBBRBdAAARAAARAAEJHDIAACIAACIBAAAhA6AEYRHQBBEAABEAABCB0xAAIgAAIgAAIBIAAhB6AQUQXQAAEQAAEQABCRwyAAAiAAAiAQAAIQOgBGER0AQRAAARAAAQgdMQACIAACIAACASAAIQegEFEF0AABEAABEAAQkcMgAAIgAAIgEAACEDoARhEdAEEQAAEQAAEIHTEAAiAAAiAAAgEgACEHoBBRBdAAARAAARAAEJHDIAACIAACIBAAAhA6AEYRHQBBEAABEAABCB0xAAIgAAIgAAIBIAAhB6AQUQXQAAEQAAEQABCRwyAAAiAAAiAQAAIQOgBGER0AQRAAARAAAQgdMQACIAACIAACASAAIQegEFEF0AABEAABEAAQkcMgAAIgAAIgEAACEDoARhEdAEEQAAEQAAEIHTEAAiAAAiAAAgEgACEHoBBRBdAAARAAARAAEJHDIAACIAACIBAAAhA6AEYRHQBBEAABEAABCB0xAAIgAAIgAAIBIAAhB6AQUQXQAAEQAAEQABCRwyAAAiAAAiAQAAIQOgBGER0AQRAAARAAAQgdMQACIAACIAACASAAIQegEFEF0AABEAABEAAQkcMgAAIgAAIgEAACEDoARhEdAEEQAAEQAAEIHTEAAiAAAiAAAgEgACEHoBBRBdAAARAAARAAEJHDIAACIAACIBAAAhA6AEYRHQBBEAABEAABCB0xAAIgAAIgAAIBIAAhB6AQUQXQAAEQAAEQABCRwyAAAiAAAiAQAAIQOgBGER0AQRAAARAAAQgdMQACIAACIAACASAAIQegEFEF0AABEAABEAAQkcMgAAIgAAIgEAACEDoARhEdAEEQAAEQAAEIPQIMXD+/HllfSglJSWEEHFH4PTp08riRdWqVQMzd8jou+++U3Xq1OHSYOaC2aVLl9TZs2cpLS0NvFzw4iIefZcpxKzLAYhzMQgdQtcSchC6HCOELmMGoct4QehyXqbXgNAhdC0xDKHLMULoMmYQuowXhC7nZXoNCB1C1xLDELocI4QuYwahy3hB6HJepteA0CF0LTEMocsxQugyZhC6jBeELudleg0IHULXEsMQuhwjhC5jBqHLeEHocl6m14DQIXQtMQyhyzFC6DJmELqMF4Qu52V6DQgdQtcSwxC6HCOELmMGoct4QehyXqbXgNAhdC0xDKHLMULoMmYQuowXhC7nZXoNCB1C1xLDELocI4QuYwahy3hB6HJepteA0CF0LTEMocsxQugyZhC6jBeEHpnXrl276KabbqIaNWrIgWqo8Y9//IOmTZtGx48fpxtuuIFyc3MpPT1dQ8vWKyftd5ziU4yAR69LDDRlCF0+vBC6jBmELuNlstCPfFdAOw4etzt8d6trKC0lSd75CDVYd8OHD6fnnnuOrrrqKi1tShq5fPkyPfLIIzRixAhq164dvfnmm/Tpp5/ShAkTJM2UWRZCxwxdSyBB6HKMELqMGYQu42Wq0Pce/Z76LdhG358vtDucVqMaLcvuQJnXpckBlKgxf/58W6KNGjWi1NRUe6b87//+7zRw4ECaO3cutWnThkaPHk3r1q2jv/zlL3ThwgXi/RbGjh1L9evXt1s7cuQIzZo1i/75z39S9erVafLkydSgQQP6n//5H3r++efpX//6l132ySefpHr16hU7g3379tGLL75Is2fPtv+dBd+nTx9avHgx1apVK+b+QegQesxBxA1A6HKMELqMGYQu4+UXoc/YsJ9CIff76azYdYT+52RBsc42qJ1CvdtdLwIw8q5mEcv37duXWOzhGfpvfvMb+uUvf0k5OTlFUj148CBdffXVtvRffvll3uSGHn/8cVvAjz32GD388MN022238fdeUZ3Bgwfbf/vVr35F7777Ln344Yc0ceLEYuewceNGe0b+1FNPFf07tzts2DC68cYbRf2LVBhCh9BjDiIIPTqEELqMG4Qu4+UXoTfOXS0/cQ01Dk/q5krov/71r21p8yw70mf37t20cuVK+7b4l19+SVOmTKEFCxYUK/rVV1/R1KlTad68efa/W7FK3bt3p3feeYd3oCwqu2bNGrsNvu0f/vBM/qGHHrLvDsT6gdAh9FhjyK6PGbocI4QuYwahy3j5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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 3, 2]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[30, 40, 50],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis2=XAxis(\n        domain=[0.6, 0.95],\n        anchor='y2'\n    ),\n    yaxis2=YAxis(\n        domain=[0.6, 0.95],\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-simple-inset')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [4, 3, 2], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [20, 30, 40], \n  \"y\" => [30, 40, 50], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"yaxis2\" => [\n    \"domain\" => [0.6, 0.95], \n    \"anchor\" => \"x2\"\n  ], \n  \"xaxis2\" => [\n    \"domain\" => [0.6, 0.95], \n    \"anchor\" => \"y2\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-simple-inset\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [4, 3, 2], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [20, 30, 40], \n  \"y\" =&gt; [30, 40, 50], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"yaxis2\" =&gt; [\n    \"domain\" =&gt; [0.6, 0.95], \n    \"anchor\" =&gt; \"x2\"\n  ], \n  \"xaxis2\" =&gt; [\n    \"domain\" =&gt; [0.6, 0.95], \n    \"anchor\" =&gt; \"y2\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-simple-inset\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/995", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(4, 3, 2), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(20, 30, 40), \n  y = c(30, 40, 50), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  yaxis2 = list(\n    domain = c(0.6, 0.95), \n    anchor = \"x2\"\n  ), \n  xaxis2 = list(\n    domain = c(0.6, 0.95), \n    anchor = \"y2\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-simple-inset\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 3, 2], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [30, 40, 50], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'yaxis2', struct(...\n      'domain', [0.6, 0.95], ...\n      'anchor', 'x2'), ...\n    'xaxis2', struct(...\n      'domain', [0.6, 0.95], ...\n      'anchor', 'y2'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-simple-inset', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/simple-inset", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 3, 2], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [30, 40, 50], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  yaxis2: {\n    domain: [0.6, 0.95], \n    anchor: \"x2\"\n  }, \n  xaxis2: {\n    domain: [0.6, 0.95], \n    anchor: \"y2\"\n  }\n};\n\nvar graph_options = {filename: \"subplots-simple-inset\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 3, 2], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [30, 40, 50], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'yaxis2', struct(...\n      'domain', [0.6, 0.95], ...\n      'anchor', 'x2'), ...\n    'xaxis2', struct(...\n      'domain', [0.6, 0.95], ...\n      'anchor', 'y2'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-simple-inset', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(4, 3, 2), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(20, 30, 40), \n  y = c(30, 40, 50), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  yaxis2 = list(\n    domain = c(0.6, 0.95), \n    anchor = \"x2\"\n  ), \n  xaxis2 = list(\n    domain = c(0.6, 0.95), \n    anchor = \"y2\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-simple-inset\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 3, 2]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[30, 40, 50],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis2=XAxis(\n        domain=[0.6, 0.95],\n        anchor='y2'\n    ),\n    yaxis2=YAxis(\n        domain=[0.6, 0.95],\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-simple-inset', auto_open=False)"
            }, 
            "stacked-coupled-subplots": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/stacked-coupled-subplots/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [10, 11, 12], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [100, 110, 120], \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [1000, 1100, 1200], \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {domain: [0, 0.33]}, \n  legend: {traceorder: \"reversed\"}, \n  yaxis2: {domain: [0.33, 0.66]}, \n  yaxis3: {domain: [0.66, 1]}\n};\n\nvar graph_options = {filename: \"subplots-stacked-coupled-subplots\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "stacked-coupled-subplots", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    yaxis='y3'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        domain=[0, 0.33]\n    ),\n    legend=Legend(\n        traceorder='reversed'\n    ),\n    yaxis2=YAxis(\n        domain=[0.33, 0.66]\n    ),\n    yaxis3=YAxis(\n        domain=[0.66, 1]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-stacked-coupled-subplots')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [10, 11, 12], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [2, 3, 4], \n  \"y\" => [100, 110, 120], \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [3, 4, 5], \n  \"y\" => [1000, 1100, 1200], \n  \"yaxis\" => \"y3\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" => [\"domain\" => [0, 0.33]], \n  \"legend\" => [\"traceorder\" => \"reversed\"], \n  \"yaxis2\" => [\"domain\" => [0.33, 0.66]], \n  \"yaxis3\" => [\"domain\" => [0.66, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-stacked-coupled-subplots\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [10, 11, 12], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [2, 3, 4], \n  \"y\" =&gt; [100, 110, 120], \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [3, 4, 5], \n  \"y\" =&gt; [1000, 1100, 1200], \n  \"yaxis\" =&gt; \"y3\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" =&gt; [\"domain\" =&gt; [0, 0.33]], \n  \"legend\" =&gt; [\"traceorder\" =&gt; \"reversed\"], \n  \"yaxis2\" =&gt; [\"domain\" =&gt; [0.33, 0.66]], \n  \"yaxis3\" =&gt; [\"domain\" =&gt; [0.66, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-stacked-coupled-subplots\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/996", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(10, 11, 12), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(2, 3, 4), \n  y = c(100, 110, 120), \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(3, 4, 5), \n  y = c(1000, 1100, 1200), \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3)\nlayout &lt;- list(\n  yaxis = list(domain = c(0, 0.33)), \n  legend = list(traceorder = \"reversed\"), \n  yaxis2 = list(domain = c(0.33, 0.66)), \n  yaxis3 = list(domain = c(0.66, 1))\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-stacked-coupled-subplots\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [10, 11, 12], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [100, 110, 120], ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [1000, 1100, 1200], ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct('domain', [0, 0.33]), ...\n    'legend', struct('traceorder', 'reversed'), ...\n    'yaxis2', struct('domain', [0.33, 0.66]), ...\n    'yaxis3', struct('domain', [0.66, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-stacked-coupled-subplots', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/stacked-coupled-subplots", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [10, 11, 12], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [100, 110, 120], \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [1000, 1100, 1200], \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {domain: [0, 0.33]}, \n  legend: {traceorder: \"reversed\"}, \n  yaxis2: {domain: [0.33, 0.66]}, \n  yaxis3: {domain: [0.66, 1]}\n};\n\nvar graph_options = {filename: \"subplots-stacked-coupled-subplots\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [10, 11, 12], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [100, 110, 120], ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [1000, 1100, 1200], ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct('domain', [0, 0.33]), ...\n    'legend', struct('traceorder', 'reversed'), ...\n    'yaxis2', struct('domain', [0.33, 0.66]), ...\n    'yaxis3', struct('domain', [0.66, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-stacked-coupled-subplots', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2), \n  y = c(10, 11, 12), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(2, 3, 4), \n  y = c(100, 110, 120), \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(3, 4, 5), \n  y = c(1000, 1100, 1200), \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3)\nlayout <- list(\n  yaxis = list(domain = c(0, 0.33)), \n  legend = list(traceorder = \"reversed\"), \n  yaxis2 = list(domain = c(0.33, 0.66)), \n  yaxis3 = list(domain = c(0.66, 1))\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-stacked-coupled-subplots\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    yaxis='y3'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        domain=[0, 0.33]\n    ),\n    legend=Legend(\n        traceorder='reversed'\n    ),\n    yaxis2=YAxis(\n        domain=[0.33, 0.66]\n    ),\n    yaxis3=YAxis(\n        domain=[0.66, 1]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-stacked-coupled-subplots', auto_open=False)"
            }, 
            "custom-size-subplot": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/custom-size-subplot/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {domain: [0, 0.7]}, \n  yaxis2: {anchor: \"x2\"}, \n  xaxis2: {domain: [0.8, 1]}\n};\n\nvar graph_options = {filename: \"subplots-custom-size-subplot\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "custom-size-subplot", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.7]\n    ),\n    xaxis2=XAxis(\n        domain=[0.8, 1]\n    ),\n    yaxis2=YAxis(\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-custom-size-subplot')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [4, 5, 6], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [20, 30, 40], \n  \"y\" => [50, 60, 70], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"domain\" => [0, 0.7]], \n  \"yaxis2\" => [\"anchor\" => \"x2\"], \n  \"xaxis2\" => [\"domain\" => [0.8, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-custom-size-subplot\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [4, 5, 6], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [20, 30, 40], \n  \"y\" =&gt; [50, 60, 70], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"domain\" =&gt; [0, 0.7]], \n  \"yaxis2\" =&gt; [\"anchor\" =&gt; \"x2\"], \n  \"xaxis2\" =&gt; [\"domain\" =&gt; [0.8, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-custom-size-subplot\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/997", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(domain = c(0, 0.7)), \n  yaxis2 = list(anchor = \"x2\"), \n  xaxis2 = list(domain = c(0.8, 1))\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-custom-size-subplot\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.7]), ...\n    'yaxis2', struct('anchor', 'x2'), ...\n    'xaxis2', struct('domain', [0.8, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-custom-size-subplot', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/custom-size-subplot", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {domain: [0, 0.7]}, \n  yaxis2: {anchor: \"x2\"}, \n  xaxis2: {domain: [0.8, 1]}\n};\n\nvar graph_options = {filename: \"subplots-custom-size-subplot\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.7]), ...\n    'yaxis2', struct('anchor', 'x2'), ...\n    'xaxis2', struct('domain', [0.8, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-custom-size-subplot', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(domain = c(0, 0.7)), \n  yaxis2 = list(anchor = \"x2\"), \n  xaxis2 = list(domain = c(0.8, 1))\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-custom-size-subplot\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.7]\n    ),\n    xaxis2=XAxis(\n        domain=[0.8, 1]\n    ),\n    yaxis2=YAxis(\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-custom-size-subplot', auto_open=False)"
            }, 
            "simple-subplot": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/simple-subplot/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis2: {anchor: \"x2\"}, \n  xaxis2: {domain: [0.55, 1]}\n};\n\nvar graph_options = {filename: \"subplots-simple-subplot\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "simple-subplot", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis2=YAxis(\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-simple-subplot')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3], \n  \"y\" => [4, 5, 6], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [20, 30, 40], \n  \"y\" => [50, 60, 70], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"domain\" => [0, 0.45]], \n  \"yaxis2\" => [\"anchor\" => \"x2\"], \n  \"xaxis2\" => [\"domain\" => [0.55, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-simple-subplot\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3], \n  \"y\" =&gt; [4, 5, 6], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [20, 30, 40], \n  \"y\" =&gt; [50, 60, 70], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"domain\" =&gt; [0, 0.45]], \n  \"yaxis2\" =&gt; [\"anchor\" =&gt; \"x2\"], \n  \"xaxis2\" =&gt; [\"domain\" =&gt; [0.55, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-simple-subplot\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/998", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis2 = list(anchor = \"x2\"), \n  xaxis2 = list(domain = c(0.55, 1))\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-simple-subplot\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis2', struct('anchor', 'x2'), ...\n    'xaxis2', struct('domain', [0.55, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-simple-subplot', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/simple-subplot", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3], \n  y: [4, 5, 6], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [20, 30, 40], \n  y: [50, 60, 70], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {domain: [0, 0.45]}, \n  yaxis2: {anchor: \"x2\"}, \n  xaxis2: {domain: [0.55, 1]}\n};\n\nvar graph_options = {filename: \"subplots-simple-subplot\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3], ...\n  'y', [4, 5, 6], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [20, 30, 40], ...\n  'y', [50, 60, 70], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('domain', [0, 0.45]), ...\n    'yaxis2', struct('anchor', 'x2'), ...\n    'xaxis2', struct('domain', [0.55, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-simple-subplot', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3), \n  y = c(4, 5, 6), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(20, 30, 40), \n  y = c(50, 60, 70), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(domain = c(0, 0.45)), \n  yaxis2 = list(anchor = \"x2\"), \n  xaxis2 = list(domain = c(0.55, 1))\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-simple-subplot\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        domain=[0.55, 1]\n    ),\n    yaxis2=YAxis(\n        anchor='x2'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-simple-subplot', auto_open=False)"
            }, 
            "stacked-subplots": {
              "files": {
                "model.json": "hard-coded/multiple-axes-insets-subplots/subplots/stacked-subplots/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [10, 11, 12], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [100, 110, 120], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [1000, 1100, 1200], \n  xaxis: \"x3\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {domain: [0, 0.266]}, \n  legend: {traceorder: \"reversed\"}, \n  xaxis3: {anchor: \"y3\"}, \n  xaxis2: {anchor: \"y2\"}, \n  yaxis2: {domain: [0.366, 0.633]}, \n  yaxis3: {domain: [0.733, 1]}\n};\n\nvar graph_options = {filename: \"subplots-stacked-subplots\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "stacked-subplots", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    xaxis='x2',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    xaxis='x3',\n    yaxis='y3'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        domain=[0, 0.266]\n    ),\n    legend=Legend(\n        traceorder='reversed'\n    ),\n    xaxis2=XAxis(\n        anchor='y2'\n    ),\n    xaxis3=XAxis(\n        anchor='y3'\n    ),\n    yaxis2=YAxis(\n        domain=[0.366, 0.633]\n    ),\n    yaxis3=YAxis(\n        domain=[0.733, 1]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='subplots-stacked-subplots')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [10, 11, 12], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [2, 3, 4], \n  \"y\" => [100, 110, 120], \n  \"xaxis\" => \"x2\", \n  \"yaxis\" => \"y2\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [3, 4, 5], \n  \"y\" => [1000, 1100, 1200], \n  \"xaxis\" => \"x3\", \n  \"yaxis\" => \"y3\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" => [\"domain\" => [0, 0.266]], \n  \"legend\" => [\"traceorder\" => \"reversed\"], \n  \"xaxis3\" => [\"anchor\" => \"y3\"], \n  \"xaxis2\" => [\"anchor\" => \"y2\"], \n  \"yaxis2\" => [\"domain\" => [0.366, 0.633]], \n  \"yaxis3\" => [\"domain\" => [0.733, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"subplots-stacked-subplots\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [10, 11, 12], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [2, 3, 4], \n  \"y\" =&gt; [100, 110, 120], \n  \"xaxis\" =&gt; \"x2\", \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [3, 4, 5], \n  \"y\" =&gt; [1000, 1100, 1200], \n  \"xaxis\" =&gt; \"x3\", \n  \"yaxis\" =&gt; \"y3\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" =&gt; [\"domain\" =&gt; [0, 0.266]], \n  \"legend\" =&gt; [\"traceorder\" =&gt; \"reversed\"], \n  \"xaxis3\" =&gt; [\"anchor\" =&gt; \"y3\"], \n  \"xaxis2\" =&gt; [\"anchor\" =&gt; \"y2\"], \n  \"yaxis2\" =&gt; [\"domain\" =&gt; [0.366, 0.633]], \n  \"yaxis3\" =&gt; [\"domain\" =&gt; [0.733, 1]]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"subplots-stacked-subplots\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/999", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(10, 11, 12), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(2, 3, 4), \n  y = c(100, 110, 120), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(3, 4, 5), \n  y = c(1000, 1100, 1200), \n  xaxis = \"x3\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3)\nlayout &lt;- list(\n  yaxis = list(domain = c(0, 0.266)), \n  legend = list(traceorder = \"reversed\"), \n  xaxis3 = list(anchor = \"y3\"), \n  xaxis2 = list(anchor = \"y2\"), \n  yaxis2 = list(domain = c(0.366, 0.633)), \n  yaxis3 = list(domain = c(0.733, 1))\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-stacked-subplots\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [10, 11, 12], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [100, 110, 120], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [1000, 1100, 1200], ...\n  'xaxis', 'x3', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct('domain', [0, 0.266]), ...\n    'legend', struct('traceorder', 'reversed'), ...\n    'xaxis3', struct('anchor', 'y3'), ...\n    'xaxis2', struct('anchor', 'y2'), ...\n    'yaxis2', struct('domain', [0.366, 0.633]), ...\n    'yaxis3', struct('domain', [0.733, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-stacked-subplots', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/multiple-axes-insets-subplots/subplots/stacked-subplots", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [10, 11, 12], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4], \n  y: [100, 110, 120], \n  xaxis: \"x2\", \n  yaxis: \"y2\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [3, 4, 5], \n  y: [1000, 1100, 1200], \n  xaxis: \"x3\", \n  yaxis: \"y3\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {domain: [0, 0.266]}, \n  legend: {traceorder: \"reversed\"}, \n  xaxis3: {anchor: \"y3\"}, \n  xaxis2: {anchor: \"y2\"}, \n  yaxis2: {domain: [0.366, 0.633]}, \n  yaxis3: {domain: [0.733, 1]}\n};\n\nvar graph_options = {filename: \"subplots-stacked-subplots\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [10, 11, 12], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4], ...\n  'y', [100, 110, 120], ...\n  'xaxis', 'x2', ...\n  'yaxis', 'y2', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [3, 4, 5], ...\n  'y', [1000, 1100, 1200], ...\n  'xaxis', 'x3', ...\n  'yaxis', 'y3', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct('domain', [0, 0.266]), ...\n    'legend', struct('traceorder', 'reversed'), ...\n    'xaxis3', struct('anchor', 'y3'), ...\n    'xaxis2', struct('anchor', 'y2'), ...\n    'yaxis2', struct('domain', [0.366, 0.633]), ...\n    'yaxis3', struct('domain', [0.733, 1]));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'subplots-stacked-subplots', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2), \n  y = c(10, 11, 12), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(2, 3, 4), \n  y = c(100, 110, 120), \n  xaxis = \"x2\", \n  yaxis = \"y2\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(3, 4, 5), \n  y = c(1000, 1100, 1200), \n  xaxis = \"x3\", \n  yaxis = \"y3\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3)\nlayout <- list(\n  yaxis = list(domain = c(0, 0.266)), \n  legend = list(traceorder = \"reversed\"), \n  xaxis3 = list(anchor = \"y3\"), \n  xaxis2 = list(anchor = \"y2\"), \n  yaxis2 = list(domain = c(0.366, 0.633)), \n  yaxis3 = list(domain = c(0.733, 1))\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"subplots-stacked-subplots\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    xaxis='x2',\n    yaxis='y2'\n)\ntrace3 = Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    xaxis='x3',\n    yaxis='y3'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        domain=[0, 0.266]\n    ),\n    legend=Legend(\n        traceorder='reversed'\n    ),\n    xaxis2=XAxis(\n        anchor='y2'\n    ),\n    xaxis3=XAxis(\n        anchor='y3'\n    ),\n    yaxis2=YAxis(\n        domain=[0.366, 0.633]\n    ),\n    yaxis3=YAxis(\n        domain=[0.733, 1]\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='subplots-stacked-subplots', auto_open=False)"
            }
          },
          "name": "subplots", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "subplots"
          }
        }
      }, 
      "name": "multiple-axes-insets-subplots", 
      "config.json": {
        "has_thumbnail": true, 
        "name": "for the people"
      }
    }, 
    "chart-types": {
      "path": "hard-coded/chart-types", 
      "subsections": {
        "box": {
          "path": "hard-coded/chart-types/box", 
          "subsections": {
            "box-grouped": {
              "files": {
                "prepend.js": "hard-coded/chart-types/box/box-grouped/prepend.js", 
                "prepend.py": "hard-coded/chart-types/box/box-grouped/prepend.py", 
                "prepend.m": "hard-coded/chart-types/box/box-grouped/prepend.m", 
                "model.json": "hard-coded/chart-types/box/box-grouped/model.json", 
                "prepend.r": "hard-coded/chart-types/box/box-grouped/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/box/box-grouped/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\nvar trace1 = {\n  y: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], \n  x: x, \n  name: \"kale\", \n  marker: {color: \"#3D9970\"}, \n  type: \"box\"\n};\nvar trace2 = {\n  y: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], \n  x: x, \n  name: \"radishes\", \n  marker: {color: \"#FF4136\"}, \n  type: \"box\"\n};\nvar trace3 = {\n  y: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], \n  x: x, \n  name: \"carrots\", \n  marker: {color: \"#FF851B\"}, \n  type: \"box\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {\n    title: \"normalized moisture\", \n    zeroline: false\n  }, \n  boxmode: \"group\"\n};\n\nvar graph_options = {filename: \"box-box-grouped\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "box-grouped", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\ntrace1 = Box(\n    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n    x=x,\n    name='kale',\n    marker=Marker(\n        color='#3D9970'\n    )\n)\ntrace2 = Box(\n    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n    x=x,\n    name='radishes',\n    marker=Marker(\n        color='#FF4136'\n    )\n)\ntrace3 = Box(\n    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n    x=x,\n    name='carrots',\n    marker=Marker(\n        color='#FF851B'\n    )\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        title='normalized moisture',\n        zeroline=False\n    ),\n    boxmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='box-box-grouped')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx = ([\"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \n      \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\"])\ntrace1 = [\n  \"y\" => [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], \n  \"x\" => x, \n  \"name\" => \"kale\", \n  \"marker\" => [\"color\" => \"#3D9970\"], \n  \"type\" => \"box\"\n]\ntrace2 = [\n  \"y\" => [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], \n  \"x\" => x, \n  \"name\" => \"radishes\", \n  \"marker\" => [\"color\" => \"#FF4136\"], \n  \"type\" => \"box\"\n]\ntrace3 = [\n  \"y\" => [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], \n  \"x\" => x, \n  \"name\" => \"carrots\", \n  \"marker\" => [\"color\" => \"#FF851B\"], \n  \"type\" => \"box\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" => [\n    \"title\" => \"normalized moisture\", \n    \"zeroline\" => false\n  ], \n  \"boxmode\" => \"group\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"box-box-grouped\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx = ([\"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \"day 1\", \n      \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\", \"day 2\"])\ntrace1 = [\n  \"y\" =&gt; [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], \n  \"x\" =&gt; x, \n  \"name\" =&gt; \"kale\", \n  \"marker\" =&gt; [\"color\" =&gt; \"#3D9970\"], \n  \"type\" =&gt; \"box\"\n]\ntrace2 = [\n  \"y\" =&gt; [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], \n  \"x\" =&gt; x, \n  \"name\" =&gt; \"radishes\", \n  \"marker\" =&gt; [\"color\" =&gt; \"#FF4136\"], \n  \"type\" =&gt; \"box\"\n]\ntrace3 = [\n  \"y\" =&gt; [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], \n  \"x\" =&gt; x, \n  \"name\" =&gt; \"carrots\", \n  \"marker\" =&gt; [\"color\" =&gt; \"#FF851B\"], \n  \"type\" =&gt; \"box\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\n  \"yaxis\" =&gt; [\n    \"title\" =&gt; \"normalized moisture\", \n    \"zeroline\" =&gt; false\n  ], \n  \"boxmode\" =&gt; \"group\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"box-box-grouped\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1000", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx &lt;- c('day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1', \n       'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2')\ntrace1 &lt;- list(\n  y = c(0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3), \n  x = x, \n  name = \"kale\", \n  marker = list(color = \"#3D9970\"), \n  type = \"box\"\n)\ntrace2 &lt;- list(\n  y = c(0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2), \n  x = x, \n  name = \"radishes\", \n  marker = list(color = \"#FF4136\"), \n  type = \"box\"\n)\ntrace3 &lt;- list(\n  y = c(0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5), \n  x = x, \n  name = \"carrots\", \n  marker = list(color = \"#FF851B\"), \n  type = \"box\"\n)\ndata &lt;- list(trace1, trace2, trace3)\nlayout &lt;- list(\n  yaxis = list(\n    title = \"normalized moisture\", \n    zeroline = FALSE\n  ), \n  boxmode = \"group\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"box-box-grouped\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx = {'day 1' 'day 1' 'day 1' 'day 1' 'day 1' 'day 1' ...\n     'day 2' 'day 2' 'day 2' 'day 2' 'day 2' 'day 2'}\ntrace1 = struct(...\n  'y', [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], ...\n  'x', x, ...\n  'name', 'kale', ...\n  'marker', struct('color', '#3D9970'), ...\n  'type', 'box');\ntrace2 = struct(...\n  'y', [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], ...\n  'x', x, ...\n  'name', 'radishes', ...\n  'marker', struct('color', '#FF4136'), ...\n  'type', 'box');\ntrace3 = struct(...\n  'y', [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], ...\n  'x', x, ...\n  'name', 'carrots', ...\n  'marker', struct('color', '#FF851B'), ...\n  'type', 'box');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct(...\n      'title', 'normalized moisture', ...\n      'zeroline', false), ...\n    'boxmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'box-box-grouped', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/box/box-grouped", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\nvar trace1 = {\n  y: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], \n  x: x, \n  name: \"kale\", \n  marker: {color: \"#3D9970\"}, \n  type: \"box\"\n};\nvar trace2 = {\n  y: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], \n  x: x, \n  name: \"radishes\", \n  marker: {color: \"#FF4136\"}, \n  type: \"box\"\n};\nvar trace3 = {\n  y: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], \n  x: x, \n  name: \"carrots\", \n  marker: {color: \"#FF851B\"}, \n  type: \"box\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  yaxis: {\n    title: \"normalized moisture\", \n    zeroline: false\n  }, \n  boxmode: \"group\"\n};\n\nvar graph_options = {filename: \"box-box-grouped\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx = {'day 1' 'day 1' 'day 1' 'day 1' 'day 1' 'day 1' ...\n     'day 2' 'day 2' 'day 2' 'day 2' 'day 2' 'day 2'}\ntrace1 = struct(...\n  'y', [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3], ...\n  'x', x, ...\n  'name', 'kale', ...\n  'marker', struct('color', '#3D9970'), ...\n  'type', 'box');\ntrace2 = struct(...\n  'y', [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2], ...\n  'x', x, ...\n  'name', 'radishes', ...\n  'marker', struct('color', '#FF4136'), ...\n  'type', 'box');\ntrace3 = struct(...\n  'y', [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5], ...\n  'x', x, ...\n  'name', 'carrots', ...\n  'marker', struct('color', '#FF851B'), ...\n  'type', 'box');\ndata = {trace1, trace2, trace3};\nlayout = struct(...\n    'yaxis', struct(...\n      'title', 'normalized moisture', ...\n      'zeroline', false), ...\n    'boxmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'box-box-grouped', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx <- c('day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1', \n       'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2')\ntrace1 <- list(\n  y = c(0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3), \n  x = x, \n  name = \"kale\", \n  marker = list(color = \"#3D9970\"), \n  type = \"box\"\n)\ntrace2 <- list(\n  y = c(0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2), \n  x = x, \n  name = \"radishes\", \n  marker = list(color = \"#FF4136\"), \n  type = \"box\"\n)\ntrace3 <- list(\n  y = c(0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5), \n  x = x, \n  name = \"carrots\", \n  marker = list(color = \"#FF851B\"), \n  type = \"box\"\n)\ndata <- list(trace1, trace2, trace3)\nlayout <- list(\n  yaxis = list(\n    title = \"normalized moisture\", \n    zeroline = FALSE\n  ), \n  boxmode = \"group\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"box-box-grouped\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nx = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\ntrace1 = Box(\n    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n    x=x,\n    name='kale',\n    marker=Marker(\n        color='#3D9970'\n    )\n)\ntrace2 = Box(\n    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n    x=x,\n    name='radishes',\n    marker=Marker(\n        color='#FF4136'\n    )\n)\ntrace3 = Box(\n    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n    x=x,\n    name='carrots',\n    marker=Marker(\n        color='#FF851B'\n    )\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    yaxis=YAxis(\n        title='normalized moisture',\n        zeroline=False\n    ),\n    boxmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='box-box-grouped', auto_open=False)"
            }, 
            "basic-box-plot": {
              "files": {
                "prepend.js": "hard-coded/chart-types/box/basic-box-plot/prepend.js", 
                "prepend.py": "hard-coded/chart-types/box/basic-box-plot/prepend.py", 
                "prepend.m": "hard-coded/chart-types/box/basic-box-plot/prepend.m", 
                "model.json": "hard-coded/chart-types/box/basic-box-plot/model.json", 
                "prepend.r": "hard-coded/chart-types/box/basic-box-plot/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/box/basic-box-plot/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\ny0 = Math.random() * 50\ny1 = Math.random() * 50 + 1\nvar trace1 = {\n  y: y0, \n  type: \"box\"\n};\nvar trace2 = {\n  y: y1, \n  type: \"box\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"box-basic-box-plot\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-box-plot", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\ny0 = np.random.randn(50)\ny1 = np.random.randn(50)+1\ntrace1 = Box(\n    y=y0\n)\ntrace2 = Box(\n    y=y1\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='box-basic-box-plot')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ny0 = randn(50)\ny1 = randn(50)+1\ntrace1 = [\n  \"y\" => y0, \n  \"type\" => \"box\"\n]\ntrace2 = [\n  \"y\" => y1, \n  \"type\" => \"box\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"box-basic-box-plot\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ny0 = randn(50)\ny1 = randn(50)+1\ntrace1 = [\n  \"y\" =&gt; y0, \n  \"type\" =&gt; \"box\"\n]\ntrace2 = [\n  \"y\" =&gt; y1, \n  \"type\" =&gt; \"box\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"box-basic-box-plot\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1001", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ny0 = rnorm(50)\ny1 = rnorm(50)+1\ntrace1 &lt;- list(\n  y = y0, \n  type = \"box\"\n)\ntrace2 &lt;- list(\n  y = y1, \n  type = \"box\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"box-basic-box-plot\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ny0 = randn(50,1);\ny1 = randn(50,1)+1;\ntrace1 = struct(...\n  'y', y0, ...\n  'type', 'box');\ntrace2 = struct(...\n  'y', y1, ...\n  'type', 'box');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'box-basic-box-plot', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/box/basic-box-plot", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\ny0 = Math.random() * 50\ny1 = Math.random() * 50 + 1\nvar trace1 = {\n  y: y0, \n  type: \"box\"\n};\nvar trace2 = {\n  y: y1, \n  type: \"box\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"box-basic-box-plot\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ny0 = randn(50,1);\ny1 = randn(50,1)+1;\ntrace1 = struct(...\n  'y', y0, ...\n  'type', 'box');\ntrace2 = struct(...\n  'y', y1, ...\n  'type', 'box');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'box-basic-box-plot', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ny0 = rnorm(50)\ny1 = rnorm(50)+1\ntrace1 <- list(\n  y = y0, \n  type = \"box\"\n)\ntrace2 <- list(\n  y = y1, \n  type = \"box\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"box-basic-box-plot\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\ny0 = np.random.randn(50)\ny1 = np.random.randn(50)+1\ntrace1 = Box(\n    y=y0\n)\ntrace2 = Box(\n    y=y1\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='box-basic-box-plot', auto_open=False)"
            }, 
            "box-plot-jitter": {
              "files": {
                "model.json": "hard-coded/chart-types/box/box-plot-jitter/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    y: [0, 1, 1, 2, 3, 5, 8, 13, 21], \n    boxpoints: \"all\", \n    jitter: 0.3, \n    pointpos: -1.8, \n    type: \"box\"\n  }\n];\n\nvar graph_options = {filename: \"box-box-plot-jitter\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "box-plot-jitter", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Box(\n        y=[0, 1, 1, 2, 3, 5, 8, 13, 21],\n        boxpoints='all',\n        jitter=0.3,\n        pointpos=-1.8\n    )\n])\n\nplot_url = py.plot(data, filename='box-box-plot-jitter')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"y\" => [0, 1, 1, 2, 3, 5, 8, 13, 21], \n    \"boxpoints\" => \"all\", \n    \"jitter\" => 0.3, \n    \"pointpos\" => -1.8, \n    \"type\" => \"box\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"box-box-plot-jitter\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"y\" =&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21], \n    \"boxpoints\" =&gt; \"all\", \n    \"jitter\" =&gt; 0.3, \n    \"pointpos\" =&gt; -1.8, \n    \"type\" =&gt; \"box\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"box-box-plot-jitter\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1002", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    y = c(0, 1, 1, 2, 3, 5, 8, 13, 21), \n    boxpoints = \"all\", \n    jitter = 0.3, \n    pointpos = -1.8, \n    type = \"box\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"box-box-plot-jitter\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'y', [0, 1, 1, 2, 3, 5, 8, 13, 21], ...\n    'boxpoints', 'all', ...\n    'jitter', 0.3, ...\n    'pointpos', -1.8, ...\n    'type', 'box')...\n};\n\nresponse = plotly(data, struct('filename', 'box-box-plot-jitter', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/box/box-plot-jitter", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    y: [0, 1, 1, 2, 3, 5, 8, 13, 21], \n    boxpoints: \"all\", \n    jitter: 0.3, \n    pointpos: -1.8, \n    type: \"box\"\n  }\n];\n\nvar graph_options = {filename: \"box-box-plot-jitter\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'y', [0, 1, 1, 2, 3, 5, 8, 13, 21], ...\n    'boxpoints', 'all', ...\n    'jitter', 0.3, ...\n    'pointpos', -1.8, ...\n    'type', 'box')...\n};\n\nresponse = plotly(data, struct('filename', 'box-box-plot-jitter', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    y = c(0, 1, 1, 2, 3, 5, 8, 13, 21), \n    boxpoints = \"all\", \n    jitter = 0.3, \n    pointpos = -1.8, \n    type = \"box\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"box-box-plot-jitter\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Box(\n        y=[0, 1, 1, 2, 3, 5, 8, 13, 21],\n        boxpoints='all',\n        jitter=0.3,\n        pointpos=-1.8\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='box-box-plot-jitter', auto_open=False)"
            }
          }, 
          "name": "box", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "box"
          }
        }, 
        "polar": {
          "path": "hard-coded/chart-types/polar", 
          "subsections": {
            "polar-scatter": {
              "files": {
                "model.json": "hard-coded/chart-types/polar/polar-scatter/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  name: \"Trial 1\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(27,158,119)\", \n    opacity: 0.7\n  }, \n  r: [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], \n  t: [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], \n  type: \"scatter\"\n};\nvar trace2 = {\n  name: \"Trial 2\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(217,95,2)\", \n    opacity: 0.7\n  }, \n  r: [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], \n  t: [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], \n  type: \"scatter\"\n};\nvar trace3 = {\n  name: \"Trial 3\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(117,112,179)\", \n    opacity: 0.7\n  }, \n  r: [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], \n  t: [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], \n  type: \"scatter\"\n};\nvar trace4 = {\n  name: \"Trial 4\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(231,41,138)\", \n    opacity: 0.7\n  }, \n  r: [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], \n  t: [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], \n  type: \"scatter\"\n};\nvar trace5 = {\n  name: \"Trial 5\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(102,166,30)\", \n    opacity: 0.7\n  }, \n  r: [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], \n  t: [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], \n  type: \"scatter\"\n};\nvar trace6 = {\n  name: \"Trial 6\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(230,171,2)\", \n    opacity: 0.7\n  }, \n  r: [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], \n  t: [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\nvar layout = {\n  title: \"Hobbs-Pearson Trials\", \n  plot_bgcolor: \"rgb(223, 223, 223)\", \n  font: {size: 15}, \n  angularaxis: {tickcolor: \"rgb(253,253,253)\"}\n};\n\nvar graph_options = {filename: \"polar-polar-scatter\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "polar-scatter", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    name='Trial 1',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(27,158,119)',\n        opacity=0.7\n    ),\n    r=[6.804985785265978, 3.389596010612268, 5.3814721107464445, 8.059540219420184, 5.318229227868589, 2.9850999356273773, 1.9665870023752283, 6.769265408206589, 4.073401898721205, 6.50437182526841, 7.556369818996649, 4.047456094066775, 7.386662496070009, 5.413624736983931, 7.470716531163242, 7.982110216939738, 4.737814080093381, 4.206453042929911, 5.478604804594065, 4.824520280697772, 5.599600609899737, 6.8667952170824735, 3.0856713662561464, 7.771810943227382, 3.6877944350967193, 5.360356685192225, 5.140446739300986, 6.045445680928888, 6.833920940193708, 3.6207694625408364, 3.9894305834039687, 5.3118244995018, 4.608213480282062, 6.640584716151912, 3.055188854482986, 7.492564163752965, 5.4850781777896715, 3.8977949966209358, 5.976245114026165, 5.447061560910957, 5.37703411681004, 4.690805787731301, 4.711640491184845, 3.629919329394875, 5.957668076372498, 5.357121284391151, 3.849235282821748, 6.250507136319218, 7.122243357145468, 3.399404233835391, 3.5105566722713313, 4.100997603660974, 4.096382100199779, 6.233583074805102, 3.939488526772935, 3.9254450773976983, 6.118132501462698, 3.9404503462852323, 7.583015573261159, 3.513202145338516],\n    t=[-30.352944361883697, -25.611459854524096, -12.425227452676078, 13.96138051872652, -4.9509328406707445, -25.692274190905437, 12.46876416157031, -4.913764107032951, -10.967380287631935, 30.814194054910676, 2.4749594311442737, 17.97554375239156, 0.7711305933623585, 6.137488485631386, -14.451963574013497, 28.184534112915948, 12.538680065954864, -8.983230337131154, 5.231285164762417, -64.48900253584051, 11.357486681772649, 3.4540747915125176, 13.924346613092862, -25.364002046782343, -16.81800638602268, -10.260051030559755, -13.212134125591882, 2.5793388653025744, 8.717574965852519, -10.675498719239487, -2.926366012522306, 25.195880754767717, 40.59032932155964, -9.121433630189772, -24.297362381339184, -3.1769445056889345, 10.85049841917252, -31.33205974736701, 4.849567462214266, 15.048276954124187, 3.2951046992599635, -6.197091873129837, -8.77857413578066, 29.549174119407287, -5.1374487928814645, 23.02686048794348, -6.634816578371129, 2.7550149918614695, 21.733250113653973, -24.816994960101756, -7.83054706253201, 28.325796210205855, 12.300977467795988, -21.563157240034112, -19.335516283813288, 26.146443170846787, -1.7060712026841085, 16.071723694996702, 2.053266302846965, -5.097911612332572]\n)\ntrace2 = Scatter(\n    name='Trial 2',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(217,95,2)',\n        opacity=0.7\n    ),\n    r=[3.488043923008057, 2.9184785763552368, 4.201827359971069, 8.227324606851074, 4.776690427237194, 3.041912303114453, 4.789947719076336, 5.663880780360856, 3.858262393172743, 8.260212881141047, 6.868624486428106, 5.7401975996748895, 6.594979282458134, 5.692703778211614, 5.337916574462772, 9.283604185175781, 5.7645908931363365, 4.028864552051332, 5.662344748373121, 0.42283723110061455, 6.201266463929336, 6.43926538131984, 5.096758513060891, 4.632081908733815, 3.4218461363102217, 4.369404703352921, 4.02833441941273, 5.80576719754376, 6.848189921425055, 3.8092955127795802, 4.385268183833586, 6.98332684554596, 7.396273186029126, 5.215125003141, 3.0861487792429205, 6.335394491488218, 6.0904147140584834, 2.4480560069033306, 5.942784020305152, 6.373129885590045, 5.454205341176391, 4.393337616563476, 4.2059446799773, 6.155542287959513, 5.119087171162872, 6.869860830828341, 4.104599860575049, 5.954348125582761, 8.092332877153778, 2.9617697054526295, 3.974012187582175, 6.373384128907529, 5.415409143179902, 3.876890919980343, 3.261446947424557, 6.145808529699159, 5.502451987192818, 5.571553295311899, 6.853049261089887, 4.140355074942654],\n    t=[14.80662578088746, 79.00634037258273, 49.02206554130045, 49.69908313603149, 54.137491082859476, 86.41932102054662, 96.95239193571373, 41.463488263612184, 67.13769169339066, 68.06103943971128, 42.68193032273406, 76.39865660811795, 42.19479347220856, 59.57788897461255, 27.510866799296068, 60.7534448322685, 68.37083279914752, 65.74802814945305, 58.53300837209963, -176.7441064584909, 61.17401857996598, 47.4515085890397, 84.4266531857914, 12.479346550525074, 72.48080276184626, 50.578831757750606, 51.560228240214684, 52.43785618126272, 51.586827992137934, 73.87294477733714, 70.21705692787259, 70.71429915430754, 82.23439442637098, 38.93539044700985, 84.7093666701594, 38.16582843645038, 61.70405365378903, 70.19695629244305, 54.454292590141606, 64.33489496861428, 58.273893146586325, 60.49982239038519, 59.155232538950266, 83.86561846759426, 47.87340989732011, 69.28260156593979, 71.1899104286971, 51.04839646304676, 59.427582415206295, 78.59873696166098, 75.75586451521559, 79.97048372322382, 73.89378024632016, 31.733411131690488, 68.08475117701943, 80.41107997857199, 48.92425070886502, 76.65025575535202, 42.18286436288056, 76.03333589453311]\n)\ntrace3 = Scatter(\n    name='Trial 3',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(117,112,179)',\n        opacity=0.7\n    ),\n    r=[1.855870835032611, 5.2869620620428215, 3.886013391943573, 6.282863313001057, 4.4534148477405155, 5.688008050761193, 7.330864282608489, 3.825660594787748, 4.989604176963506, 7.8974314697670955, 4.6566931130229525, 6.667153696311044, 4.4310062871369515, 5.346113253377259, 2.4799456958789263, 8.113477348526397, 6.081311682312096, 4.968216896207305, 5.24445392063028, 5.422207884171506, 5.792774616023354, 4.787580592225452, 6.784318637182092, 1.10893690948093, 5.138911105244, 4.042929657287297, 4.022892029681135, 4.828428791305017, 5.417378374307972, 5.378635210668265, 5.421097175459842, 7.1205619788552434, 8.349308539903586, 3.4104855883231204, 5.6283784708757345, 3.9149369761396855, 5.7639402623551526, 4.764374106798512, 5.076236267895072, 6.165558183200791, 5.105576516279834, 4.761036376933375, 4.5962495409437905, 7.504188411346776, 4.107031417919988, 6.920422299379973, 5.349128949563397, 4.798065719385607, 7.023251532304466, 5.283680965457643, 5.569071152430292, 7.383794908447646, 6.269233210443127, 2.656529645009885, 4.843984338804117, 7.247992361555254, 4.372959394411489, 6.570981081360247, 4.602479243892371, 5.6700520508263965],\n    t=[151.29425518111282, 147.1880250282001, 125.2821571123002, 87.0672979717481, 119.62789835678657, 147.74082414730458, 139.56459814488954, 101.39149710201973, 134.5601842795838, 104.02444470480259, 89.39314294483763, 123.19403140008181, 91.47434051519816, 113.33237361373538, 96.1499255673322, 93.28073452263222, 118.21556522583221, 132.32293737819631, 112.9411863909871, -179.74623313781393, 110.3035135586484, 97.7508361660772, 131.60808925703367, 115.49691923085226, 140.58118216037175, 123.39666211932598, 128.34200904453573, 107.6088103983526, 97.90468978746796, 137.12844797536522, 130.43124491245027, 112.2270844807976, 118.63020224581525, 106.05822558950737, 146.90810970600344, 90.27734955816595, 111.50528236323856, 151.0897425364386, 107.7213941567982, 111.30085499702685, 114.68027793629503, 126.56937949315531, 128.2189522328928, 125.35485719537647, 112.4180682532985, 111.79735567917727, 133.41805225814235, 105.18411684151033, 97.23103612064705, 146.66803680360073, 136.23931520140337, 121.79184419346764, 123.91132797113666, 129.86224497019268, 141.34395084996186, 123.27096774880371, 108.45882172345216, 124.41237705630053, 89.02711073868319, 134.8767011451154]\n)\ntrace4 = Scatter(\n    name='Trial 4',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(231,41,138)',\n        opacity=0.7\n    ),\n    r=[5.3724709243191295, 7.096355572040467, 4.883823903200083, 2.9201354412366496, 4.723963045684014, 7.423693950928521, 8.090946075397593, 3.3068445913715996, 6.050828482522597, 5.530232074438094, 2.47230695264053, 6.275670536862141, 2.6158961737877817, 4.653539944582694, 3.3354400138758, 4.795883604868761, 5.472711346482787, 5.881930490947868, 4.5715870720453795, 9.039861169796675, 4.6429075998956915, 3.1727677357988284, 7.044248138818528, 4.466336514107385, 6.557330289803022, 4.8208494372533615, 5.131915515212963, 3.9700122370488873, 3.4063238128284303, 6.476722963998372, 6.019218509330762, 5.664501534954291, 7.1587585225456705, 3.6007126616736462, 7.324127168758531, 2.552946156245396, 4.727133860387479, 6.971755207182515, 4.076578361066991, 4.946223407006624, 4.642155449043171, 5.3605748644110855, 5.391719067363011, 7.072524305096543, 4.101111570277392, 5.485732621016895, 6.192535286114146, 3.7687113918423396, 4.290311389760529, 7.060195369692179, 6.539691844176445, 6.679744406490943, 6.060825358695814, 4.786574040927106, 6.416686529666599, 6.70328133338789, 3.8888478104797555, 6.308591081194454, 2.4370447709043273, 6.508186347897975],\n    t=[-140.20332764140605, -168.084245433406, -166.2851413292181, 138.24886675310003, -174.4243864364084, -169.96048275947723, 176.9918226866201, -169.90141624864253, -172.64158159443713, 142.9516688139347, 172.4157463673128, 168.5193591959272, 177.82205369393654, 172.85519034865231, -146.01452170111628, 128.1772930242011, 169.16707278067625, -173.58857378893256, 173.72699270456877, -151.20610477226074, 166.26047716274937, 172.50756608236046, 173.9491839042747, -131.80684093766672, -170.63527383147678, -168.57708548315375, -166.76550342128579, 176.07048734819648, 162.29750149829133, -174.05574631254976, -178.06092985664986, 156.47126885027095, 155.23914214477145, -163.00052639405448, -170.116713265192, -170.63927248749107, 167.38314369359566, -163.0988170562564, 172.8807370063752, 163.38600768186703, 176.1825419773446, -174.579680173718, -172.33584488196067, 165.33802569398378, -172.52566426066147, 157.54287773943665, -175.88151109326037, 175.42764399370765, 142.06967472256432, -168.3407340189972, -175.8058311226083, 163.06374541935153, 171.72097499708474, -151.40390456860604, -168.2713690903466, 165.04532787828478, -177.3153366647533, 170.04241289697416, 173.59919660957283, -177.25065674571294]\n)\ntrace5 = Scatter(\n    name='Trial 5',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(102,166,30)',\n        opacity=0.7\n    ),\n    r=[7.937557871379145, 7.302746491515634, 5.929302221442996, 2.407178713166243, 5.27092188705965, 7.400596127535688, 6.810820338360006, 4.967759034422344, 6.190229370454795, 2.158518657950606, 4.00412589386977, 4.776617321633007, 4.232250451808441, 4.30765487269422, 6.200275172864116, 0.7275138485344722, 4.378006803811767, 6.004964939443091, 4.341931702915758, 10.237982935327496, 3.8021588886978415, 3.96928117013756, 5.7589801424664335, 7.674179069144705, 6.699953533011802, 5.7343103881346, 6.044275915297742, 4.3129430660866035, 3.3775452824133043, 6.367666727269062, 5.737244181549697, 3.3963514719893415, 4.216467481387725, 5.464885016717265, 7.311135577533859, 4.745400769362272, 3.9164685318876504, 7.6029729903258385, 4.125204829441439, 3.6767949496501635, 4.551235788519779, 5.606960531523096, 5.794844257485189, 5.030528155694793, 5.109586240991219, 3.4054402079637396, 6.02630612538526, 4.2211092636354195, 1.9097829365788486, 7.254669393921678, 6.268875872033599, 4.56258056659493, 4.9180579654382806, 6.83656096252698, 6.78648654914422, 4.751014334485786, 4.719926347642004, 4.9278052151809675, 4.059190587394083, 6.128338984290388],\n    t=[-101.83378577584543, -127.47839157875458, -112.2442849973417, -82.32591087119675, -114.6888556206928, -130.53786336160334, -145.0102649759552, -98.7488450072409, -124.44174882126121, -152.45411926998403, -89.29423655225057, -139.83245171792495, -91.54359518437012, -119.44216300369413, -92.45583852737828, -129.6599243163198, -131.0512350992248, -123.85291745359059, -118.08673900439605, -121.97921713765797, -121.91502996793754, -99.36184757774758, -141.46770199726927, -93.5662631891479, -126.33690140499776, -112.8349441777883, -114.38647992914663, -109.79607232724634, -102.74326471243563, -128.2467289067651, -127.79209264323043, -142.47362974536523, -161.58729418706835, -99.94061077957295, -130.16311732570668, -90.22881200957039, -122.65049121443685, -123.26775057177692, -111.99730880084306, -127.52831680551732, -117.93129533779559, -120.39163424547179, -119.38687147866949, -149.6746954924951, -107.85051750555007, -138.98993134073962, -127.5954702142739, -107.32083544041386, -117.5738074233824, -127.48166096847307, -129.91203316621693, -148.49521167061027, -135.33164137019145, -104.42165927641673, -123.87544021115426, -146.81682661802307, -107.0584854241401, -138.9025648732907, -88.89688251951031, -130.75446735589105]\n)\ntrace6 = Scatter(\n    name='Trial 6',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(230,171,2)',\n        opacity=0.7\n    ),\n    r=[8.46918052789063, 5.821997567373959, 6.1409183282181425, 5.831724284786043, 5.546754471857236, 5.62748770920125, 3.94832897601986, 6.490184614609525, 5.320618245151644, 3.2435930414929843, 6.444085331576761, 3.363778100648707, 6.463116810505407, 4.730944925781221, 7.796578411114142, 4.570127829915901, 3.926206816002813, 5.254348139870139, 4.8384111066133375, 8.694523998982934, 4.39953181821818, 5.8564839051788535, 3.62157703921442, 8.894912373110186, 5.494542836078211, 5.968980890853802, 6.047899573604184, 5.384671396722035, 5.381220018196653, 5.11157462273727, 4.7705611050578, 3.0983308826347407, 1.665083171936659, 6.740258533332946, 5.5944949288820025, 6.879630825669177, 4.382792466280775, 6.410843616485085, 5.154204317772818, 4.01515851865648, 4.9391488682598155, 5.298297314485713, 5.490417176946796, 2.6237512593812404, 5.9535886616652665, 3.3014793719195046, 4.954889001100974, 5.500053669614178, 4.4505123495497285, 5.786624513349857, 4.906834424064605, 2.6299694734469274, 3.769703608047238, 7.396735715500286, 5.7644819019579545, 2.794585195883112, 5.782033269824353, 3.4853519176219963, 6.500653598620165, 4.748640710129176],\n    t=[-66.53583632728323, -84.514422676922, -63.339741699567846, -24.146812744223833, -59.70124532256676, -88.06537267996578, -98.44420453532204, -49.15839681719936, -73.63622331202959, -17.923874678608904, -38.41239945460549, -66.34036237792131, -40.88883873919996, -52.46063321002169, -52.61046255912479, -7.039351050913894, -57.23545869215697, -71.64220350197985, -52.345396169095466, -92.78303867354904, -47.18716305503351, -41.969208462875166, -82.14422824993427, -59.43916560317718, -79.19482259319774, -62.29990853531319, -65.53790403937941, -48.9060554475786, -37.74831103800929, -78.05333345828834, -71.87311766307504, -41.891092825900685, -53.11545548549721, -52.997628097314845, -87.0843610179252, -43.61190483837573, -48.79799840560851, -82.56680315713163, -47.90996299570176, -46.57048558531105, -54.5004832176089, -65.90072712679752, -66.87331746360131, -75.48080725209734, -54.777693866880114, -42.5983345913628, -74.50816626907293, -47.11021844342552, -22.356873183328428, -84.19298674498425, -78.50528475620209, -65.0363717923471, -66.51373368133282, -63.52677656175937, -77.80907855131592, -68.51017974013602, -51.296869310885135, -68.33991302765452, -38.631733068443026, -77.85184858511114]\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5, trace6])\nlayout = Layout(\n    title='Hobbs-Pearson Trials',\n    plot_bgcolor='rgb(223, 223, 223)',\n    font=Font(\n        size=15\n    ),\n    angularaxis=AngularAxis(\n        tickcolor='rgb(253,253,253)'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='polar-polar-scatter')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"name\" => \"Trial 1\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(27,158,119)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], \n  \"t\" => [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"name\" => \"Trial 2\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(217,95,2)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], \n  \"t\" => [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"name\" => \"Trial 3\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(117,112,179)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], \n  \"t\" => [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"name\" => \"Trial 4\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(231,41,138)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], \n  \"t\" => [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], \n  \"type\" => \"scatter\"\n]\ntrace5 = [\n  \"name\" => \"Trial 5\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(102,166,30)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], \n  \"t\" => [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], \n  \"type\" => \"scatter\"\n]\ntrace6 = [\n  \"name\" => \"Trial 6\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"white\"], \n    \"size\" => 110, \n    \"color\" => \"rgb(230,171,2)\", \n    \"opacity\" => 0.7\n  ], \n  \"r\" => [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], \n  \"t\" => [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = [\n  \"title\" => \"Hobbs-Pearson Trials\", \n  \"plot_bgcolor\" => \"rgb(223, 223, 223)\", \n  \"font\" => [\"size\" => 15], \n  \"angularaxis\" => [\"tickcolor\" => \"rgb(253,253,253)\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"polar-polar-scatter\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"name\" =&gt; \"Trial 1\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(27,158,119)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], \n  \"t\" =&gt; [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"name\" =&gt; \"Trial 2\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(217,95,2)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], \n  \"t\" =&gt; [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"name\" =&gt; \"Trial 3\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(117,112,179)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], \n  \"t\" =&gt; [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"name\" =&gt; \"Trial 4\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(231,41,138)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], \n  \"t\" =&gt; [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], \n  \"type\" =&gt; \"scatter\"\n]\ntrace5 = [\n  \"name\" =&gt; \"Trial 5\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(102,166,30)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], \n  \"t\" =&gt; [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], \n  \"type\" =&gt; \"scatter\"\n]\ntrace6 = [\n  \"name\" =&gt; \"Trial 6\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"white\"], \n    \"size\" =&gt; 110, \n    \"color\" =&gt; \"rgb(230,171,2)\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"r\" =&gt; [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], \n  \"t\" =&gt; [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = [\n  \"title\" =&gt; \"Hobbs-Pearson Trials\", \n  \"plot_bgcolor\" =&gt; \"rgb(223, 223, 223)\", \n  \"font\" =&gt; [\"size\" =&gt; 15], \n  \"angularaxis\" =&gt; [\"tickcolor\" =&gt; \"rgb(253,253,253)\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"polar-polar-scatter\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1003", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  name = \"Trial 1\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(27,158,119)\", \n    opacity = 0.7\n  ), \n  r = c(6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534), \n  t = c(-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  name = \"Trial 2\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(217,95,2)\", \n    opacity = 0.7\n  ), \n  r = c(3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494), \n  t = c(14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945), \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  name = \"Trial 3\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(117,112,179)\", \n    opacity = 0.7\n  ), \n  r = c(1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083), \n  t = c(151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145), \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  name = \"Trial 4\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(231,41,138)\", \n    opacity = 0.7\n  ), \n  r = c(5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479), \n  t = c(-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746), \n  type = \"scatter\"\n)\ntrace5 &lt;- list(\n  name = \"Trial 5\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(102,166,30)\", \n    opacity = 0.7\n  ), \n  r = c(7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429), \n  t = c(-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356), \n  type = \"scatter\"\n)\ntrace6 &lt;- list(\n  name = \"Trial 6\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(230,171,2)\", \n    opacity = 0.7\n  ), \n  r = c(8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013), \n  t = c(-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4, trace5, trace6)\nlayout &lt;- list(\n  title = \"Hobbs-Pearson Trials\", \n  plot_bgcolor = \"rgb(223, 223, 223)\", \n  font = list(size = 15), \n  angularaxis = list(tickcolor = \"rgb(253,253,253)\")\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-scatter\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'name', 'Trial 1', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(27,158,119)', ...\n    'opacity', 0.7), ...\n  'r', [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], ...\n  't', [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'name', 'Trial 2', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(217,95,2)', ...\n    'opacity', 0.7), ...\n  'r', [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], ...\n  't', [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'name', 'Trial 3', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(117,112,179)', ...\n    'opacity', 0.7), ...\n  'r', [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], ...\n  't', [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'name', 'Trial 4', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(231,41,138)', ...\n    'opacity', 0.7), ...\n  'r', [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], ...\n  't', [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'name', 'Trial 5', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(102,166,30)', ...\n    'opacity', 0.7), ...\n  'r', [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], ...\n  't', [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], ...\n  'type', 'scatter');\ntrace6 = struct(...\n  'name', 'Trial 6', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(230,171,2)', ...\n    'opacity', 0.7), ...\n  'r', [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], ...\n  't', [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5, trace6};\nlayout = struct(...\n    'title', 'Hobbs-Pearson Trials', ...\n    'plot_bgcolor', 'rgb(223, 223, 223)', ...\n    'font', struct('size', 15), ...\n    'angularaxis', struct('tickcolor', 'rgb(253,253,253)'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-scatter', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/polar/polar-scatter", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  name: \"Trial 1\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(27,158,119)\", \n    opacity: 0.7\n  }, \n  r: [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], \n  t: [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], \n  type: \"scatter\"\n};\nvar trace2 = {\n  name: \"Trial 2\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(217,95,2)\", \n    opacity: 0.7\n  }, \n  r: [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], \n  t: [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], \n  type: \"scatter\"\n};\nvar trace3 = {\n  name: \"Trial 3\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(117,112,179)\", \n    opacity: 0.7\n  }, \n  r: [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], \n  t: [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], \n  type: \"scatter\"\n};\nvar trace4 = {\n  name: \"Trial 4\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(231,41,138)\", \n    opacity: 0.7\n  }, \n  r: [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], \n  t: [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], \n  type: \"scatter\"\n};\nvar trace5 = {\n  name: \"Trial 5\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(102,166,30)\", \n    opacity: 0.7\n  }, \n  r: [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], \n  t: [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], \n  type: \"scatter\"\n};\nvar trace6 = {\n  name: \"Trial 6\", \n  mode: \"markers\", \n  marker: {\n    line: {color: \"white\"}, \n    size: 110, \n    color: \"rgb(230,171,2)\", \n    opacity: 0.7\n  }, \n  r: [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], \n  t: [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\nvar layout = {\n  title: \"Hobbs-Pearson Trials\", \n  plot_bgcolor: \"rgb(223, 223, 223)\", \n  font: {size: 15}, \n  angularaxis: {tickcolor: \"rgb(253,253,253)\"}\n};\n\nvar graph_options = {filename: \"polar-polar-scatter\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'name', 'Trial 1', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(27,158,119)', ...\n    'opacity', 0.7), ...\n  'r', [6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534], ...\n  't', [-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'name', 'Trial 2', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(217,95,2)', ...\n    'opacity', 0.7), ...\n  'r', [3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494], ...\n  't', [14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945], ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'name', 'Trial 3', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(117,112,179)', ...\n    'opacity', 0.7), ...\n  'r', [1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083], ...\n  't', [151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145], ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'name', 'Trial 4', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(231,41,138)', ...\n    'opacity', 0.7), ...\n  'r', [5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479], ...\n  't', [-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746], ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'name', 'Trial 5', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(102,166,30)', ...\n    'opacity', 0.7), ...\n  'r', [7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429], ...\n  't', [-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356], ...\n  'type', 'scatter');\ntrace6 = struct(...\n  'name', 'Trial 6', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct('color', 'white'), ...\n    'size', 110, ...\n    'color', 'rgb(230,171,2)', ...\n    'opacity', 0.7), ...\n  'r', [8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013], ...\n  't', [-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851], ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5, trace6};\nlayout = struct(...\n    'title', 'Hobbs-Pearson Trials', ...\n    'plot_bgcolor', 'rgb(223, 223, 223)', ...\n    'font', struct('size', 15), ...\n    'angularaxis', struct('tickcolor', 'rgb(253,253,253)'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-scatter', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  name = \"Trial 1\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(27,158,119)\", \n    opacity = 0.7\n  ), \n  r = c(6.80498578527, 3.38959601061, 5.38147211075, 8.05954021942, 5.31822922787, 2.98509993563, 1.96658700238, 6.76926540821, 4.07340189872, 6.50437182527, 7.556369819, 4.04745609407, 7.38666249607, 5.41362473698, 7.47071653116, 7.98211021694, 4.73781408009, 4.20645304293, 5.47860480459, 4.8245202807, 5.5996006099, 6.86679521708, 3.08567136626, 7.77181094323, 3.6877944351, 5.36035668519, 5.1404467393, 6.04544568093, 6.83392094019, 3.62076946254, 3.9894305834, 5.3118244995, 4.60821348028, 6.64058471615, 3.05518885448, 7.49256416375, 5.48507817779, 3.89779499662, 5.97624511403, 5.44706156091, 5.37703411681, 4.69080578773, 4.71164049118, 3.62991932939, 5.95766807637, 5.35712128439, 3.84923528282, 6.25050713632, 7.12224335715, 3.39940423384, 3.51055667227, 4.10099760366, 4.0963821002, 6.23358307481, 3.93948852677, 3.9254450774, 6.11813250146, 3.94045034629, 7.58301557326, 3.51320214534), \n  t = c(-30.3529443619, -25.6114598545, -12.4252274527, 13.9613805187, -4.95093284067, -25.6922741909, 12.4687641616, -4.91376410703, -10.9673802876, 30.8141940549, 2.47495943114, 17.9755437524, 0.771130593362, 6.13748848563, -14.451963574, 28.1845341129, 12.538680066, -8.98323033713, 5.23128516476, -64.4890025358, 11.3574866818, 3.45407479151, 13.9243466131, -25.3640020468, -16.818006386, -10.2600510306, -13.2121341256, 2.5793388653, 8.71757496585, -10.6754987192, -2.92636601252, 25.1958807548, 40.5903293216, -9.12143363019, -24.2973623813, -3.17694450569, 10.8504984192, -31.3320597474, 4.84956746221, 15.0482769541, 3.29510469926, -6.19709187313, -8.77857413578, 29.5491741194, -5.13744879288, 23.0268604879, -6.63481657837, 2.75501499186, 21.7332501137, -24.8169949601, -7.83054706253, 28.3257962102, 12.3009774678, -21.56315724, -19.3355162838, 26.1464431708, -1.70607120268, 16.071723695, 2.05326630285, -5.09791161233), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  name = \"Trial 2\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(217,95,2)\", \n    opacity = 0.7\n  ), \n  r = c(3.48804392301, 2.91847857636, 4.20182735997, 8.22732460685, 4.77669042724, 3.04191230311, 4.78994771908, 5.66388078036, 3.85826239317, 8.26021288114, 6.86862448643, 5.74019759967, 6.59497928246, 5.69270377821, 5.33791657446, 9.28360418518, 5.76459089314, 4.02886455205, 5.66234474837, 0.422837231101, 6.20126646393, 6.43926538132, 5.09675851306, 4.63208190873, 3.42184613631, 4.36940470335, 4.02833441941, 5.80576719754, 6.84818992143, 3.80929551278, 4.38526818383, 6.98332684555, 7.39627318603, 5.21512500314, 3.08614877924, 6.33539449149, 6.09041471406, 2.4480560069, 5.94278402031, 6.37312988559, 5.45420534118, 4.39333761656, 4.20594467998, 6.15554228796, 5.11908717116, 6.86986083083, 4.10459986058, 5.95434812558, 8.09233287715, 2.96176970545, 3.97401218758, 6.37338412891, 5.41540914318, 3.87689091998, 3.26144694742, 6.1458085297, 5.50245198719, 5.57155329531, 6.85304926109, 4.14035507494), \n  t = c(14.8066257809, 79.0063403726, 49.0220655413, 49.699083136, 54.1374910829, 86.4193210205, 96.9523919357, 41.4634882636, 67.1376916934, 68.0610394397, 42.6819303227, 76.3986566081, 42.1947934722, 59.5778889746, 27.5108667993, 60.7534448323, 68.3708327991, 65.7480281495, 58.5330083721, -176.744106458, 61.17401858, 47.451508589, 84.4266531858, 12.4793465505, 72.4808027618, 50.5788317578, 51.5602282402, 52.4378561813, 51.5868279921, 73.8729447773, 70.2170569279, 70.7142991543, 82.2343944264, 38.935390447, 84.7093666702, 38.1658284365, 61.7040536538, 70.1969562924, 54.4542925901, 64.3348949686, 58.2738931466, 60.4998223904, 59.155232539, 83.8656184676, 47.8734098973, 69.2826015659, 71.1899104287, 51.048396463, 59.4275824152, 78.5987369617, 75.7558645152, 79.9704837232, 73.8937802463, 31.7334111317, 68.084751177, 80.4110799786, 48.9242507089, 76.6502557554, 42.1828643629, 76.0333358945), \n  type = \"scatter\"\n)\ntrace3 <- list(\n  name = \"Trial 3\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(117,112,179)\", \n    opacity = 0.7\n  ), \n  r = c(1.85587083503, 5.28696206204, 3.88601339194, 6.282863313, 4.45341484774, 5.68800805076, 7.33086428261, 3.82566059479, 4.98960417696, 7.89743146977, 4.65669311302, 6.66715369631, 4.43100628714, 5.34611325338, 2.47994569588, 8.11347734853, 6.08131168231, 4.96821689621, 5.24445392063, 5.42220788417, 5.79277461602, 4.78758059223, 6.78431863718, 1.10893690948, 5.13891110524, 4.04292965729, 4.02289202968, 4.82842879131, 5.41737837431, 5.37863521067, 5.42109717546, 7.12056197886, 8.3493085399, 3.41048558832, 5.62837847088, 3.91493697614, 5.76394026236, 4.7643741068, 5.0762362679, 6.1655581832, 5.10557651628, 4.76103637693, 4.59624954094, 7.50418841135, 4.10703141792, 6.92042229938, 5.34912894956, 4.79806571939, 7.0232515323, 5.28368096546, 5.56907115243, 7.38379490845, 6.26923321044, 2.65652964501, 4.8439843388, 7.24799236156, 4.37295939441, 6.57098108136, 4.60247924389, 5.67005205083), \n  t = c(151.294255181, 147.188025028, 125.282157112, 87.0672979717, 119.627898357, 147.740824147, 139.564598145, 101.391497102, 134.56018428, 104.024444705, 89.3931429448, 123.1940314, 91.4743405152, 113.332373614, 96.1499255673, 93.2807345226, 118.215565226, 132.322937378, 112.941186391, -179.746233138, 110.303513559, 97.7508361661, 131.608089257, 115.496919231, 140.58118216, 123.396662119, 128.342009045, 107.608810398, 97.9046897875, 137.128447975, 130.431244912, 112.227084481, 118.630202246, 106.05822559, 146.908109706, 90.2773495582, 111.505282363, 151.089742536, 107.721394157, 111.300854997, 114.680277936, 126.569379493, 128.218952233, 125.354857195, 112.418068253, 111.797355679, 133.418052258, 105.184116842, 97.2310361206, 146.668036804, 136.239315201, 121.791844193, 123.911327971, 129.86224497, 141.34395085, 123.270967749, 108.458821723, 124.412377056, 89.0271107387, 134.876701145), \n  type = \"scatter\"\n)\ntrace4 <- list(\n  name = \"Trial 4\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(231,41,138)\", \n    opacity = 0.7\n  ), \n  r = c(5.37247092432, 7.09635557204, 4.8838239032, 2.92013544124, 4.72396304568, 7.42369395093, 8.0909460754, 3.30684459137, 6.05082848252, 5.53023207444, 2.47230695264, 6.27567053686, 2.61589617379, 4.65353994458, 3.33544001388, 4.79588360487, 5.47271134648, 5.88193049095, 4.57158707205, 9.0398611698, 4.6429075999, 3.1727677358, 7.04424813882, 4.46633651411, 6.5573302898, 4.82084943725, 5.13191551521, 3.97001223705, 3.40632381283, 6.476722964, 6.01921850933, 5.66450153495, 7.15875852255, 3.60071266167, 7.32412716876, 2.55294615625, 4.72713386039, 6.97175520718, 4.07657836107, 4.94622340701, 4.64215544904, 5.36057486441, 5.39171906736, 7.0725243051, 4.10111157028, 5.48573262102, 6.19253528611, 3.76871139184, 4.29031138976, 7.06019536969, 6.53969184418, 6.67974440649, 6.0608253587, 4.78657404093, 6.41668652967, 6.70328133339, 3.88884781048, 6.30859108119, 2.4370447709, 6.5081863479), \n  t = c(-140.203327641, -168.084245433, -166.285141329, 138.248866753, -174.424386436, -169.960482759, 176.991822687, -169.901416249, -172.641581594, 142.951668814, 172.415746367, 168.519359196, 177.822053694, 172.855190349, -146.014521701, 128.177293024, 169.167072781, -173.588573789, 173.726992705, -151.206104772, 166.260477163, 172.507566082, 173.949183904, -131.806840938, -170.635273831, -168.577085483, -166.765503421, 176.070487348, 162.297501498, -174.055746313, -178.060929857, 156.47126885, 155.239142145, -163.000526394, -170.116713265, -170.639272487, 167.383143694, -163.098817056, 172.880737006, 163.386007682, 176.182541977, -174.579680174, -172.335844882, 165.338025694, -172.525664261, 157.542877739, -175.881511093, 175.427643994, 142.069674723, -168.340734019, -175.805831123, 163.063745419, 171.720974997, -151.403904569, -168.27136909, 165.045327878, -177.315336665, 170.042412897, 173.59919661, -177.250656746), \n  type = \"scatter\"\n)\ntrace5 <- list(\n  name = \"Trial 5\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(102,166,30)\", \n    opacity = 0.7\n  ), \n  r = c(7.93755787138, 7.30274649152, 5.92930222144, 2.40717871317, 5.27092188706, 7.40059612754, 6.81082033836, 4.96775903442, 6.19022937045, 2.15851865795, 4.00412589387, 4.77661732163, 4.23225045181, 4.30765487269, 6.20027517286, 0.727513848534, 4.37800680381, 6.00496493944, 4.34193170292, 10.2379829353, 3.8021588887, 3.96928117014, 5.75898014247, 7.67417906914, 6.69995353301, 5.73431038813, 6.0442759153, 4.31294306609, 3.37754528241, 6.36766672727, 5.73724418155, 3.39635147199, 4.21646748139, 5.46488501672, 7.31113557753, 4.74540076936, 3.91646853189, 7.60297299033, 4.12520482944, 3.67679494965, 4.55123578852, 5.60696053152, 5.79484425749, 5.03052815569, 5.10958624099, 3.40544020796, 6.02630612539, 4.22110926364, 1.90978293658, 7.25466939392, 6.26887587203, 4.56258056659, 4.91805796544, 6.83656096253, 6.78648654914, 4.75101433449, 4.71992634764, 4.92780521518, 4.05919058739, 6.12833898429), \n  t = c(-101.833785776, -127.478391579, -112.244284997, -82.3259108712, -114.688855621, -130.537863362, -145.010264976, -98.7488450072, -124.441748821, -152.45411927, -89.2942365523, -139.832451718, -91.5435951844, -119.442163004, -92.4558385274, -129.659924316, -131.051235099, -123.852917454, -118.086739004, -121.979217138, -121.915029968, -99.3618475777, -141.467701997, -93.5662631891, -126.336901405, -112.834944178, -114.386479929, -109.796072327, -102.743264712, -128.246728907, -127.792092643, -142.473629745, -161.587294187, -99.9406107796, -130.163117326, -90.2288120096, -122.650491214, -123.267750572, -111.997308801, -127.528316806, -117.931295338, -120.391634245, -119.386871479, -149.674695492, -107.850517506, -138.989931341, -127.595470214, -107.32083544, -117.573807423, -127.481660968, -129.912033166, -148.495211671, -135.33164137, -104.421659276, -123.875440211, -146.816826618, -107.058485424, -138.902564873, -88.8968825195, -130.754467356), \n  type = \"scatter\"\n)\ntrace6 <- list(\n  name = \"Trial 6\", \n  mode = \"markers\", \n  marker = list(\n    line = list(color = \"white\"), \n    size = 110, \n    color = \"rgb(230,171,2)\", \n    opacity = 0.7\n  ), \n  r = c(8.46918052789, 5.82199756737, 6.14091832822, 5.83172428479, 5.54675447186, 5.6274877092, 3.94832897602, 6.49018461461, 5.32061824515, 3.24359304149, 6.44408533158, 3.36377810065, 6.46311681051, 4.73094492578, 7.79657841111, 4.57012782992, 3.926206816, 5.25434813987, 4.83841110661, 8.69452399898, 4.39953181822, 5.85648390518, 3.62157703921, 8.89491237311, 5.49454283608, 5.96898089085, 6.0478995736, 5.38467139672, 5.3812200182, 5.11157462274, 4.77056110506, 3.09833088263, 1.66508317194, 6.74025853333, 5.59449492888, 6.87963082567, 4.38279246628, 6.41084361649, 5.15420431777, 4.01515851866, 4.93914886826, 5.29829731449, 5.49041717695, 2.62375125938, 5.95358866167, 3.30147937192, 4.9548890011, 5.50005366961, 4.45051234955, 5.78662451335, 4.90683442406, 2.62996947345, 3.76970360805, 7.3967357155, 5.76448190196, 2.79458519588, 5.78203326982, 3.48535191762, 6.50065359862, 4.74864071013), \n  t = c(-66.5358363273, -84.5144226769, -63.3397416996, -24.1468127442, -59.7012453226, -88.06537268, -98.4442045353, -49.1583968172, -73.636223312, -17.9238746786, -38.4123994546, -66.3403623779, -40.8888387392, -52.46063321, -52.6104625591, -7.03935105091, -57.2354586922, -71.642203502, -52.3453961691, -92.7830386735, -47.187163055, -41.9692084629, -82.1442282499, -59.4391656032, -79.1948225932, -62.2999085353, -65.5379040394, -48.9060554476, -37.748311038, -78.0533334583, -71.8731176631, -41.8910928259, -53.1154554855, -52.9976280973, -87.0843610179, -43.6119048384, -48.7979984056, -82.5668031571, -47.9099629957, -46.5704855853, -54.5004832176, -65.9007271268, -66.8733174636, -75.4808072521, -54.7776938669, -42.5983345914, -74.5081662691, -47.1102184434, -22.3568731833, -84.192986745, -78.5052847562, -65.0363717923, -66.5137336813, -63.5267765618, -77.8090785513, -68.5101797401, -51.2968693109, -68.3399130277, -38.6317330684, -77.8518485851), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4, trace5, trace6)\nlayout <- list(\n  title = \"Hobbs-Pearson Trials\", \n  plot_bgcolor = \"rgb(223, 223, 223)\", \n  font = list(size = 15), \n  angularaxis = list(tickcolor = \"rgb(253,253,253)\")\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-scatter\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    name='Trial 1',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(27,158,119)',\n        opacity=0.7\n    ),\n    r=[6.804985785265978, 3.389596010612268, 5.3814721107464445, 8.059540219420184, 5.318229227868589, 2.9850999356273773, 1.9665870023752283, 6.769265408206589, 4.073401898721205, 6.50437182526841, 7.556369818996649, 4.047456094066775, 7.386662496070009, 5.413624736983931, 7.470716531163242, 7.982110216939738, 4.737814080093381, 4.206453042929911, 5.478604804594065, 4.824520280697772, 5.599600609899737, 6.8667952170824735, 3.0856713662561464, 7.771810943227382, 3.6877944350967193, 5.360356685192225, 5.140446739300986, 6.045445680928888, 6.833920940193708, 3.6207694625408364, 3.9894305834039687, 5.3118244995018, 4.608213480282062, 6.640584716151912, 3.055188854482986, 7.492564163752965, 5.4850781777896715, 3.8977949966209358, 5.976245114026165, 5.447061560910957, 5.37703411681004, 4.690805787731301, 4.711640491184845, 3.629919329394875, 5.957668076372498, 5.357121284391151, 3.849235282821748, 6.250507136319218, 7.122243357145468, 3.399404233835391, 3.5105566722713313, 4.100997603660974, 4.096382100199779, 6.233583074805102, 3.939488526772935, 3.9254450773976983, 6.118132501462698, 3.9404503462852323, 7.583015573261159, 3.513202145338516],\n    t=[-30.352944361883697, -25.611459854524096, -12.425227452676078, 13.96138051872652, -4.9509328406707445, -25.692274190905437, 12.46876416157031, -4.913764107032951, -10.967380287631935, 30.814194054910676, 2.4749594311442737, 17.97554375239156, 0.7711305933623585, 6.137488485631386, -14.451963574013497, 28.184534112915948, 12.538680065954864, -8.983230337131154, 5.231285164762417, -64.48900253584051, 11.357486681772649, 3.4540747915125176, 13.924346613092862, -25.364002046782343, -16.81800638602268, -10.260051030559755, -13.212134125591882, 2.5793388653025744, 8.717574965852519, -10.675498719239487, -2.926366012522306, 25.195880754767717, 40.59032932155964, -9.121433630189772, -24.297362381339184, -3.1769445056889345, 10.85049841917252, -31.33205974736701, 4.849567462214266, 15.048276954124187, 3.2951046992599635, -6.197091873129837, -8.77857413578066, 29.549174119407287, -5.1374487928814645, 23.02686048794348, -6.634816578371129, 2.7550149918614695, 21.733250113653973, -24.816994960101756, -7.83054706253201, 28.325796210205855, 12.300977467795988, -21.563157240034112, -19.335516283813288, 26.146443170846787, -1.7060712026841085, 16.071723694996702, 2.053266302846965, -5.097911612332572]\n)\ntrace2 = Scatter(\n    name='Trial 2',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(217,95,2)',\n        opacity=0.7\n    ),\n    r=[3.488043923008057, 2.9184785763552368, 4.201827359971069, 8.227324606851074, 4.776690427237194, 3.041912303114453, 4.789947719076336, 5.663880780360856, 3.858262393172743, 8.260212881141047, 6.868624486428106, 5.7401975996748895, 6.594979282458134, 5.692703778211614, 5.337916574462772, 9.283604185175781, 5.7645908931363365, 4.028864552051332, 5.662344748373121, 0.42283723110061455, 6.201266463929336, 6.43926538131984, 5.096758513060891, 4.632081908733815, 3.4218461363102217, 4.369404703352921, 4.02833441941273, 5.80576719754376, 6.848189921425055, 3.8092955127795802, 4.385268183833586, 6.98332684554596, 7.396273186029126, 5.215125003141, 3.0861487792429205, 6.335394491488218, 6.0904147140584834, 2.4480560069033306, 5.942784020305152, 6.373129885590045, 5.454205341176391, 4.393337616563476, 4.2059446799773, 6.155542287959513, 5.119087171162872, 6.869860830828341, 4.104599860575049, 5.954348125582761, 8.092332877153778, 2.9617697054526295, 3.974012187582175, 6.373384128907529, 5.415409143179902, 3.876890919980343, 3.261446947424557, 6.145808529699159, 5.502451987192818, 5.571553295311899, 6.853049261089887, 4.140355074942654],\n    t=[14.80662578088746, 79.00634037258273, 49.02206554130045, 49.69908313603149, 54.137491082859476, 86.41932102054662, 96.95239193571373, 41.463488263612184, 67.13769169339066, 68.06103943971128, 42.68193032273406, 76.39865660811795, 42.19479347220856, 59.57788897461255, 27.510866799296068, 60.7534448322685, 68.37083279914752, 65.74802814945305, 58.53300837209963, -176.7441064584909, 61.17401857996598, 47.4515085890397, 84.4266531857914, 12.479346550525074, 72.48080276184626, 50.578831757750606, 51.560228240214684, 52.43785618126272, 51.586827992137934, 73.87294477733714, 70.21705692787259, 70.71429915430754, 82.23439442637098, 38.93539044700985, 84.7093666701594, 38.16582843645038, 61.70405365378903, 70.19695629244305, 54.454292590141606, 64.33489496861428, 58.273893146586325, 60.49982239038519, 59.155232538950266, 83.86561846759426, 47.87340989732011, 69.28260156593979, 71.1899104286971, 51.04839646304676, 59.427582415206295, 78.59873696166098, 75.75586451521559, 79.97048372322382, 73.89378024632016, 31.733411131690488, 68.08475117701943, 80.41107997857199, 48.92425070886502, 76.65025575535202, 42.18286436288056, 76.03333589453311]\n)\ntrace3 = Scatter(\n    name='Trial 3',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(117,112,179)',\n        opacity=0.7\n    ),\n    r=[1.855870835032611, 5.2869620620428215, 3.886013391943573, 6.282863313001057, 4.4534148477405155, 5.688008050761193, 7.330864282608489, 3.825660594787748, 4.989604176963506, 7.8974314697670955, 4.6566931130229525, 6.667153696311044, 4.4310062871369515, 5.346113253377259, 2.4799456958789263, 8.113477348526397, 6.081311682312096, 4.968216896207305, 5.24445392063028, 5.422207884171506, 5.792774616023354, 4.787580592225452, 6.784318637182092, 1.10893690948093, 5.138911105244, 4.042929657287297, 4.022892029681135, 4.828428791305017, 5.417378374307972, 5.378635210668265, 5.421097175459842, 7.1205619788552434, 8.349308539903586, 3.4104855883231204, 5.6283784708757345, 3.9149369761396855, 5.7639402623551526, 4.764374106798512, 5.076236267895072, 6.165558183200791, 5.105576516279834, 4.761036376933375, 4.5962495409437905, 7.504188411346776, 4.107031417919988, 6.920422299379973, 5.349128949563397, 4.798065719385607, 7.023251532304466, 5.283680965457643, 5.569071152430292, 7.383794908447646, 6.269233210443127, 2.656529645009885, 4.843984338804117, 7.247992361555254, 4.372959394411489, 6.570981081360247, 4.602479243892371, 5.6700520508263965],\n    t=[151.29425518111282, 147.1880250282001, 125.2821571123002, 87.0672979717481, 119.62789835678657, 147.74082414730458, 139.56459814488954, 101.39149710201973, 134.5601842795838, 104.02444470480259, 89.39314294483763, 123.19403140008181, 91.47434051519816, 113.33237361373538, 96.1499255673322, 93.28073452263222, 118.21556522583221, 132.32293737819631, 112.9411863909871, -179.74623313781393, 110.3035135586484, 97.7508361660772, 131.60808925703367, 115.49691923085226, 140.58118216037175, 123.39666211932598, 128.34200904453573, 107.6088103983526, 97.90468978746796, 137.12844797536522, 130.43124491245027, 112.2270844807976, 118.63020224581525, 106.05822558950737, 146.90810970600344, 90.27734955816595, 111.50528236323856, 151.0897425364386, 107.7213941567982, 111.30085499702685, 114.68027793629503, 126.56937949315531, 128.2189522328928, 125.35485719537647, 112.4180682532985, 111.79735567917727, 133.41805225814235, 105.18411684151033, 97.23103612064705, 146.66803680360073, 136.23931520140337, 121.79184419346764, 123.91132797113666, 129.86224497019268, 141.34395084996186, 123.27096774880371, 108.45882172345216, 124.41237705630053, 89.02711073868319, 134.8767011451154]\n)\ntrace4 = Scatter(\n    name='Trial 4',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(231,41,138)',\n        opacity=0.7\n    ),\n    r=[5.3724709243191295, 7.096355572040467, 4.883823903200083, 2.9201354412366496, 4.723963045684014, 7.423693950928521, 8.090946075397593, 3.3068445913715996, 6.050828482522597, 5.530232074438094, 2.47230695264053, 6.275670536862141, 2.6158961737877817, 4.653539944582694, 3.3354400138758, 4.795883604868761, 5.472711346482787, 5.881930490947868, 4.5715870720453795, 9.039861169796675, 4.6429075998956915, 3.1727677357988284, 7.044248138818528, 4.466336514107385, 6.557330289803022, 4.8208494372533615, 5.131915515212963, 3.9700122370488873, 3.4063238128284303, 6.476722963998372, 6.019218509330762, 5.664501534954291, 7.1587585225456705, 3.6007126616736462, 7.324127168758531, 2.552946156245396, 4.727133860387479, 6.971755207182515, 4.076578361066991, 4.946223407006624, 4.642155449043171, 5.3605748644110855, 5.391719067363011, 7.072524305096543, 4.101111570277392, 5.485732621016895, 6.192535286114146, 3.7687113918423396, 4.290311389760529, 7.060195369692179, 6.539691844176445, 6.679744406490943, 6.060825358695814, 4.786574040927106, 6.416686529666599, 6.70328133338789, 3.8888478104797555, 6.308591081194454, 2.4370447709043273, 6.508186347897975],\n    t=[-140.20332764140605, -168.084245433406, -166.2851413292181, 138.24886675310003, -174.4243864364084, -169.96048275947723, 176.9918226866201, -169.90141624864253, -172.64158159443713, 142.9516688139347, 172.4157463673128, 168.5193591959272, 177.82205369393654, 172.85519034865231, -146.01452170111628, 128.1772930242011, 169.16707278067625, -173.58857378893256, 173.72699270456877, -151.20610477226074, 166.26047716274937, 172.50756608236046, 173.9491839042747, -131.80684093766672, -170.63527383147678, -168.57708548315375, -166.76550342128579, 176.07048734819648, 162.29750149829133, -174.05574631254976, -178.06092985664986, 156.47126885027095, 155.23914214477145, -163.00052639405448, -170.116713265192, -170.63927248749107, 167.38314369359566, -163.0988170562564, 172.8807370063752, 163.38600768186703, 176.1825419773446, -174.579680173718, -172.33584488196067, 165.33802569398378, -172.52566426066147, 157.54287773943665, -175.88151109326037, 175.42764399370765, 142.06967472256432, -168.3407340189972, -175.8058311226083, 163.06374541935153, 171.72097499708474, -151.40390456860604, -168.2713690903466, 165.04532787828478, -177.3153366647533, 170.04241289697416, 173.59919660957283, -177.25065674571294]\n)\ntrace5 = Scatter(\n    name='Trial 5',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(102,166,30)',\n        opacity=0.7\n    ),\n    r=[7.937557871379145, 7.302746491515634, 5.929302221442996, 2.407178713166243, 5.27092188705965, 7.400596127535688, 6.810820338360006, 4.967759034422344, 6.190229370454795, 2.158518657950606, 4.00412589386977, 4.776617321633007, 4.232250451808441, 4.30765487269422, 6.200275172864116, 0.7275138485344722, 4.378006803811767, 6.004964939443091, 4.341931702915758, 10.237982935327496, 3.8021588886978415, 3.96928117013756, 5.7589801424664335, 7.674179069144705, 6.699953533011802, 5.7343103881346, 6.044275915297742, 4.3129430660866035, 3.3775452824133043, 6.367666727269062, 5.737244181549697, 3.3963514719893415, 4.216467481387725, 5.464885016717265, 7.311135577533859, 4.745400769362272, 3.9164685318876504, 7.6029729903258385, 4.125204829441439, 3.6767949496501635, 4.551235788519779, 5.606960531523096, 5.794844257485189, 5.030528155694793, 5.109586240991219, 3.4054402079637396, 6.02630612538526, 4.2211092636354195, 1.9097829365788486, 7.254669393921678, 6.268875872033599, 4.56258056659493, 4.9180579654382806, 6.83656096252698, 6.78648654914422, 4.751014334485786, 4.719926347642004, 4.9278052151809675, 4.059190587394083, 6.128338984290388],\n    t=[-101.83378577584543, -127.47839157875458, -112.2442849973417, -82.32591087119675, -114.6888556206928, -130.53786336160334, -145.0102649759552, -98.7488450072409, -124.44174882126121, -152.45411926998403, -89.29423655225057, -139.83245171792495, -91.54359518437012, -119.44216300369413, -92.45583852737828, -129.6599243163198, -131.0512350992248, -123.85291745359059, -118.08673900439605, -121.97921713765797, -121.91502996793754, -99.36184757774758, -141.46770199726927, -93.5662631891479, -126.33690140499776, -112.8349441777883, -114.38647992914663, -109.79607232724634, -102.74326471243563, -128.2467289067651, -127.79209264323043, -142.47362974536523, -161.58729418706835, -99.94061077957295, -130.16311732570668, -90.22881200957039, -122.65049121443685, -123.26775057177692, -111.99730880084306, -127.52831680551732, -117.93129533779559, -120.39163424547179, -119.38687147866949, -149.6746954924951, -107.85051750555007, -138.98993134073962, -127.5954702142739, -107.32083544041386, -117.5738074233824, -127.48166096847307, -129.91203316621693, -148.49521167061027, -135.33164137019145, -104.42165927641673, -123.87544021115426, -146.81682661802307, -107.0584854241401, -138.9025648732907, -88.89688251951031, -130.75446735589105]\n)\ntrace6 = Scatter(\n    name='Trial 6',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white'\n        ),\n        size=110,\n        color='rgb(230,171,2)',\n        opacity=0.7\n    ),\n    r=[8.46918052789063, 5.821997567373959, 6.1409183282181425, 5.831724284786043, 5.546754471857236, 5.62748770920125, 3.94832897601986, 6.490184614609525, 5.320618245151644, 3.2435930414929843, 6.444085331576761, 3.363778100648707, 6.463116810505407, 4.730944925781221, 7.796578411114142, 4.570127829915901, 3.926206816002813, 5.254348139870139, 4.8384111066133375, 8.694523998982934, 4.39953181821818, 5.8564839051788535, 3.62157703921442, 8.894912373110186, 5.494542836078211, 5.968980890853802, 6.047899573604184, 5.384671396722035, 5.381220018196653, 5.11157462273727, 4.7705611050578, 3.0983308826347407, 1.665083171936659, 6.740258533332946, 5.5944949288820025, 6.879630825669177, 4.382792466280775, 6.410843616485085, 5.154204317772818, 4.01515851865648, 4.9391488682598155, 5.298297314485713, 5.490417176946796, 2.6237512593812404, 5.9535886616652665, 3.3014793719195046, 4.954889001100974, 5.500053669614178, 4.4505123495497285, 5.786624513349857, 4.906834424064605, 2.6299694734469274, 3.769703608047238, 7.396735715500286, 5.7644819019579545, 2.794585195883112, 5.782033269824353, 3.4853519176219963, 6.500653598620165, 4.748640710129176],\n    t=[-66.53583632728323, -84.514422676922, -63.339741699567846, -24.146812744223833, -59.70124532256676, -88.06537267996578, -98.44420453532204, -49.15839681719936, -73.63622331202959, -17.923874678608904, -38.41239945460549, -66.34036237792131, -40.88883873919996, -52.46063321002169, -52.61046255912479, -7.039351050913894, -57.23545869215697, -71.64220350197985, -52.345396169095466, -92.78303867354904, -47.18716305503351, -41.969208462875166, -82.14422824993427, -59.43916560317718, -79.19482259319774, -62.29990853531319, -65.53790403937941, -48.9060554475786, -37.74831103800929, -78.05333345828834, -71.87311766307504, -41.891092825900685, -53.11545548549721, -52.997628097314845, -87.0843610179252, -43.61190483837573, -48.79799840560851, -82.56680315713163, -47.90996299570176, -46.57048558531105, -54.5004832176089, -65.90072712679752, -66.87331746360131, -75.48080725209734, -54.777693866880114, -42.5983345913628, -74.50816626907293, -47.11021844342552, -22.356873183328428, -84.19298674498425, -78.50528475620209, -65.0363717923471, -66.51373368133282, -63.52677656175937, -77.80907855131592, -68.51017974013602, -51.296869310885135, -68.33991302765452, -38.631733068443026, -77.85184858511114]\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5, trace6])\nlayout = Layout(\n    title='Hobbs-Pearson Trials',\n    plot_bgcolor='rgb(223, 223, 223)',\n    font=Font(\n        size=15\n    ),\n    angularaxis=AngularAxis(\n        tickcolor='rgb(253,253,253)'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='polar-polar-scatter', auto_open=False)"
            }, 
            "polar-line": {
              "files": {
                "model.json": "hard-coded/chart-types/polar/polar-line/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  name: \"Figure8\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"peru\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace2 = {\n  name: \"Cardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"darkviolet\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace3 = {\n  name: \"Hypercardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"deepskyblue\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace4 = {\n  name: \"Subcardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"orangered\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace5 = {\n  name: \"Supercardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"green\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5];\nvar layout = {\n  title: \"Mic Patterns\", \n  width: 500, \n  height: 400, \n  margin: {\n    l: 40, \n    r: 40, \n    b: 20, \n    t: 40, \n    pad: 0\n  }, \n  paper_bgcolor: \"rgb(255, 255, 255)\", \n  plot_bgcolor: \"rgb(255, 255, 255)\", \n  font: {\n    family: \"Arial, sans-serif;\", \n    size: 12, \n    color: \"#000\"\n  }, \n  showlegend: true, \n  orientation: -90\n};\n\nvar graph_options = {filename: \"polar-polar-line\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "polar-line", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    name='Figure8',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='peru'\n        ),\n        color='none'\n    ),\n    r=[1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace2 = Scatter(\n    name='Cardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='darkviolet'\n        ),\n        color='none'\n    ),\n    r=[1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace3 = Scatter(\n    name='Hypercardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='deepskyblue'\n        ),\n        color='none'\n    ),\n    r=[1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace4 = Scatter(\n    name='Subcardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='orangered'\n        ),\n        color='none'\n    ),\n    r=[1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace5 = Scatter(\n    name='Supercardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='green'\n        ),\n        color='none'\n    ),\n    r=[1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5])\nlayout = Layout(\n    title='Mic Patterns',\n    width=500,\n    height=400,\n    margin=Margin(\n        l=40,\n        r=40,\n        b=20,\n        t=40,\n        pad=0\n    ),\n    paper_bgcolor='rgb(255, 255, 255)',\n    plot_bgcolor='rgb(255, 255, 255)',\n    font=Font(\n        family='Arial, sans-serif;',\n        size=12,\n        color='#000'\n    ),\n    showlegend=True,\n    orientation=-90\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='polar-polar-line')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"name\" => \"Figure8\", \n  \"mode\" => \"lines\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"peru\"], \n    \"color\" => \"none\"\n  ], \n  \"r\" => [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], \n  \"t\" => [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"name\" => \"Cardioid\", \n  \"mode\" => \"lines\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"darkviolet\"], \n    \"color\" => \"none\"\n  ], \n  \"r\" => [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], \n  \"t\" => [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"name\" => \"Hypercardioid\", \n  \"mode\" => \"lines\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"deepskyblue\"], \n    \"color\" => \"none\"\n  ], \n  \"r\" => [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], \n  \"t\" => [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"name\" => \"Subcardioid\", \n  \"mode\" => \"lines\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"orangered\"], \n    \"color\" => \"none\"\n  ], \n  \"r\" => [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], \n  \"t\" => [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" => \"scatter\"\n]\ntrace5 = [\n  \"name\" => \"Supercardioid\", \n  \"mode\" => \"lines\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"green\"], \n    \"color\" => \"none\"\n  ], \n  \"r\" => [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], \n  \"t\" => [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5]\nlayout = [\n  \"title\" => \"Mic Patterns\", \n  \"width\" => 500, \n  \"height\" => 400, \n  \"margin\" => [\n    \"l\" => 40, \n    \"r\" => 40, \n    \"b\" => 20, \n    \"t\" => 40, \n    \"pad\" => 0\n  ], \n  \"paper_bgcolor\" => \"rgb(255, 255, 255)\", \n  \"plot_bgcolor\" => \"rgb(255, 255, 255)\", \n  \"font\" => [\n    \"family\" => \"Arial, sans-serif;\", \n    \"size\" => 12, \n    \"color\" => \"#000\"\n  ], \n  \"showlegend\" => true, \n  \"orientation\" => -90\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"polar-polar-line\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"name\" =&gt; \"Figure8\", \n  \"mode\" =&gt; \"lines\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"peru\"], \n    \"color\" =&gt; \"none\"\n  ], \n  \"r\" =&gt; [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], \n  \"t\" =&gt; [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"name\" =&gt; \"Cardioid\", \n  \"mode\" =&gt; \"lines\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"darkviolet\"], \n    \"color\" =&gt; \"none\"\n  ], \n  \"r\" =&gt; [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], \n  \"t\" =&gt; [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"name\" =&gt; \"Hypercardioid\", \n  \"mode\" =&gt; \"lines\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"deepskyblue\"], \n    \"color\" =&gt; \"none\"\n  ], \n  \"r\" =&gt; [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], \n  \"t\" =&gt; [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"name\" =&gt; \"Subcardioid\", \n  \"mode\" =&gt; \"lines\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"orangered\"], \n    \"color\" =&gt; \"none\"\n  ], \n  \"r\" =&gt; [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], \n  \"t\" =&gt; [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" =&gt; \"scatter\"\n]\ntrace5 = [\n  \"name\" =&gt; \"Supercardioid\", \n  \"mode\" =&gt; \"lines\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"green\"], \n    \"color\" =&gt; \"none\"\n  ], \n  \"r\" =&gt; [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], \n  \"t\" =&gt; [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4, trace5]\nlayout = [\n  \"title\" =&gt; \"Mic Patterns\", \n  \"width\" =&gt; 500, \n  \"height\" =&gt; 400, \n  \"margin\" =&gt; [\n    \"l\" =&gt; 40, \n    \"r\" =&gt; 40, \n    \"b\" =&gt; 20, \n    \"t\" =&gt; 40, \n    \"pad\" =&gt; 0\n  ], \n  \"paper_bgcolor\" =&gt; \"rgb(255, 255, 255)\", \n  \"plot_bgcolor\" =&gt; \"rgb(255, 255, 255)\", \n  \"font\" =&gt; [\n    \"family\" =&gt; \"Arial, sans-serif;\", \n    \"size\" =&gt; 12, \n    \"color\" =&gt; \"#000\"\n  ], \n  \"showlegend\" =&gt; true, \n  \"orientation\" =&gt; -90\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"polar-polar-line\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1004", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  name = \"Figure8\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"peru\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  name = \"Cardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"darkviolet\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  name = \"Hypercardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"deepskyblue\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  name = \"Subcardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"orangered\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace5 &lt;- list(\n  name = \"Supercardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"green\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4, trace5)\nlayout &lt;- list(\n  title = \"Mic Patterns\", \n  width = 500, \n  height = 400, \n  margin = list(\n    l = 40, \n    r = 40, \n    b = 20, \n    t = 40, \n    pad = 0\n  ), \n  paper_bgcolor = \"rgb(255, 255, 255)\", \n  plot_bgcolor = \"rgb(255, 255, 255)\", \n  font = list(\n    family = \"Arial, sans-serif;\", \n    size = 12, \n    color = \"#000\"\n  ), \n  showlegend = TRUE, \n  orientation = -90\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-line\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'name', 'Figure8', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'peru'), ...\n    'color', 'none'), ...\n  'r', [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'name', 'Cardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'darkviolet'), ...\n    'color', 'none'), ...\n  'r', [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'name', 'Hypercardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'deepskyblue'), ...\n    'color', 'none'), ...\n  'r', [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'name', 'Subcardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'orangered'), ...\n    'color', 'none'), ...\n  'r', [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'name', 'Supercardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'green'), ...\n    'color', 'none'), ...\n  'r', [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5};\nlayout = struct(...\n    'title', 'Mic Patterns', ...\n    'width', 500, ...\n    'height', 400, ...\n    'margin', struct(...\n      'l', 40, ...\n      'r', 40, ...\n      'b', 20, ...\n      't', 40, ...\n      'pad', 0), ...\n    'paper_bgcolor', 'rgb(255, 255, 255)', ...\n    'plot_bgcolor', 'rgb(255, 255, 255)', ...\n    'font', struct(...\n      'family', 'Arial, sans-serif;', ...\n      'size', 12, ...\n      'color', '#000'), ...\n    'showlegend', true, ...\n    'orientation', -90);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-line', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/polar/polar-line", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  name: \"Figure8\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"peru\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace2 = {\n  name: \"Cardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"darkviolet\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace3 = {\n  name: \"Hypercardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"deepskyblue\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace4 = {\n  name: \"Subcardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"orangered\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar trace5 = {\n  name: \"Supercardioid\", \n  mode: \"lines\", \n  marker: {\n    line: {color: \"green\"}, \n    color: \"none\"\n  }, \n  r: [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], \n  t: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5];\nvar layout = {\n  title: \"Mic Patterns\", \n  width: 500, \n  height: 400, \n  margin: {\n    l: 40, \n    r: 40, \n    b: 20, \n    t: 40, \n    pad: 0\n  }, \n  paper_bgcolor: \"rgb(255, 255, 255)\", \n  plot_bgcolor: \"rgb(255, 255, 255)\", \n  font: {\n    family: \"Arial, sans-serif;\", \n    size: 12, \n    color: \"#000\"\n  }, \n  showlegend: true, \n  orientation: -90\n};\n\nvar graph_options = {filename: \"polar-polar-line\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'name', 'Figure8', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'peru'), ...\n    'color', 'none'), ...\n  'r', [1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'name', 'Cardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'darkviolet'), ...\n    'color', 'none'), ...\n  'r', [1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'name', 'Hypercardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'deepskyblue'), ...\n    'color', 'none'), ...\n  'r', [1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'name', 'Subcardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'orangered'), ...\n    'color', 'none'), ...\n  'r', [1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ntrace5 = struct(...\n  'name', 'Supercardioid', ...\n  'mode', 'lines', ...\n  'marker', struct(...\n    'line', struct('color', 'green'), ...\n    'color', 'none'), ...\n  'r', [1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1], ...\n  't', [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360], ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4, trace5};\nlayout = struct(...\n    'title', 'Mic Patterns', ...\n    'width', 500, ...\n    'height', 400, ...\n    'margin', struct(...\n      'l', 40, ...\n      'r', 40, ...\n      'b', 20, ...\n      't', 40, ...\n      'pad', 0), ...\n    'paper_bgcolor', 'rgb(255, 255, 255)', ...\n    'plot_bgcolor', 'rgb(255, 255, 255)', ...\n    'font', struct(...\n      'family', 'Arial, sans-serif;', ...\n      'size', 12, ...\n      'color', '#000'), ...\n    'showlegend', true, ...\n    'orientation', -90);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-line', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  name = \"Figure8\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"peru\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  name = \"Cardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"darkviolet\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace3 <- list(\n  name = \"Hypercardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"deepskyblue\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace4 <- list(\n  name = \"Subcardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"orangered\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ntrace5 <- list(\n  name = \"Supercardioid\", \n  mode = \"lines\", \n  marker = list(\n    line = list(color = \"green\"), \n    color = \"none\"\n  ), \n  r = c(1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1), \n  t = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4, trace5)\nlayout <- list(\n  title = \"Mic Patterns\", \n  width = 500, \n  height = 400, \n  margin = list(\n    l = 40, \n    r = 40, \n    b = 20, \n    t = 40, \n    pad = 0\n  ), \n  paper_bgcolor = \"rgb(255, 255, 255)\", \n  plot_bgcolor = \"rgb(255, 255, 255)\", \n  font = list(\n    family = \"Arial, sans-serif;\", \n    size = 12, \n    color = \"#000\"\n  ), \n  showlegend = TRUE, \n  orientation = -90\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-line\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    name='Figure8',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='peru'\n        ),\n        color='none'\n    ),\n    r=[1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1, 0.995, 0.978, 0.951, 0.914, 0.866, 0.809, 0.743, 0.669, 0.588, 0.5, 0.407, 0.309, 0.208, 0.105, 0, 0.105, 0.208, 0.309, 0.407, 0.5, 0.588, 0.669, 0.743, 0.809, 0.866, 0.914, 0.951, 0.978, 0.995, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace2 = Scatter(\n    name='Cardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='darkviolet'\n        ),\n        color='none'\n    ),\n    r=[1, 0.997, 0.989, 0.976, 0.957, 0.933, 0.905, 0.872, 0.835, 0.794, 0.75, 0.703, 0.655, 0.604, 0.552, 0.5, 0.448, 0.396, 0.345, 0.297, 0.25, 0.206, 0.165, 0.128, 0.095, 0.067, 0.043, 0.024, 0.011, 0.003, 0, 0.003, 0.011, 0.024, 0.043, 0.067, 0.095, 0.128, 0.165, 0.206, 0.25, 0.297, 0.345, 0.396, 0.448, 0.5, 0.552, 0.604, 0.655, 0.703, 0.75, 0.794, 0.835, 0.872, 0.905, 0.933, 0.957, 0.976, 0.989, 0.997, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace3 = Scatter(\n    name='Hypercardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='deepskyblue'\n        ),\n        color='none'\n    ),\n    r=[1, 0.996, 0.984, 0.963, 0.935, 0.9, 0.857, 0.807, 0.752, 0.691, 0.625, 0.555, 0.482, 0.406, 0.328, 0.25, 0.172, 0.094, 0.018, 0.055, 0.125, 0.191, 0.252, 0.307, 0.357, 0.4, 0.435, 0.463, 0.484, 0.496, 0.5, 0.496, 0.484, 0.463, 0.435, 0.4, 0.357, 0.307, 0.252, 0.191, 0.125, 0.055, 0.018, 0.094, 0.172, 0.25, 0.328, 0.406, 0.482, 0.555, 0.625, 0.691, 0.752, 0.807, 0.857, 0.9, 0.935, 0.963, 0.984, 0.996, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace4 = Scatter(\n    name='Subcardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='orangered'\n        ),\n        color='none'\n    ),\n    r=[1, 0.998, 0.993, 0.985, 0.974, 0.96, 0.943, 0.923, 0.901, 0.876, 0.85, 0.822, 0.793, 0.762, 0.731, 0.7, 0.669, 0.638, 0.607, 0.578, 0.55, 0.524, 0.499, 0.477, 0.457, 0.44, 0.426, 0.415, 0.407, 0.402, 0.4, 0.402, 0.407, 0.415, 0.426, 0.44, 0.457, 0.477, 0.499, 0.524, 0.55, 0.578, 0.607, 0.638, 0.669, 0.7, 0.731, 0.762, 0.793, 0.822, 0.85, 0.876, 0.901, 0.923, 0.943, 0.96, 0.974, 0.985, 0.993, 0.998, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ntrace5 = Scatter(\n    name='Supercardioid',\n    mode='lines',\n    marker=Marker(\n        line=Line(\n            color='green'\n        ),\n        color='none'\n    ),\n    r=[1, 0.997, 0.986, 0.969, 0.946, 0.916, 0.88, 0.838, 0.792, 0.74, 0.685, 0.626, 0.565, 0.501, 0.436, 0.37, 0.304, 0.239, 0.175, 0.114, 0.055, 0, 0.052, 0.098, 0.14, 0.176, 0.206, 0.229, 0.246, 0.257, 0.26, 0.257, 0.246, 0.229, 0.206, 0.176, 0.14, 0.098, 0.052, 0, 0.055, 0.114, 0.175, 0.239, 0.304, 0.37, 0.436, 0.501, 0.565, 0.626, 0.685, 0.74, 0.792, 0.838, 0.88, 0.916, 0.946, 0.969, 0.986, 0.997, 1],\n    t=[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360]\n)\ndata = Data([trace1, trace2, trace3, trace4, trace5])\nlayout = Layout(\n    title='Mic Patterns',\n    width=500,\n    height=400,\n    margin=Margin(\n        l=40,\n        r=40,\n        b=20,\n        t=40,\n        pad=0\n    ),\n    paper_bgcolor='rgb(255, 255, 255)',\n    plot_bgcolor='rgb(255, 255, 255)',\n    font=Font(\n        family='Arial, sans-serif;',\n        size=12,\n        color='#000'\n    ),\n    showlegend=True,\n    orientation=-90\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='polar-polar-line', auto_open=False)"
            }, 
            "polar-area-chart": {
              "files": {
                "model.json": "hard-coded/chart-types/polar/polar-area-chart/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  r: [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"11-14 m/s\", \n  marker: {color: \"rgb(106,81,163)\"}, \n  type: \"area\"\n};\nvar trace2 = {\n  r: [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"8-11 m/s\", \n  marker: {color: \"rgb(158,154,200)\"}, \n  type: \"area\"\n};\nvar trace3 = {\n  r: [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"5-8 m/s\", \n  marker: {color: \"rgb(203,201,226)\"}, \n  type: \"area\"\n};\nvar trace4 = {\n  r: [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"&lt; 5 m/s\", \n  marker: {color: \"rgb(242,240,247)\"}, \n  type: \"area\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  title: \"Wind Speed Distribution in Laurel, NE\", \n  legend: {font: {size: 16}}, \n  font: {size: 16}, \n  orientation: 270, \n  radialaxis: {ticksuffix: \"%\"}\n};\n\nvar graph_options = {filename: \"polar-polar-area-chart\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "polar-area-chart", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Area(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='11-14 m/s',\n    marker=Marker(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = Area(\n    r=[57.49999999999999, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.00000000000001],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='8-11 m/s',\n    marker=Marker(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = Area(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='5-8 m/s',\n    marker=Marker(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = Area(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='&lt; 5 m/s',\n    marker=Marker(\n        color='rgb(242,240,247)'\n    )\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    legend=Legend(\n        font=Font(\n            size=16\n        )\n    ),\n    font=Font(\n        size=16\n    ),\n    orientation=270,\n    radialaxis=RadialAxis(\n        ticksuffix='%'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='polar-polar-area-chart')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"r\" => [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], \n  \"t\" => [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" => \"11-14 m/s\", \n  \"marker\" => [\"color\" => \"rgb(106,81,163)\"], \n  \"type\" => \"area\"\n]\ntrace2 = [\n  \"r\" => [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], \n  \"t\" => [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" => \"8-11 m/s\", \n  \"marker\" => [\"color\" => \"rgb(158,154,200)\"], \n  \"type\" => \"area\"\n]\ntrace3 = [\n  \"r\" => [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], \n  \"t\" => [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" => \"5-8 m/s\", \n  \"marker\" => [\"color\" => \"rgb(203,201,226)\"], \n  \"type\" => \"area\"\n]\ntrace4 = [\n  \"r\" => [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], \n  \"t\" => [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" => \"< 5 m/s\", \n  \"marker\" => [\"color\" => \"rgb(242,240,247)\"], \n  \"type\" => \"area\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"title\" => \"Wind Speed Distribution in Laurel, NE\", \n  \"legend\" => [\"font\" => [\"size\" => 16]], \n  \"font\" => [\"size\" => 16], \n  \"orientation\" => 270, \n  \"radialaxis\" => [\"ticksuffix\" => \"%\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"polar-polar-area-chart\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"r\" =&gt; [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], \n  \"t\" =&gt; [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" =&gt; \"11-14 m/s\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(106,81,163)\"], \n  \"type\" =&gt; \"area\"\n]\ntrace2 = [\n  \"r\" =&gt; [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], \n  \"t\" =&gt; [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" =&gt; \"8-11 m/s\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(158,154,200)\"], \n  \"type\" =&gt; \"area\"\n]\ntrace3 = [\n  \"r\" =&gt; [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], \n  \"t\" =&gt; [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" =&gt; \"5-8 m/s\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(203,201,226)\"], \n  \"type\" =&gt; \"area\"\n]\ntrace4 = [\n  \"r\" =&gt; [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], \n  \"t\" =&gt; [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  \"name\" =&gt; \"&lt; 5 m/s\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(242,240,247)\"], \n  \"type\" =&gt; \"area\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"title\" =&gt; \"Wind Speed Distribution in Laurel, NE\", \n  \"legend\" =&gt; [\"font\" =&gt; [\"size\" =&gt; 16]], \n  \"font\" =&gt; [\"size\" =&gt; 16], \n  \"orientation\" =&gt; 270, \n  \"radialaxis\" =&gt; [\"ticksuffix\" =&gt; \"%\"]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"polar-polar-area-chart\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1005", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  r = c(77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"11-14 m/s\", \n  marker = list(color = \"rgb(106,81,163)\"), \n  type = \"area\"\n)\ntrace2 &lt;- list(\n  r = c(57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"8-11 m/s\", \n  marker = list(color = \"rgb(158,154,200)\"), \n  type = \"area\"\n)\ntrace3 &lt;- list(\n  r = c(40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"5-8 m/s\", \n  marker = list(color = \"rgb(203,201,226)\"), \n  type = \"area\"\n)\ntrace4 &lt;- list(\n  r = c(20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"&lt; 5 m/s\", \n  marker = list(color = \"rgb(242,240,247)\"), \n  type = \"area\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4)\nlayout &lt;- list(\n  title = \"Wind Speed Distribution in Laurel, NE\", \n  legend = list(font = list(size = 16)), \n  font = list(size = 16), \n  orientation = 270, \n  radialaxis = list(ticksuffix = \"%\")\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-area-chart\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'r', [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '11-14 m/s', ...\n  'marker', struct('color', 'rgb(106,81,163)'), ...\n  'type', 'area');\ntrace2 = struct(...\n  'r', [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '8-11 m/s', ...\n  'marker', struct('color', 'rgb(158,154,200)'), ...\n  'type', 'area');\ntrace3 = struct(...\n  'r', [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '5-8 m/s', ...\n  'marker', struct('color', 'rgb(203,201,226)'), ...\n  'type', 'area');\ntrace4 = struct(...\n  'r', [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '&lt; 5 m/s', ...\n  'marker', struct('color', 'rgb(242,240,247)'), ...\n  'type', 'area');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'title', 'Wind Speed Distribution in Laurel, NE', ...\n    'legend', struct('font', struct('size', 16)), ...\n    'font', struct('size', 16), ...\n    'orientation', 270, ...\n    'radialaxis', struct('ticksuffix', '%'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-area-chart', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/polar/polar-area-chart", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  r: [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"11-14 m/s\", \n  marker: {color: \"rgb(106,81,163)\"}, \n  type: \"area\"\n};\nvar trace2 = {\n  r: [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"8-11 m/s\", \n  marker: {color: \"rgb(158,154,200)\"}, \n  type: \"area\"\n};\nvar trace3 = {\n  r: [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"5-8 m/s\", \n  marker: {color: \"rgb(203,201,226)\"}, \n  type: \"area\"\n};\nvar trace4 = {\n  r: [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], \n  t: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"], \n  name: \"< 5 m/s\", \n  marker: {color: \"rgb(242,240,247)\"}, \n  type: \"area\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  title: \"Wind Speed Distribution in Laurel, NE\", \n  legend: {font: {size: 16}}, \n  font: {size: 16}, \n  orientation: 270, \n  radialaxis: {ticksuffix: \"%\"}\n};\n\nvar graph_options = {filename: \"polar-polar-area-chart\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'r', [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '11-14 m/s', ...\n  'marker', struct('color', 'rgb(106,81,163)'), ...\n  'type', 'area');\ntrace2 = struct(...\n  'r', [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '8-11 m/s', ...\n  'marker', struct('color', 'rgb(158,154,200)'), ...\n  'type', 'area');\ntrace3 = struct(...\n  'r', [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '5-8 m/s', ...\n  'marker', struct('color', 'rgb(203,201,226)'), ...\n  'type', 'area');\ntrace4 = struct(...\n  'r', [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5], ...\n  't', { {'North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'} }, ...\n  'name', '< 5 m/s', ...\n  'marker', struct('color', 'rgb(242,240,247)'), ...\n  'type', 'area');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'title', 'Wind Speed Distribution in Laurel, NE', ...\n    'legend', struct('font', struct('size', 16)), ...\n    'font', struct('size', 16), ...\n    'orientation', 270, ...\n    'radialaxis', struct('ticksuffix', '%'));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'polar-polar-area-chart', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  r = c(77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"11-14 m/s\", \n  marker = list(color = \"rgb(106,81,163)\"), \n  type = \"area\"\n)\ntrace2 <- list(\n  r = c(57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"8-11 m/s\", \n  marker = list(color = \"rgb(158,154,200)\"), \n  type = \"area\"\n)\ntrace3 <- list(\n  r = c(40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"5-8 m/s\", \n  marker = list(color = \"rgb(203,201,226)\"), \n  type = \"area\"\n)\ntrace4 <- list(\n  r = c(20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5), \n  t = c(\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"), \n  name = \"< 5 m/s\", \n  marker = list(color = \"rgb(242,240,247)\"), \n  type = \"area\"\n)\ndata <- list(trace1, trace2, trace3, trace4)\nlayout <- list(\n  title = \"Wind Speed Distribution in Laurel, NE\", \n  legend = list(font = list(size = 16)), \n  font = list(size = 16), \n  orientation = 270, \n  radialaxis = list(ticksuffix = \"%\")\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"polar-polar-area-chart\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Area(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='11-14 m/s',\n    marker=Marker(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = Area(\n    r=[57.49999999999999, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.00000000000001],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='8-11 m/s',\n    marker=Marker(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = Area(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='5-8 m/s',\n    marker=Marker(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = Area(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    t=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='< 5 m/s',\n    marker=Marker(\n        color='rgb(242,240,247)'\n    )\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    legend=Legend(\n        font=Font(\n            size=16\n        )\n    ),\n    font=Font(\n        size=16\n    ),\n    orientation=270,\n    radialaxis=RadialAxis(\n        ticksuffix='%'\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='polar-polar-area-chart', auto_open=False)"
            }
          }, 
          "name": "polar", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "polar"
          }
        }, 
        "bar": {
          "path": "hard-coded/chart-types/bar", 
          "subsections": {
            "stacked-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/bar/stacked-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {type: \"category\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"stack\"\n};\n\nvar graph_options = {filename: \"bar-stacked-bar\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "stacked-bar", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='category'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='stack'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='bar-stacked-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [20, 14, 23], \n  \"name\" => \"SF Zoo\", \n  \"type\" => \"bar\"\n]\ntrace2 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [12, 18, 29], \n  \"name\" => \"LA Zoo\", \n  \"type\" => \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"type\" => \"category\"], \n  \"categories\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" => \"stack\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"bar-stacked-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [20, 14, 23], \n  \"name\" =&gt; \"SF Zoo\", \n  \"type\" =&gt; \"bar\"\n]\ntrace2 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [12, 18, 29], \n  \"name\" =&gt; \"LA Zoo\", \n  \"type\" =&gt; \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"type\" =&gt; \"category\"], \n  \"categories\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" =&gt; \"stack\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"bar-stacked-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1006", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  type = \"bar\"\n)\ntrace2 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  type = \"bar\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(type = \"category\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"stack\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-stacked-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('type', 'category'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'stack');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-stacked-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/bar/stacked-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {type: \"category\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"stack\"\n};\n\nvar graph_options = {filename: \"bar-stacked-bar\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('type', 'category'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'stack');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-stacked-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  type = \"bar\"\n)\ntrace2 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  type = \"bar\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(type = \"category\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"stack\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-stacked-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='category'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='stack'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='bar-stacked-bar', auto_open=False)"
            }, 
            "basic-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/bar/basic-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n    y: [20, 14, 23], \n    type: \"bar\"\n  }\n];\n\nvar graph_options = {filename: \"bar-basic-bar\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-bar", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Bar(\n        x=['giraffes', 'orangutans', 'monkeys'],\n        y=[20, 14, 23]\n    )\n])\n\nplot_url = py.plot(data, filename='bar-basic-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n    \"y\" => [20, 14, 23], \n    \"type\" => \"bar\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"bar-basic-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n    \"y\" =&gt; [20, 14, 23], \n    \"type\" =&gt; \"bar\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"bar-basic-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1007", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n    y = c(20, 14, 23), \n    type = \"bar\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"bar-basic-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'y', [20, 14, 23], ...\n    'type', 'bar')...\n};\n\nresponse = plotly(data, struct('filename', 'bar-basic-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/bar/basic-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n    y: [20, 14, 23], \n    type: \"bar\"\n  }\n];\n\nvar graph_options = {filename: \"bar-basic-bar\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'y', [20, 14, 23], ...\n    'type', 'bar')...\n};\n\nresponse = plotly(data, struct('filename', 'bar-basic-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n    y = c(20, 14, 23), \n    type = \"bar\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"bar-basic-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Bar(\n        x=['giraffes', 'orangutans', 'monkeys'],\n        y=[20, 14, 23]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='bar-basic-bar', auto_open=False)"
            }, 
            "grouped-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/bar/grouped-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {type: \"category\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"group\"\n};\n\nvar graph_options = {filename: \"bar-grouped-bar\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "grouped-bar", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='category'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='bar-grouped-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [20, 14, 23], \n  \"name\" => \"SF Zoo\", \n  \"type\" => \"bar\"\n]\ntrace2 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [12, 18, 29], \n  \"name\" => \"LA Zoo\", \n  \"type\" => \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" => [\"type\" => \"category\"], \n  \"categories\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" => \"group\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"bar-grouped-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [20, 14, 23], \n  \"name\" =&gt; \"SF Zoo\", \n  \"type\" =&gt; \"bar\"\n]\ntrace2 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [12, 18, 29], \n  \"name\" =&gt; \"LA Zoo\", \n  \"type\" =&gt; \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"xaxis\" =&gt; [\"type\" =&gt; \"category\"], \n  \"categories\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" =&gt; \"group\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"bar-grouped-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1008", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  type = \"bar\"\n)\ntrace2 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  type = \"bar\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  xaxis = list(type = \"category\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"group\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-grouped-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('type', 'category'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-grouped-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/bar/grouped-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {type: \"category\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"group\"\n};\n\nvar graph_options = {filename: \"bar-grouped-bar\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'xaxis', struct('type', 'category'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-grouped-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  type = \"bar\"\n)\ntrace2 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  type = \"bar\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  xaxis = list(type = \"category\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"group\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-grouped-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    xaxis=XAxis(\n        type='category'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='bar-grouped-bar', auto_open=False)"
            }, 
            "style-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/bar/style-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  marker: {\n    line: {color: \"grey\"}, \n    color: \"orange\"\n  }, \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  marker: {\n    line: {\n      color: \"grey\", \n      width: 3\n    }, \n    color: \"blue\"\n  }, \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Animal Population\", \n  xaxis: {type: \"category\"}, \n  yaxis: {title: \"# of animals (thousands)\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"group\", \n  bargap: 0.25, \n  bargroupgap: 0.3, \n  orientation: \"v\"\n};\n\nvar graph_options = {filename: \"bar-style-bar\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "style-bar", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo',\n    marker=Marker(\n        line=Line(\n            color='grey'\n        ),\n        color='orange'\n    )\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo',\n    marker=Marker(\n        line=Line(\n            color='grey',\n            width=3\n        ),\n        color='blue'\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Animal Population',\n    xaxis=XAxis(\n        type='category'\n    ),\n    yaxis=YAxis(\n        title='# of animals (thousands)'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='group',\n    bargap=0.25,\n    bargroupgap=0.3,\n    orientation='v'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='bar-style-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [20, 14, 23], \n  \"name\" => \"SF Zoo\", \n  \"marker\" => [\n    \"line\" => [\"color\" => \"grey\"], \n    \"color\" => \"orange\"\n  ], \n  \"type\" => \"bar\"\n]\ntrace2 = [\n  \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" => [12, 18, 29], \n  \"name\" => \"LA Zoo\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"grey\", \n      \"width\" => 3\n    ], \n    \"color\" => \"blue\"\n  ], \n  \"type\" => \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" => \"Animal Population\", \n  \"xaxis\" => [\"type\" => \"category\"], \n  \"yaxis\" => [\"title\" => \"# of animals (thousands)\"], \n  \"categories\" => [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" => \"group\", \n  \"bargap\" => 0.25, \n  \"bargroupgap\" => 0.3, \n  \"orientation\" => \"v\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"bar-style-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [20, 14, 23], \n  \"name\" =&gt; \"SF Zoo\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\"color\" =&gt; \"grey\"], \n    \"color\" =&gt; \"orange\"\n  ], \n  \"type\" =&gt; \"bar\"\n]\ntrace2 = [\n  \"x\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"y\" =&gt; [12, 18, 29], \n  \"name\" =&gt; \"LA Zoo\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"grey\", \n      \"width\" =&gt; 3\n    ], \n    \"color\" =&gt; \"blue\"\n  ], \n  \"type\" =&gt; \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" =&gt; \"Animal Population\", \n  \"xaxis\" =&gt; [\"type\" =&gt; \"category\"], \n  \"yaxis\" =&gt; [\"title\" =&gt; \"# of animals (thousands)\"], \n  \"categories\" =&gt; [\"giraffes\", \"orangutans\", \"monkeys\"], \n  \"barmode\" =&gt; \"group\", \n  \"bargap\" =&gt; 0.25, \n  \"bargroupgap\" =&gt; 0.3, \n  \"orientation\" =&gt; \"v\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"bar-style-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1009", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  marker = list(\n    line = list(color = \"grey\"), \n    color = \"orange\"\n  ), \n  type = \"bar\"\n)\ntrace2 &lt;- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  marker = list(\n    line = list(\n      color = \"grey\", \n      width = 3\n    ), \n    color = \"blue\"\n  ), \n  type = \"bar\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  title = \"Animal Population\", \n  xaxis = list(type = \"category\"), \n  yaxis = list(title = \"# of animals (thousands)\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"group\", \n  bargap = 0.25, \n  bargroupgap = 0.3, \n  orientation = \"v\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-style-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'marker', struct(...\n    'line', struct('color', 'grey'), ...\n    'color', 'orange'), ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'grey', ...\n      'width', 3), ...\n    'color', 'blue'), ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Animal Population', ...\n    'xaxis', struct('type', 'category'), ...\n    'yaxis', struct('title', '# of animals (thousands)'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'group', ...\n    'bargap', 0.25, ...\n    'bargroupgap', 0.3, ...\n    'orientation', 'v');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-style-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/bar/style-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [20, 14, 23], \n  name: \"SF Zoo\", \n  marker: {\n    line: {color: \"grey\"}, \n    color: \"orange\"\n  }, \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  y: [12, 18, 29], \n  name: \"LA Zoo\", \n  marker: {\n    line: {\n      color: \"grey\", \n      width: 3\n    }, \n    color: \"blue\"\n  }, \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Animal Population\", \n  xaxis: {type: \"category\"}, \n  yaxis: {title: \"# of animals (thousands)\"}, \n  categories: [\"giraffes\", \"orangutans\", \"monkeys\"], \n  barmode: \"group\", \n  bargap: 0.25, \n  bargroupgap: 0.3, \n  orientation: \"v\"\n};\n\nvar graph_options = {filename: \"bar-style-bar\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [20, 14, 23], ...\n  'name', 'SF Zoo', ...\n  'marker', struct(...\n    'line', struct('color', 'grey'), ...\n    'color', 'orange'), ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n  'y', [12, 18, 29], ...\n  'name', 'LA Zoo', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'grey', ...\n      'width', 3), ...\n    'color', 'blue'), ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Animal Population', ...\n    'xaxis', struct('type', 'category'), ...\n    'yaxis', struct('title', '# of animals (thousands)'), ...\n    'categories', { {'giraffes', 'orangutans', 'monkeys'} }, ...\n    'barmode', 'group', ...\n    'bargap', 0.25, ...\n    'bargroupgap', 0.3, ...\n    'orientation', 'v');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bar-style-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(20, 14, 23), \n  name = \"SF Zoo\", \n  marker = list(\n    line = list(color = \"grey\"), \n    color = \"orange\"\n  ), \n  type = \"bar\"\n)\ntrace2 <- list(\n  x = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  y = c(12, 18, 29), \n  name = \"LA Zoo\", \n  marker = list(\n    line = list(\n      color = \"grey\", \n      width = 3\n    ), \n    color = \"blue\"\n  ), \n  type = \"bar\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  title = \"Animal Population\", \n  xaxis = list(type = \"category\"), \n  yaxis = list(title = \"# of animals (thousands)\"), \n  categories = c(\"giraffes\", \"orangutans\", \"monkeys\"), \n  barmode = \"group\", \n  bargap = 0.25, \n  bargroupgap = 0.3, \n  orientation = \"v\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"bar-style-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo',\n    marker=Marker(\n        line=Line(\n            color='grey'\n        ),\n        color='orange'\n    )\n)\ntrace2 = Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo',\n    marker=Marker(\n        line=Line(\n            color='grey',\n            width=3\n        ),\n        color='blue'\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Animal Population',\n    xaxis=XAxis(\n        type='category'\n    ),\n    yaxis=YAxis(\n        title='# of animals (thousands)'\n    ),\n    categories=['giraffes', 'orangutans', 'monkeys'],\n    barmode='group',\n    bargap=0.25,\n    bargroupgap=0.3,\n    orientation='v'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='bar-style-bar', auto_open=False)"
            }
          }, 
          "name": "bar", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "bar"
          }
        }, 
        "heatmap": {
          "path": "hard-coded/chart-types/heatmap", 
          "subsections": {
            "YIOrRd-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/YIOrRd-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"YIOrRd\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"YIOrRd\"};\n\nvar graph_options = {filename: \"heatmap-YIOrRd-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "YIOrRd-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='YIOrRd'\n    )\n])\nlayout = Layout(\n    title='YIOrRd'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-YIOrRd-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"YIOrRd\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"YIOrRd\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-YIOrRd-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"YIOrRd\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"YIOrRd\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-YIOrRd-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1010", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"YIOrRd\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"YIOrRd\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-YIOrRd-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'YIOrRd', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'YIOrRd');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-YIOrRd-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/YIOrRd-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"YIOrRd\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"YIOrRd\"};\n\nvar graph_options = {filename: \"heatmap-YIOrRd-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'YIOrRd', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'YIOrRd');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-YIOrRd-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"YIOrRd\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"YIOrRd\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-YIOrRd-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='YIOrRd'\n    )\n])\nlayout = Layout(\n    title='YIOrRd'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-YIOrRd-heatmap', auto_open=False)"
            }, 
            "Earth-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Earth-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Earth-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Earth-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Earth-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Earth-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Earth-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Earth\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Earth\"};\n\nvar graph_options = {filename: \"heatmap-Earth-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Earth-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Earth'\n    )\n])\nlayout = Layout(\n    title='Earth'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Earth-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Earth\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Earth\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Earth-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Earth\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Earth\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Earth-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1011", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Earth\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Earth\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Earth-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Earth', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Earth');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Earth-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Earth-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Earth\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Earth\"};\n\nvar graph_options = {filename: \"heatmap-Earth-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Earth', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Earth');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Earth-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Earth\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Earth\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Earth-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Earth'\n    )\n])\nlayout = Layout(\n    title='Earth'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Earth-heatmap', auto_open=False)"
            }, 
            "YIGnBu-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/YIGnBu-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"YIGnBu\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"YIGnBu\"};\n\nvar graph_options = {filename: \"heatmap-YIGnBu-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "YIGnBu-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='YIGnBu'\n    )\n])\nlayout = Layout(\n    title='YIGnBu'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-YIGnBu-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"YIGnBu\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"YIGnBu\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-YIGnBu-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"YIGnBu\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"YIGnBu\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-YIGnBu-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1012", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"YIGnBu\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"YIGnBu\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-YIGnBu-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'YIGnBu', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'YIGnBu');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-YIGnBu-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/YIGnBu-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"YIGnBu\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"YIGnBu\"};\n\nvar graph_options = {filename: \"heatmap-YIGnBu-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'YIGnBu', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'YIGnBu');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-YIGnBu-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"YIGnBu\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"YIGnBu\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-YIGnBu-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='YIGnBu'\n    )\n])\nlayout = Layout(\n    title='YIGnBu'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-YIGnBu-heatmap', auto_open=False)"
            }, 
            "Hot-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Hot-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Hot-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Hot-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Hot-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Hot-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Hot-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Hot\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Hot\"};\n\nvar graph_options = {filename: \"heatmap-Hot-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Hot-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Hot'\n    )\n])\nlayout = Layout(\n    title='Hot'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Hot-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Hot\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Hot\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Hot-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Hot\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Hot\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Hot-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1013", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Hot\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Hot\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Hot-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Hot', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Hot');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Hot-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Hot-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Hot\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Hot\"};\n\nvar graph_options = {filename: \"heatmap-Hot-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Hot', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Hot');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Hot-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Hot\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Hot\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Hot-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Hot'\n    )\n])\nlayout = Layout(\n    title='Hot'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Hot-heatmap', auto_open=False)"
            }, 
            "Blackbody-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Blackbody-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Blackbody-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Blackbody-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Blackbody-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Blackbody-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Blackbody-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Blackbody\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Blackbody\"};\n\nvar graph_options = {filename: \"heatmap-Blackbody-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Blackbody-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Blackbody'\n    )\n])\nlayout = Layout(\n    title='Blackbody'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Blackbody-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Blackbody\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Blackbody\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Blackbody-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Blackbody\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Blackbody\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Blackbody-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1014", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Blackbody\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Blackbody\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Blackbody-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Blackbody', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Blackbody');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Blackbody-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Blackbody-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Blackbody\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Blackbody\"};\n\nvar graph_options = {filename: \"heatmap-Blackbody-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Blackbody', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Blackbody');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Blackbody-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Blackbody\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Blackbody\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Blackbody-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Blackbody'\n    )\n])\nlayout = Layout(\n    title='Blackbody'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Blackbody-heatmap', auto_open=False)"
            }, 
            "Bluered-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Bluered-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Bluered-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Bluered-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Bluered-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Bluered-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Bluered-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Bluered\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Bluered\"};\n\nvar graph_options = {filename: \"heatmap-Bluered-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Bluered-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Bluered'\n    )\n])\nlayout = Layout(\n    title='Bluered'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Bluered-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Bluered\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Bluered\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Bluered-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Bluered\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Bluered\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Bluered-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1015", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Bluered\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Bluered\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Bluered-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Bluered', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Bluered');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Bluered-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Bluered-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Bluered\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Bluered\"};\n\nvar graph_options = {filename: \"heatmap-Bluered-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Bluered', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Bluered');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Bluered-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Bluered\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Bluered\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Bluered-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Bluered'\n    )\n])\nlayout = Layout(\n    title='Bluered'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Bluered-heatmap', auto_open=False)"
            }, 
            "custom-colorscale": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/custom-colorscale/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/custom-colorscale/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/custom-colorscale/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/custom-colorscale/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/custom-colorscale/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/custom-colorscale/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: [[\"0.0\", \"rgb(165,0,38)\"], [\"0.111111111111\", \"rgb(215,48,39)\"], [\"0.222222222222\", \"rgb(244,109,67)\"], [\"0.333333333333\", \"rgb(253,174,97)\"], [\"0.444444444444\", \"rgb(254,224,144)\"], [\"0.555555555556\", \"rgb(224,243,248)\"], [\"0.666666666667\", \"rgb(171,217,233)\"], [\"0.777777777778\", \"rgb(116,173,209)\"], [\"0.888888888889\", \"rgb(69,117,180)\"], [\"1.0\", \"rgb(49,54,149)\"]], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-custom-colorscale\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "custom-colorscale", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'], [0.2222222222222222, 'rgb(244,109,67)'], [0.3333333333333333, 'rgb(253,174,97)'], [0.4444444444444444, 'rgb(254,224,144)'], [0.5555555555555556, 'rgb(224,243,248)'], [0.6666666666666666, 'rgb(171,217,233)'], [0.7777777777777778, 'rgb(116,173,209)'], [0.8888888888888888, 'rgb(69,117,180)'], [1.0, 'rgb(49,54,149)']]\n    )\n])\n\nplot_url = py.plot(data, filename='heatmap-custom-colorscale')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => {[0.0, \"rgb(165,0,38)\"],[0.111111111111, \"rgb(215,48,39)\"],[0.222222222222, \"rgb(244,109,67)\"],[0.333333333333, \"rgb(253,174,97)\"],[0.444444444444, \"rgb(254,224,144)\"],[0.555555555556, \"rgb(224,243,248)\"],[0.666666666667, \"rgb(171,217,233)\"],[0.777777777778, \"rgb(116,173,209)\"],[0.888888888889, \"rgb(69,117,180)\"],[1.0, \"rgb(49,54,149)\"]}, \n    \"type\" => \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"heatmap-custom-colorscale\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; {[0.0, \"rgb(165,0,38)\"],[0.111111111111, \"rgb(215,48,39)\"],[0.222222222222, \"rgb(244,109,67)\"],[0.333333333333, \"rgb(253,174,97)\"],[0.444444444444, \"rgb(254,224,144)\"],[0.555555555556, \"rgb(224,243,248)\"],[0.666666666667, \"rgb(171,217,233)\"],[0.777777777778, \"rgb(116,173,209)\"],[0.888888888889, \"rgb(69,117,180)\"],[1.0, \"rgb(49,54,149)\"]}, \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"heatmap-custom-colorscale\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1016", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = list(c(0.0, \"rgb(165,0,38)\"),list(0.111111111111, \"rgb(215,48,39)\"),list(0.222222222222, \"rgb(244,109,67)\"),list(0.333333333333, \"rgb(253,174,97)\"),list(0.444444444444, \"rgb(254,224,144)\"),list(0.555555555556, \"rgb(224,243,248)\"),list(0.666666666667, \"rgb(171,217,233)\"),list(0.777777777778, \"rgb(116,173,209)\"),list(0.888888888889, \"rgb(69,117,180)\"),list(1.0, \"rgb(49,54,149)\")), \n    type = \"heatmap\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"heatmap-custom-colorscale\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', { { {0.0, 'rgb(165,0,38)'},{0.111111111111, 'rgb(215,48,39)'},{0.222222222222, 'rgb(244,109,67)'},{0.333333333333, 'rgb(253,174,97)'},{0.444444444444, 'rgb(254,224,144)'},{0.555555555556, 'rgb(224,243,248)'},{0.666666666667, 'rgb(171,217,233)'},{0.777777777778, 'rgb(116,173,209)'},{0.888888888889, 'rgb(69,117,180)'},{1.0, 'rgb(49,54,149)'} } }, ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-custom-colorscale', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/custom-colorscale", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: [[\"0.0\", \"rgb(165,0,38)\"], [\"0.111111111111\", \"rgb(215,48,39)\"], [\"0.222222222222\", \"rgb(244,109,67)\"], [\"0.333333333333\", \"rgb(253,174,97)\"], [\"0.444444444444\", \"rgb(254,224,144)\"], [\"0.555555555556\", \"rgb(224,243,248)\"], [\"0.666666666667\", \"rgb(171,217,233)\"], [\"0.777777777778\", \"rgb(116,173,209)\"], [\"0.888888888889\", \"rgb(69,117,180)\"], [\"1.0\", \"rgb(49,54,149)\"]], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-custom-colorscale\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', { { {0.0, 'rgb(165,0,38)'},{0.111111111111, 'rgb(215,48,39)'},{0.222222222222, 'rgb(244,109,67)'},{0.333333333333, 'rgb(253,174,97)'},{0.444444444444, 'rgb(254,224,144)'},{0.555555555556, 'rgb(224,243,248)'},{0.666666666667, 'rgb(171,217,233)'},{0.777777777778, 'rgb(116,173,209)'},{0.888888888889, 'rgb(69,117,180)'},{1.0, 'rgb(49,54,149)'} } }, ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-custom-colorscale', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = list(c(0.0, \"rgb(165,0,38)\"),list(0.111111111111, \"rgb(215,48,39)\"),list(0.222222222222, \"rgb(244,109,67)\"),list(0.333333333333, \"rgb(253,174,97)\"),list(0.444444444444, \"rgb(254,224,144)\"),list(0.555555555556, \"rgb(224,243,248)\"),list(0.666666666667, \"rgb(171,217,233)\"),list(0.777777777778, \"rgb(116,173,209)\"),list(0.888888888889, \"rgb(69,117,180)\"),list(1.0, \"rgb(49,54,149)\")), \n    type = \"heatmap\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"heatmap-custom-colorscale\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'], [0.2222222222222222, 'rgb(244,109,67)'], [0.3333333333333333, 'rgb(253,174,97)'], [0.4444444444444444, 'rgb(254,224,144)'], [0.5555555555555556, 'rgb(224,243,248)'], [0.6666666666666666, 'rgb(171,217,233)'], [0.7777777777777778, 'rgb(116,173,209)'], [0.8888888888888888, 'rgb(69,117,180)'], [1.0, 'rgb(49,54,149)']]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='heatmap-custom-colorscale', auto_open=False)"
            }, 
            "Picnic-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Picnic-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Picnic-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Picnic-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Picnic-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Picnic-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Picnic-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Picnic\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Picnic\"};\n\nvar graph_options = {filename: \"heatmap-Picnic-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Picnic-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Picnic'\n    )\n])\nlayout = Layout(\n    title='Picnic'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Picnic-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Picnic\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Picnic\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Picnic-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Picnic\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Picnic\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Picnic-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1017", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Picnic\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Picnic\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Picnic-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Picnic', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Picnic');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Picnic-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Picnic-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Picnic\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Picnic\"};\n\nvar graph_options = {filename: \"heatmap-Picnic-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Picnic', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Picnic');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Picnic-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Picnic\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Picnic\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Picnic-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Picnic'\n    )\n])\nlayout = Layout(\n    title='Picnic'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Picnic-heatmap', auto_open=False)"
            }, 
            "Greens-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Greens-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Greens-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Greens-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Greens-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Greens-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Greens-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Greens\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Greens\"};\n\nvar graph_options = {filename: \"heatmap-Greens-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Greens-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Greens'\n    )\n])\nlayout = Layout(\n    title='Greens'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Greens-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Greens\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Greens\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Greens-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Greens\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Greens\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Greens-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1018", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Greens\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Greens\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Greens-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Greens', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Greens');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Greens-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Greens-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Greens\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Greens\"};\n\nvar graph_options = {filename: \"heatmap-Greens-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Greens', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Greens');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Greens-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Greens\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Greens\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Greens-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Greens'\n    )\n])\nlayout = Layout(\n    title='Greens'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Greens-heatmap', auto_open=False)"
            }, 
            "RdBu-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/RdBu-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/RdBu-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/RdBu-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/RdBu-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/RdBu-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/RdBu-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"RdBu\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"RdBu\"};\n\nvar graph_options = {filename: \"heatmap-RdBu-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "RdBu-heatmap", 
              "image.png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAgAElEQVR4Xu2de2AVxfXHT94vwqMoRcUIRg0UqmlLtWJttb7FWiq0oRBAhFJsIAkUEMRHJVYwIGhE8EcLpoCoRUVRo0gT8IVEbaTWR2IiWm2tUkGtD3wkN787e8MlFzJn7s7O3l1uvvmnlbszs3t2dz57zpzvnITW4B/hDxaABWABWAAWgAUOaQskAOiH9P3DycMCsAAsAAvAApYFAHQ8CLAALAALwAKwQBxYAECPg5uIS4AFYAFYABaABQB0PAOwACwAC8ACsEAcWABAj4ObiEuABWABWAAWgAUAdDwDsAAsAAvAArBAHFgAQI+Dm4hLgAVgAVgAFoAFAHQ8A7AALAALwAKwQBxYAECPg5uIS4AFYAFYABaABQB0PAOwACwAC8ACsEAcWABAj4ObiEuABWABWAAWgAUAdDwDsAAsAAvAArBAHFgAQI+Dm4hLiD8LPPnkk1RWVha+sOTkZDr88MPpBz/4AY0ZM4ays7OVF/3AAw/QypUr6aGHHrKOPbDPxMREq59+/frRxRdfTKeffrqyTxwAC8AC/rUAgO7fe4Mz68QW2AffRYsWUZcuXejTTz+lxsZGWrduHfXu3ZuWLl1KAsjcnwzoS5YsoaysLPr666/pv//9Lz388MP0wgsv0O9//3s67bTTOrHVcemwwKFtAQD90L5/OPs4tcA+oN97773UrVu38FU+8cQTdP3115OA8qBBg7SAfmCfgUCACgoK6Pvf/z7NmjUrTi2Ky4IF4t8CAHr832Nc4SFoARnQ//Of/9DYsWPp6quvph/96EfhK6utraU77riD3n77berRoweddNJJdOSRR9I999xzUMj9QKCLTkaPHk1DhgyhoqIiq8/58+fTBx98QDfddFOE9UT4fvny5VRVVXUIWhWnDAvEtwUA9Pi+v7i6Q9QCMqA///zzdOWVV1pQPe6446yrq6+vp+LiYjr33HOttXARSn/00Udp06ZNlJ6eLgV6a2srffjhh9bvDz74IN1yyy109NFHA+iH6DOD04YFAHQ8A7CADy1wINC/+OILamhosELtffr0scLu+/7mzp1rgXnZsmURVzJt2jRqamo6COj71t5FqF38iQ8DEWoXyXH7/uCh+/ChwCnBAgoLAOh4RGABH1pgH9APhK8It48cOZJSUlLCZz1ixAgaNmwYFRYWRlzJ6tWraf369QcBfV9SnAC6+BAQY4m1eeH5n3LKKfDQffg84JRggWgsAKBHYyUcAwvE2AL7gL4Pvu+//z5dc8019Lvf/Y7OO++88Nm0tLTQ+eefT6WlpTR06NCIs9ywYQOtWrUqqjX0efPmWRGAO++8E0CP8b3GcLCAKQsA6KYsiX5gAYMW6GgNvaKigrZu3Wolv7XPfL/kkktIeOmjRo2KOIM///nPJBLgDtShd5QUJ0BeWVlpHSvW3RcsWGBJ2g5Milu7dq0lnUNSnMGbja5gAUMWANANGRLdwAImLdAR0IUWffz48fS9732PZs+eHR5OrH+LRDjhzbf/mzlzppUwFw3QRdb8K6+8Qvfddx8lJCTQihUraPv27ZaH3/7vqquuorq6OgDd5M1GX7CAIQsA6IYMiW5gAZMWkGW5b968mcrLyy0PWoBd/L300ktWKP5nP/sZXXDBBSTC8NXV1SQy4oWXfSDQ94XxRZb7nj17LK9fZMRPmjSJfvGLX1h9vvjii1ainOj3nHPOIZGUJ8b+05/+RGLtHR66ybuNvmABMxYA0M3YEb3AAkYtIAO6GGT69OkWqAVc09LSrHGffvppWrNmjaVD79q1q7WuLjaKmTNnjnTrV9FObP2ak5NDw4cPP2jrVwFt4bHv2rXLGkdsO3vqqafSH/7wBwDd6N1GZ7CAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLQCge2p+DA4LwAKwACwAC5ixAIBuxo7oBRaABWABWAAW8NQCALqn5sfgsAAsAAvAArCAGQsA6GbsiF5gAVgAFoAFYAFPLRA3QB9wyrNSQ37jm9nS37K7Z7I3IKtruvT3zGz5bxlZqdJ2WfyQlJ2+V9q2e+bn8mth2mWlfaHVTjTKSvtS2ja15TPmt0+lv6U0y69RNEptlveb3CJvm9Ist09Cs/w6xJiJzV9Jz5drm8j0m9DytbRPbjzRKPBVs7Rt4OuA9LeWL/TaiQ5bvmxhxuR+k59P4CvmXL+Un6tlA+Y6A18z58OMyfUZGlO3X3m71pZWuV2/krdzZINmZkzmGlVjtjYz95q5Xxd98rY4oQR2wsWPjiwAoAPo7AcEgB56vwB0Beg48ALoBKATAeiOWB1VYwAdQAfQ214VeOjw0OGhh14GLooBDz0qtnpyEIAOoAPoAHp48kHIHSF3AN0TFhsZFEAH0AF0AB1AbzedYg0dHroRunrQCYAOoAPoADqADqBH4Achdw9obGBIAB1AB9ABdAAdQAfQDQDV6y4AdAAdQAfQAXQAHUDXoHFtbS3dcMMNtHjxYsrNzdXowWyTTgH0HofLdehdv8GLwjO7pEktzurQuXYZvBQzO0Ous+6WIddZd2XacVpyTvcuLp7TsKe1ys8nhdGLczpzMWZyi7xfri03JqcXF2MmMDp0Vmuu247RqFsP3ddyDTu3zssntsk1xGLIFkYXzunJ3dCLi/Nh17NZzTyjlWZ01KExOZ21eY26E118q6bWvIWREgobtLboac25DPgL97wVVzr09evX0/bt2+mLL76g6dOnA+gmv024jWUAdH5zGAA99CQC6AA6gB56FwB0NZ127NhBAwcOpFmzZtGUKVMAdLXJoj8CQCeCh04ED12lJYeHHoCHToeyh/5Q1tHRg8HgkT/97J0OeystLaWpU6cC6AZtTQA6gC6eJwAdQFd62QD6IQ30h7NzTKIj6r6CO90B6FFby+GBADqADqCHXiKsoSvWwQH0Qxvo3Y5xSAu95hd9/E8AXc909lsB6AA6gA6g75s52MQ2AB1At48YAtA1jKbbBEAH0AF0AB1A3z+DskqIQzjL/ZHu3njoQz+Ch67LZ9vtAHQAHUAH0AH0+Ad61Tf62uaDiQZB2R1C7iYMGU0fukDP7p7Bds/VQ89gtOYZWXL9ekZmMjsmJyPrxtRD1615zmnUxYly/WYmy+uspzbL66FzNc3FmLpacy4pLqlZfq5iTL5EamxrpYvz4aq/BZoZPTSnz1bU3tZdf3dj/3NhAzZ0zlwLryVXZPq7UA9ddytVpQ2Yc9XVqIsxuSx4XUnbBbt2GtGh+w3o0fApVsd0+o1lAHReow6gh17FWJdWVY0JoAdhD6CzG+/ELdAP6xcrPkaMc+EHb3oyrp1BAXR46EEP/Es+SpEm92zhoas8e7ltExQ7xcFDh4cOD/3gqenRXsfaYZyxY4MRBmN9udURgA6gA+htbxdC7vqSN4TcFdvUMtvJctulAugAuh34A+gAOoAOoIfnDKyhBz9qsIbu6zX0x77pTRGU899/ww5bPTkWQAfQAXQAHUBvN/0C6P5OinvsiOM8geX5/2nyZFw7gwLoADqADqAD6AB6BDf8nOUOoMsRD6AD6AA6gA6gA+iHDNA3HeWNh37ev+Gh24kWODq2/8nbpO258qldFEDv0jVd2i+rNWc06umZqey1cjp09rcMeTY6147TmYsT5bLgs1LlYyY3y+u6p7bINepizBSubfNnUvtx+naV9p3LKmfroTPZ6rolWcUFclnwCS3NUhuwNc2Z5CzRIScFc2V9XXk+mrXJuZrmCi2+dj10zdrkynrozPm2tghpd8d/XKIiJ2mzngMmj0DXew8C0YgO/fGjj3fECt3G577TqNs0Zu3ixkMH0ImyAXQC0BU1zZUAlW9YA6ArMtkBdLaOOoDuPtcBdHjo7E5w8NBDLyE8dJckbcoPDHjoXNSkM3rom3NOcJ+MHYxwztuvezKunUEBdAAdQG97YxByR8g9FG7W/IiAhx4TD31z3zw7jDN27DlvNRjry62OAHQAHUAH0MPzC9bQAXS/r6ED6PLPAQAdQAfQAXQAvd0cCQ/d30lxfz22v1sOLtvv2TvrPRnXzqAAOoAOoAPoADqAHsENP2e5Vx/nDdDPagLQ7XxcODoWWe7IchcPELLckeWuXAeHbI0OZdkagI6Qu9QCKh16VhdGh95FrifnNOoqHXpWhrz2dtd0ubab15rLq35x7YThOJ16Rqr8XNNaP5fanatbLhpx9dCTW/T6VY3JZbLzWe5yTThf8IWvcsfr0L+W2rb1a/n5BL7ia4GzRVaYOuv626U6OB/mWtjrUGTWc8VStMPx3Lm2qGzAJOm5oFEXD5Zu6dUAkxgYTCozokOvPmGAI+dPt/FZr7+m2zRm7RByV+0UB6AD6MHXEUAPrqsC6PoZ8AA6mQJ6Td63YgbI9gP9pOFVT8a1MyiADqATPPTQKwMPXbFxCoAOoAffEzb6EQMPHUBHyB0h9zSE3BFyFzpzVXhXvlMcPHQHkjZ46MY89C0DBtpxWo0de+Zrrxjry62O4KHDQ4eH3vZ2wUOHhx5aP+Y2ltHcdAZANwf0gYPc4iHb75mvvOzJuHYGBdABdAAdQA/PGUiKA9D9nhS3BUCXMh5AB9ABdAAdQG83RcJD93eW+9Zve+Ohn/EPeOh2ogWOjnVLhw7ZGmRrqoQ5rpQpZGv8ur2ydChTxpPLB4BsLQhlzdKqfvfQnzjx245Yodv4xy/9Q7dpzNp1Cg+9+2Fd5Elx3TJYY2dmy3XoWdlp0rac1jxNUQ89K12uI87OkOvQu6bLa5NzWnKu3rm4QN22aYnyRLzUZr4eOrdBDJfcxtVRV9VD536PdeEWYXdOh64ro+NAJ8ZkddaM5tmN0qrW+WiuPevCXmkD5gNDW7utSlRkdOq694uDfcgG8uRI3esM7rRmRIcOoMuRBaAD6EFg8xucAOhC0ibfQMeN0qoAemjSAtCDNgDQIwj2RP6JMfN42w/04x0veTKunUEBdAAdQG97Y+Chw0OHh972IeVjD/3J755kh3HGjv1R3d+N9eVWRwA6gA6gA+jh+UU3hIuQu4NEMoTcbfENQEfIXWqBLgA6gA6gA+jtZgjd/dp115aVm/0g5B4xfz81ON/WB4Cpg09/YYeprlzrBx46gA6gA+gAOoAeARk/J8U9dfJ3XAMi1/Hpz73oybh2BgXQAXQAHUAH0AF0AF1BzgOB3tDQQIsWLaLdu3dTbm4uzZ49m3r27HlQLzt27KBly5bR//73PzruuONo5syZ1K1bNzucjvpYAB1AB9ABdAAdQD9kgP70Kd546D+s3e+hBwIBGjduHJWUlNDgwYNpw4YNVFdXR2VlZRF2/OSTT+g3v/kNzZ8/n4455hi655576NVXX6XrrrsuakjbOTBugJ43+BnpdbM6dNVOcV3lOnW+5nmK9HxU9dAzM4Rcs+M/rjKabj10TpYmzoKTtXH10LNS5br45Ga5nl6Mmdoi16lzWnNOo67UoQfk8r1Y7/MubJDYIq95ztZKb2ZkiM1yfbEYU3dDlgCjUefXpB0Ui3GpHjp7LZqbtXDr5K2qeui6Wnym7jt3jeI50N2UhssjCBY3MaJDf+bU79phnLFjT3u2LtxXfX295XVXVFRY/yYAX1BQQJWVlZSVlRU+rra2ljZv3kxXXXWV9W+tra00atQo+uMf/0hdusj3R9E9aQAdQGc3jgHQQ68WgK4vaQPQeT09gG4PX34AenV1teWRi/D5vr+pU6fSlClTKC8vL/xvTz/9NG3bto1mzZoV/rfJkydb7USY3vQfgA6gA+htb1UyPHR46MLb4qIN8NC1d5Ez5qGf9j3THIyqv9Oe+Vv4uKqqKmpqaqLi4uLwv82YMYMKCwspP39/Fv4HH3xgHbNkyRI6/PDD6fHHH6ebb76ZbrvtNgCdszpC7sQWWeHC5gi5h54sAB0hdyt8CqD7OuS+7fTBUQHY9EFDnnoh3GVNTQ2JcPqcOXMiPO/S0lLq379/xNDPPPMMrVu3jpqbm+mMM86ghx56iJYvX+5KYhw8dHjo8NDhoYcnIKyhA+jiYfDzGrofgN7Y2Gh53WIdXfy1tLTQ8OHDac2aNZSdnS39lnjvvfdo7ty5tHLlStPfG1Z/ADqADqAD6AB6u+kVHrq/gf7sj77vCgxVnZ765PP735NgEtyECROoqKgonOUu1soXLlxoJcgtXbqUxowZQz169Ai3EfK2G264gS688EI666yzVMNp/Q6gA+gAOoAOoAPoEQDxs4f+7BkeAX3rfqALY+3cuZPKy8tp165dlJOTY+nQe/fuTXv37qXx48fTggULqG/fvjRv3jwSmvX09HT65S9/Seedd54WrKNpBKAD6AA6gA6gA+gAuoKYpx4A9GgAG+tjAHQF0Ll66LwOPVV6L9Mz5Rp10SgjPUHalquHziW+6WrUrfNJkZcO5RLqOI16Wuvn7LPO1jxvkWvYdeuoi5Phxkxs4TTqcvvo1jQX58NqzRmNOlfqletTjBlgdOq6NcZ1C75Y58NpqZmKYFy71maV9l3+e6zD8cIGnKxNu7wsY1drTMZGurb98Uv/MKJD3/6Tk2PNSWu8H9Q858m4dgYF0AF05U5xALrY5AVAB9BjnzAHoB+Ms9qzT7HDOGPHnvLXWmN9udURgA6gA+htbxc8dHjoyqhAjCVtADqAbgf+ADqADqAD6OE5AyF3BzviubDpDIB+MM6eO+cHdhhn7NiTN2831pdbHQHoADqADqAD6O1mWN01/wCAzq69m1pDf+68U93iIdvvyZue9WRcO4MC6AA6gA6gA+gAegQ3/JwUB6DLEQ+gA+gAOoAOoAPohwzQn7/AGw/9+4/CQ7cTLXB0rFt7uUO2BtmaeDCR5c5XDHNjy1hlghpka8F95xmJHVOWlVtWsNbtfSxbe2HoEEes0G08+JFtuk1j1i5uPPQTvsfVQ99fn/ZAy3bplskaOzM7Tfp7Rhf5b1zNc1U99PT0JOmYvJ5cXn+cL87C1M8OngmnNdetlZ6WyI+Z3CLXqbMadabOOtdOGJzTsOsWbuF16HL9ujgffR263LYqHXpCS7P02XMD2iqwtDDQ5mpv656r9RHBQJLXhMtrzbPr8g7qobuhUVd9SHGw53aYO/2FHUZ06AB6Jwi5A+j64OWgLB4dAF2/EhuArtBuKzY4AdCdfGDoee++B/pPT4uZx9t+oMEPyZ1GT06og0HhocNDV66hA+gAemiS1/RAOe02gE4BeOi2ePi3i39o63hTB39v49OmunKtHwAdQAfQ214vhNxFmB8hd4TceS2+1yF3AB0hd6kFsIYuQupYQ8caeugVAdCdhLg1Ixjw0G15rHXDTrd1vKmDv/vAU6a6cq0feOjw0AF0eOjhCQZAB9D9voZed8mPXAMi1/F373/Sk3HtDAqgA+gAOoAOoLebNRFy93fIHUBHyB0hdyasjpB76PHAGjpC7pZ3CtkaW7bW6zX0F0d446F/51546HaiBY6O1ZWtZXXNYMdldehZ7ujQ0zLk9dIzGTB3TZfXCed16HL9ujBOOlsPXb7+ztVDz0rlx0zW1JNzenEO2OI6OZ16ElM+les3kalbntDskg6dHZPPl2B16lytdE4vzu1xzmTAq0K/nKRNF8qqMXX71a2jHjof+dq8tha/WUjC5X9ujPnD2heN6NB3/OLHjlih2zh//RO6TWPWzvOQ+549e2jixIk0depUOvPMM60Lb2hooEWLFtHu3bspNzeXZs+eTT179mSNAqATAei8vAxAD3rgzQA6txkLgB6aZgH0g3EDoEfxXXLttdfSZ599RkOHDrWAHggEaNy4cVRSUkKDBw+mDRs2UF1dHZWVlQHoQQvAQ+c9aXjoYpvar6XvCoAe3NZUlVXOaOPhoYttYeXePfchYMxDLzgjCrKYPyT/nq3mOzXco6ce+ubNm+nll1+mtLQ0GjBggAX0+vp6WrZsGVVUVIS+FIOALygooMrKSsrKyqI1a9Yc9DSNGTMmAR46PHTxvADoALo1b2iug8NDd89DH/Ls3wKJwT+nDPv7r0KR3Fj/nXTXllgPaXs8z4Auwulz586lxYsX08qVK2nQoEEW0Kurqy2PfObMmeGLEeH4KVOmUF5eHq1evfogoI8dOxZAD1oLIXcAXbw08NAB9NCHCaOL92ANHUC3zWfbDTwD+tVXX03Dhw+n/Px8uvXWW8NAr6qqoqamJiouLg5fzIwZM6iwsNA6VvYHDx1Ah4ceejsAdADdj0A3FXJ/afRPbIPORIMT76wx0Y2rfXgC9E2bNlFjY6PldYu/9kCvqamh2tpamjNnTvjCJ0+eTKWlpdS/f38AHVnubDY6Qu4AugUzhNx956EbA3qhR0BfC6B3CGCRtf7aa69RQkKC9fuXX35JSUlJdO6559IFF1xAS5YssdbRxV9LS4vlyQfXzik7OxtAB9AB9OBbwFZxQ1IcgO7DkDuA7qpzbnXuiYd+4GW199BFEtyECROoqKgonOW+bds2WrhwIWsNLuTe9RvymufZ3fl66BlZqdJx3aqHnpYu16FnpMkzmDmtOVdHndOLi4tna56zGnW51lw1ZirJ23J6cXZzGEZLLq5Tu9+AXArmJPzNtuWgrfmbNSHottXUqKvqobP6bS4bnclk57x3y7tn+tWtP65bR906H07H74JG3RqTWWPXtcGQp18wokP/x9iz3CdjByN8e3W1J+PaGdR3QBcnv3PnTiovL6ddu3ZRTk6OpUPv3bs3gB60AIDuALwAOgtsAD00xQDo/gb6y5eebYdxxo4dVPlXY3251ZEvgG7i4uCh8540PHSxtSu/qQo8dHjoAHrbR42PPXQAXU5MAB0hd1KFvxFyd7DPu4P1bITcRXKb+ZKkCLnzkja/h9xfvuwcEz6g7T4Grdpsu02sGwDoADqA3vbWwUOHhw4P3f8e+isTz401J63xBv7pcU/GtTMogA6gA+gAenjOQFIc1tD97qH7BejR1hwRMmyxeZpQc3Xp0sWSa4udUd34A9ABdAAdQAfQ282uSIrzd1Lcq7/2xkP/1h/3e+jR1hxpbm6mkSNH0i233EJHHXUUvfjii7R06VIL8G78AegAOoAOoAPoAHoEX/wsW3v1N+e5wUJln9/6v03hY1Q1R/Yd+Pnnn9Oll15Kd999N4lt7D/66CO6/PLL6a677lKOp3NA3AD9+O88Lb3+bodlSX/r0k1RD72L+ZrnXL1zcaKpjA49M0Ne6SgrTa7d5uuh89nfXL8ZjA6dS7bjaqwLG3D96tZK59bIxZhJjJ5cu1Y6p1F3UMo0oaVZ+kxrh82DPWpvWMMk/wU4jTqzo5u4QF39NudlB1TV1phzirX3boW/ucRARqPe2hyQPiNK/T9jI91qaz+oec6IDt0PQFfVHGlv+Ntvv53ef/99GjZsmAXy8847L1wqXAfaXBsAHUBnN44RDw+Azmvfkxg5HLcVbSKAzu7oBqCHpm4APRJhr11+vmkORtXfgOWPhY+zU3PknXfeoSuvvNLy0Hv16mUVJevevXtUY9o9CEAH0AH0trcGHjo89BBA9Txb3R3UlPXZ4aFHcK2+6AK7nDNyfP/bHg33E23NERFiLykpod///vfUr18/evzxx+kvf/kLLV++nFJS5DuC6p4wgA6gA+gAenj+QMgdQLc+anwccvcD0EVxsWhqjgjwv/DCCzRr1qzwOyYqiQrI5+bm6nJb2g5AB9ABdAAdQG83RcJD9zfQG6ZcaByE0XSYt7QqfBhXc0T8JjLZx4wZQ//9739p/vz5VFFRYRUXe/fdd2n69OlWlntWljy3K5rz6egYAB1AB9ABdAAdQI/gg5899Ibiobq8c9Qur+KRiPaymiN79+6l8ePH04IFC6hv3770wAMP0EMPPUStra2UmppKl112GZ188smOzkXWGEAH0AF0AB1AB9ABdAViDwS6K0R22CmADqAD6AA6gA6gHzJAf73UGw/9hJsjPXSH7HWleacAeteejA69azpr2Mxs+e/pmfIsxfRMeR11TmcuTobTqWekJ0jPl9ea62nUxWC6enK2qEvqV6zdWR16q1w3r7sfuzgZrhobq0NntObJAfl1JjXL74k4H109uW47MaYrBWECTIEVRqMuzodfz5b365YGmzsfNsudq7HO6MUtG3B13zW15px9xJitXA12zTFP3vSsER164/SLXIGhqtPjFz+sOsTz3wF0AF3poQPoCh06gM5/fADofI11AN0WCAF0ubkAdAAdQG97P+Chw0O3PGJGsgUPXezzrqfTN+ahz/iprQ8AUwcfv+ghU1251g+ADqAD6AB6eIJByB1A93vIvWnmxa4Bkev4uIUbPRnXzqAAOoAOoAPoAHq7WRMeur/X0AF0hNylFugCoAPoADqADqBHzJF+Top744qf2XFajR2be+ODxvpyqyN46AA6gA6gA+gA+qED9DkeAX0+gO7Wh8hB/XLlUyFb4yumcfIyYWhkuSPLXTwHunK4BGS5I8s9+PyYSop7A0CXcjVuPPTc/KekF9ntG3IdelY3XoeexenQMySDvmAAACAASURBVORa8zRGh66qh879npqWLL3O7PS90t/SGd13VqqqHrr8dw72urXSVR8RaYny8+FKmarqoXOlTpNb5LblsuO5Cm7ceMIGXHlVN4qoKKHNgFkb9kxdd3E+uuvZga/1NOrWmJzuO8YZ8OJ8WE19s5B2d/zH2oDRmSvH1NTFD374GSM69J1zh8XMUWw/0LF/eMCTce0MCqAD6ASgh14ZAF3hhQPo2h8YupvOKOHaCYH+5lU/t8M4Y8f2u36Dsb7c6ghAB9AB9La3C0AH0OGhh14G3Z32OI26KQ8dQJd/DgDoADqADqCHZwg2dA4PHR66akmC2XTGGNCvucQtB5ftt9+8+z0Z186gADqADqAD6AB6u1kTa+j+9tDf+v1wO4wzdmzf399nrC+3OgLQAXQAHUAH0AH0CMb4OeT+z3kj3OIh2+8x19zrybh2BgXQAXQAHUAH0AF0AF1BTgDdzqeFw2MhWyOCbI0IsjX9AiviFcQaOmRr4jnwtYde5pGHfjU8dIeYjr65W0DPzEqTngSnNefqoSt16OnyOuucDj0j7WvpufK10nkduhta8/QURT10RjfvRq10YThOM57SLNeh81pzph56C293LuteV/fNFV9RAr1F/ny58SEQOp9m6TPthkbdEcwYjXqrprwsdD6M1twFXbxbNvju/U8Z0aG//YdfRA8Gg0fmzF1vsDd3ukLIXRFyB9D5neJ0N48B0PlognjdAXQAHUA/GHwAuvxjAEAH0B3t5Q6g8559cgAeOrf1K+fZw0MPTdzw0CMB9s78X7rj3ip6PXrOXzwZ186gADqADqC3vTEIuTvYr50Lx2vq1wF0AL0jmL1zY4Edxhk79ugr7jHWl1sdAegAOoAOoIfnF921eayh8/vOYw2dyNQaOoCOkLvUAqriLFhDxxq6eHiQFOfAe4eHzofNmUIyCLkfPHX/a+FItxxctt8+M+/2ZFw7g8JDh4cODx0eOjz0drOmtmQLWe7s1rimPPR/L/IG6EfNANDtfFw4OhaytaAnDdkaJbfKpWCq8qlYQ3fghWMNnYUZQu7mQu4AeicIuR970pPSq2TroXfl66FndJHr0DmtOatDZ3Tm4iI4nXoKUw89Iy0gX1pI+0L6G5epLhplpHL6dnm/nDQtLVmuLw6NKc8O535LTZKfazKjJRdjcjIx7mOA1aEzWnOuXeh85DZIZPrltOZOssr5dXL5/dRdlxc24DPkzWvUrRA3q+1m6qwzNcZb2Prscp25+nzk7zyn0+c+MJRjMgVYuH3w8+/ZakSH/u/Fv3Lk/Ok2Pmr6XbpNY9YubkLuALrw0AF0AN3pTnGaYA5otmM8ewA9xAH+A6PzAf3dm0fFDJDtBzqydJ0n49oZFECHh07w0EOvDDx0fiMXeOjBTPav4KFzNc9j4aED6HLEA+gAOoDe9n4A6AC62iMG0L0G+n8qRttxWo0de0TxnRF9NTQ00KJFi2j37t2Um5tLs2fPpp49e0Ycs2HDBlq1alXEv3355ZdWuxNPPNHYue3rCEAH0AF0AD08sXB7p8NDh4cuHhTPgX5roXEQRtPhEVPXhg8LBAI0btw4KikpocGDB5MAd11dHZWVlbFdffLJJzR58mQL8mlp8vysaM6no2MAdAAdQAfQAfR2syOS4hTr9h4nxf3HB0Cvr6+nZcuWUUVFhfXkCMAXFBRQZWUlZWVlSXl8991306effkoTJ07UZTbbDkAH0AF0AB1AB9AjQMF+1HgM9HeXjnUFhqpOj5yyOnxIdXW15ZHPnDkz/G9Tp06lKVOmUF5eXoddtbS0WF794sWLqVevXqrhtH4H0AF0AB1AB9AB9EMH6LddqgU7p42OLKoMd1FVVUVNTU1UXFwc/rcZM2ZQYWEh5efndzjUli1b6Mknn6Rrr73W6alI23d6oGdm8+sYGUw9dG0deoa83rm4U1zNc06HnpaWJL3RWYwOnauVLjrk9OS6enFVZn0qo1PXrc/ObTojrpPdWKZFXg89uYWpqBaQb3STrKiHztdZl/frSIfOys80pWmakjZxT/T3iNfTqIsxA1/JpWCc56q9wxzj8YrzaWX07QFG3x5g6qhz12GNyXnhmrXdT1xbY0SH/q4PgF5TU0O1tbU0Z86c8Jwr1sZLS0upf//+Hc7DwnufNGmSK8lw+wYE0AF05davAHpwL3cAPQhXAB1AF0lx8o1wuA8MY0BfNt41D5fr+Mjf3hH+ubGxkZYsWWKto4s/EU4fPnw4rVmzhrKzsw/q5pVXXqFbbrmFVqxY4eq5A+gAOoDe9orBQxc7s3HQBtABdO+B/u/lE1yFoqzzoy5fGf5JJMFNmDCBioqKwlnu27Zto4ULF1oJckuXLqUxY8ZQjx49rDbz5s2zjrvwwgtdPXcAHUAH0AH08CQDoCPk7veQux+ALmy0c+dOKi8vp127dlFOTo6lQ+/duzft3buXxo8fTwsWLKC+ffvS+++/byXLrV271hWpWvsvBAAdQAfQAXQAvd2siDV0f6+h//v2X7vq5Uo99Ml/9GRcO4MC6AA6gA6gA+gAegQ3/JwU96//m2SHccaO7fMbd9e/TZwogA6gA+gAOoAOoAPoCqIC6CY+OaLsQ7faGmRrBKAD6AA6gH7oAH3F5CipYPawPpNuN9uhC711Cg+9a49Mqekyu6jqoadK22rr0BX10DmteSrTltOvZ6bJdcsqTbiu7ptrx0nhhMG5tlwtdd1a6WLMJEYXzhVuSWYlbXK7O6mHzp1rUqu8JjynURc20K1dztctl58Pl4SnPJ+AvFCKrn5djBloZgqwMPpsVi/OVGkLMDpzcT5u6NvVOnRGmsbUi+fqrA9c+bgRHfq//vhbF1Co7rLPr0MSNT//AegAehQ7xck3TuE+BgD0YElW5iMBQOdlcgB6CB0AeiRCAXT5JwWADqAD6G3vBzx0eOjw0Pd9RPjXQ3/nT0WeOMlHT7zNk3HtDAqgA+gAOoAenjMQckfIPRQV8DHQV061wzhjxx494VZjfbnVEYAOoAPoADqA3m6GxRo6gN4RcAF0tz5DOuiXy3JHUhwRkuKCRW+S5MlZ4pFCyB0hd4Tc/R9yf3tVSQzJsn+onMtu8WRcO4PCQ4eHDg8dHjo8dHjoEdzwc8j97TtK7TDO2LE542821pdbHQHoADqADqAD6AA6gK6gLIDu1mdIB/32+/YT0tG4kHtW1wz2LHmtubyuOdcuJY2vh57G1EvntObcb2mpcm2tSofO1VLPSJWHsVOT5b9xkjZxQ7hz0q2VnsacjxgzJUF+vrrheLamuaN66EwNdk09vbCBtp68hdOa6+nFQ+ejW+HNyZiMDp3RYHOlQ1mNuqoeOleb/Gt57faApl5c2J3TqevWWR+w/DEjOvS3K6fHkCztQu6XLvZkXDuDxo2HDqAH14jTkqX3HkAnAtCDuviAfKMbAD30+nAfNSzovuY+BJiscQDdDrPon3/+na3jTR18zLibTHXlWj8AOjx0ZcgdHrp+whw8dH2vHx56aN7X3lgmTj10AF3+PQCgA+gAetv7gZC7Pnx1t1rl2gHoAHpH6Prn6pmuebhcx8eMXejJuHYGBdABdAAdQA/PGVhDR8jdigpwuQLMpjNcO1Nr6G+tucIO44wd23fMjcb6cqsjAB1AB9ABdAC93QyLNXQAvSPgAuhufYZ00C+S4pAUJx4Lvkobv7EMQu4IuYfC/Mhy97WHvnZ2DMmyf6i+hQs8GdfOoPDQ4aHDQ4eHDg8dHnoEN3wN9DuvtMM4Y8f2HX2Dsb7c6qjTAz0zW1EPPStNantOL56eKdeaq3Toulpzro56uvwyWK9WXHx6Klc+VU9rrpKQcfXSteuhK3ToXL/JrXp1zZNb5LZTSch0M+S5domMrlvca+6c3Eh847xhy1tm9e2MRl2zVrrKQw8WS5fPxVwddc01aTEYB1ftDHiVVI6p0R5ga8LLdfF5FVVGdOhvAejSZ9AToH/66ae0du1a2rp1q3Viffr0oWnTptFRRx1l/XdDQwMtWrSIdu/eTbm5uTR79mzq2bMn+1GjG3IH0PkwNYAeeuwAdBVc9TZyAdBFdTe5Rh1AP3jaf/POq9xycHnGjL7ek3HtDOoJ0Pfs2UPPPvssnX322ZSWlkb3338/Pf/88zR//nwKBAI0btw4KikpocGDB9OGDRuorq6OysrKAPSgBTjvHR46/3HC7VwnHi546PDQ4aGHplndne24aIIpD/3NdVfbYZyxY/uN4hlkbCAHHXkC9APP96233qJ58+bRqlWrqL6+npYtW0YVFRXWYQLwBQUFVFlZSVlZWbRmzZqDPmfHjBmTAA89uHUps1McQu7BjyGE3Akhdz7SAKC7B/Tjb344kBj8c8ArqymALreg50D/+OOP6dZbb6V+/frR6NGjqbq62vLIZ87cv3nA1KlTacqUKZSXl0erV68+COhjx44F0IP3GECHhy5edayh62frA+j+B/rOu651+k2g1f7YX12n1S6WjTwD+nvvvWdBWgBdhNavuOIK6t69O1VVVVFTUxMVFxeH7TBjxgwqLCyk/Px8qW3goQPo4uHgZGvw0AkeevAZUe9OJ88HQFKcWPOXJ77FIuS+825vwHrsSG8+JOx8EHgG9H0n+dVXX9GWLVvorrvuopUrV9ITTzxBtbW1NGfOnPB1TJ48mUpLS6l///4AOhNWh4cOoMNDD00RujveqdoC6AC6HcDG+ljPgb7vgkeOHElLly6lDz/8kJYsWWKto4u/lpYWGj58uFg7p+zsbAAdQGeT1+ChI+SugjI8dB7Kwn5+Torbec+8WHPSGu/Ygms8GdfOoJ4A/Z133qHMzMywFO2pp56i22+/3ZKytba20oQJE6ioqCic5b5t2zZauJDfGL/voK3S6+bqobslW0tNl+vQOf26uAg3dOgpqfLSqpzmW5wPB0mubrlurXTVmFw2Oq9f53eKS0uRa4xTk2JbK13YgNOwJ7bKzyeZqYfOra+LMbmkOVajrqn75uqdW2Bu4bTm5mulW5MIdy3a9dn16pZbcGVD3HplWbk+LRO4UGf9+JseMqJDf+Mv3sjHcn/pjVzO90B/8cUXafny5db6eXJyMuXk5NCkSZOsxDjxt3PnTiovL6ddu3ZZvwkdeu/evdnrAtD5NXQAXV0PHUAH0AH00DQLoB+MGwDdzqeFw2MBdABdPELw0IVnr7erHTz0tkkIHrq/gb7emy1Yc38RueWsnQ3QxH4qGzduJJEz9uMf/9hyYN348yTk7saFAOgAOoAeerMAdP1d7eCh+99Db7zXmyIpx4/YXxTGzgZo9957L+3YscOSYnfr1s0N/IX7BNBd2ssda+hi7V2+zquSkPFV0+Rrp/DQAXQxu+nuOw+gA+gy4rYHumoDtH19CPAHNz6zlpi7du3qKsyt5z6YhMZvJOz6KZgZAB46PHR46PDQ980mALpCXqYozuLnNfTX7ys3Aw2bvZwwfFa4hWoDtH0Hvvnmm1ZCt9hDRWyYlp6eThMnTqRBgwbZHD26wwF0eOjsurN4jJDlHlQeIMudr8SGLHdFVABZ7qay3Bvuvyk6uhk+Ku+S34V7jHYDNFGj5LrrrrMSu3/4wx/S66+/Ttdcc421lbmAu+k/AB1AB9Db3ipkuSPLHSF3/4fc/QD0mpqaqDZAE1753Xffbam29v2JtfTLLruMBgwYYJrnnSPk3qVbptRwWdlMoXDhnXZh6qEzWvPUDEaHzrQTJ6pbUY2TpiWnJkltkJEm9x5EI652uW6tdFU9dH6DGPkaOtcv16dl92S9flMS9DTqSYyWXJwPXw9dXmeda5cU4LX4uvvAu6FRFzbgdOrau8Ex0YTQmEwpWG0dOtcns9Vs8HzYeuiadda5PoUN2DrrTK10rt2xNzxgRIdef/8S4yCMpsP+l0wLH9bY2BjVBmjvvvsuXXnllZZHvu9P7Hoqtj0/7rjjohnW1jGdwkMH0IOJUgA6u3QAoIfmDQAdQPc70F/bcIstyJk6eMDPS8JdiWQ32QZo4jex66lIhuvRowdNmzaNzjnnHLrwwgvplVdescqE33HHHZSSInf6dM8ZQIeHTvDQQ68PPHQAHR566F3ws4fuB6ALG8k2QNu7dy+NHz+eFixYQH379iXhpYvEOPG/PXv2tAqPcXVJdGFuPbudIcsdHjo8dPGwI+QugI2QO7e1K4Duf6C/8sBSJ8zTbjtw2BTttrFqCKDDQ4eH3va2wUOHhw6g+x/oLz8YKtwV679BP/ttrIe0PR6ADqAD6AB6eOLAGjrW0P0ecgfQ5ZwH0AF0AB1AB9DbzZHIcvf3Gvo/Nt5u23M10eDbF0820Y2rfQDoADqADqAD6AB6BGj8nBT30sYVrkJR1vmJF7tTUMXkxcQN0I/51hapXbJ7ZEl/y+ySytozI0uuQ9fVmnM6c3EyKWlyOUNquryuOddvcopch56amsjagNOas7rvFLlWmtvnXZwMt9c7Vw9dt50Yk0uaS06Sa4U5G+hq1MX5cNpuvh66nkZdjMklzemG4zm9fWILn6TH1ktn9OJsv27p0LV3y+N16MRp34MSKdlfgNGoq+qhtzJa8wBXn535re919xvRoQPonSDkDqDzG9IA6GKDHPnGMQB6aJIA0B2soQPorNzNFND//tBKk05t1H2d9NMJUR/r1YHw0OGhEzz00OsHDx1AF8+B9ho6gB4ToO94+A5PeJl/0XhPxrUzKIAOoAPobW8MgA6gA+ihl8HPIXcAHSF3qQWwhh4M1WMNHR562xuCkDs8dL8Dve6RP9txWo0d+92h44z15VZH8NDhoQPo8NDD8wuADqD7Heh/q1rrFg/Zfr93YaEn49oZFEAH0AF0AB1AbzdrYg3d3yF3AB0hd4TcIVtDlnvwLeCkZ+IlgYcOD93vHvoLVevsOK3Gjh184ShjfbnVUafw0Lt0l9dDz8hS6NA166GnMfXQHenQ0+Q69BSmRGpyKtOOgb148NJS5TrZDEZrnpoi1xhnML9ZYybL27J7rjP9qmRruhp23XZJxMvoklq+lL73bmjUxWC8vl1+Pomt8mvhrkNVE96NeuicBy5soOuhc0VftPtUnQ+n42+Va9QTGP26sIGuhp1Lpjt6zl+M6NCff/Rut3jI9vv9C0Z6Mq6dQQF0AD1Yl1e+6QyAHnqd3NjMBkAPRgRa9TeWYSHJgA5AFx8tctgD6B0jFEC382nh8FhuYxl46KJ8Kjx0eOjB56BFvoscPPTQJKTtTXM6dPY3PlKj++FCceqhP/fYXxzSQq/5yef/Uq9hDFvBQ4eHDg+97YXTDZ3rtoOHDg899AEBoNth3vZN99k53NixPzhvuLG+3OoIQAfQAXQAPTy/YA0dHrrfQ+4AuvxzAEAH0AF0AB1AbzdHIuTu76S4ZzdtcMvBZfs99byfezKunUEBdAAdQAfQAXQAPYIbfs5y3/b4g3YYZ+zYIef+zFhfbnUEoAPoADqADqAD6AC6grIAulufIR30mzNAXg+9S/cM6ZlkMjpz0Sg9U65T57TmaelMTXOm3rkYM4Wpec5JzNhMdk6jrpCtcXu9u1ErXdiA15rLk4h09etiTN22XDu+jjqfDJXcyui+mUQqXY26sAGXBc+trycG5PKz5IA8s55rJ84nidG3c20THMnW5PeFlbx5kOXOa981ryNod+46W7k668xvR82424gO/ZnND8eQLPuHOu2cizwZ186gceOhA+gKaRqAzn4kAOihaQNA57POAXSxLaxcw879ZgroT/+1yg7jjB37w7MvNNaXWx0B6PDQKRkeuvV+wUMH0MVzoLs7nRc7xXVGDx1Al38OAOgAOoDe9n4A6AA6gB56Gfwccn+q+jG3HFy239PPOt+Tce0MCqAD6AA6gB6eMxByh4fud6A/Uf24HcYZO/bHZ51rrC+3OgLQAXQAHUAH0NvNsAi5+9tDB9ARcpdaAFnuwTAr1tCxht72hsBDh4fudw99a021Ww4u2+8ZPznLk3HtDAoPHR46gA4PHR46PPQIbvh5DX3LFrlE2Q787B575pln2m0S8+M7BdCzuqbLPfRs+W+iUXqmXE+eli7XqKdyWnKmprkYk6uXzv2mW1EtmZG0ifNJTpaXV+VqpesmmYkxM1Ll2mU3SpladmdqsKckyWvCs5p5pk9Ooy7Oh7tOrrCLk/rjSQG59j2J0b5zmnDdPoUNeO07U4OdKcuayNUQD47JFkvR1prLnx9VcRY3sudVJWT5Sm3ctch/O6J4rREdOoAu/04A0AH0YGlVvh46gB7c7AdAJwA9OJEC6Irysu4Dvbpma8w9XzHgWT85I2LchoYGWrRoEe3evZtyc3Np9uzZ1LNnz4PObdasWfTqq69SQkKC9dvFF19Mv/71r125BgAdQAfQ214teOjBndngocNDF+8DW0vdWw9981+fdAWGqk7POftH4UMCgQCNGzeOSkpKaPDgwbRhwwaqq6ujsrKyg7qZNGkSlZeXU/fu3VVDOP4dQAfQAXQAPTyRAOgIuVsPA4B+EFzbA72+vp6WLVtGFRUV1nEC8AUFBVRZWUlZWVkRbX/1q1/RunXrwh66Y2ozHQDoADqADqAD6O0mSayh+xvoj21+yk0mSvs+/5zTw79VV1dbHvnMmTPD/zZ16lSaMmUK5eXlRfQxbNgwOuyww2jv3r10/PHH0+TJk6l3796uXAOADqAD6AA6gA6gRwLGxx561aZnXIGhqtMLzzstfEhVVRU1NTVRcXFx+N9mzJhBhYWFlJ+fH9HV559/ThkZGdTS0kIPPPAAPf7447RixQrVcFq/A+gAOoAOoAPoADqArkBoe6DX1NRQbW0tzZkzJ9xKeN6lpaXUv39/ticRmr/tttssr930H4AOoAPoADqADqAfMkB/+LFtpjkYVX8XnT8kfFxjYyMtWbLEWkcXf8L7Hj58OK1Zs4ays7PZ/kaMGEF33HGH8rioTuqAg+IG6Efn1Uivn6uHnpGVxtpNtx46pxdPcaBDd6PmeUpqMmuDpORE6e9crXQua5zTWIvBOB26F7pv3Wvh66HLa4gLG+jWUtfVqIsxkzj9NqdDZ9oltzB13Zl659b5MHXWEzVrpXM11sWYbJ11VrbG1LfXlLuJ8+E0426s94fG1KylzoTqj/rtKiM69I2PbtdhneM2F1/wg3AfIgluwoQJVFRUFM5y37ZtGy1cuNBKkFu6dCmNGTPG+v9C1nbCCSdQa2srrV+/np577jlL7ubGH4AOoBOAHnq13NiwBkAXFdwAdF39OoB+MPb8AHRxVjt37rTkaLt27aKcnBxLhy6S3UTy2/jx42nBggXW2vn1119P7733HqWmptKAAQPo8ssv71CvbgLwADqADqC3vUkAOjx0eOihl8HPHvoDj9SaYJ/tPoYNPcV2m1g3ANABdAAdQA/POwi5I+Tud6Df9/DzseakNd7wi77vybh2BgXQAXQAHUAH0NvNmlhD97eHDqDLEQ+gA+gAOoAOoAPoEZTwc8h9/cYX7Ditxo79xcWDjfXlVkcAOoAOoAPoADqAfsgA/Z4H69ziIdtvwc++68m4dgYF0AF0AB1AB9ABdABdQU4A3c6nhcNjOR16Vjd5zXMnOnS2bnmGvI46106YISVFrgvnSp2mMGVQdWuli/NJSpGXV03hfksOSO9qagqj2Q224mqp89no8n65PsWJcvp2vnyqXE/Onau6Hrq8X64td64pCbz2nVs/5mqTc6VVdQu+iHvC10OXXwtb6pXRzFtjMhpsLmlQN0ytqk2u229Q+Cx9/7yowd7nN/9nRId+1wMvOqSFXvNfDfuOXsMYtuoUHjqAHtQCM5vHcFAG0ENvI4DOwxVA108kA9DtEe/O+/9ur4Gho0dfcpKhntzrBkB3EHKHhy6iCYz3Dg+d3awGHrrYCY6P1MBD1/9QiFcPHUCXfxAA6AA6C2V46PDQ900fCLnzG+/ohsbhodvzWFff95K9BoaOHjv8REM9udcNgA6gA+ht7xfW0PlNVQB0AF28Krp7y5taQ6+892X3iMj0fOmIQZ6Ma2dQAB1AB9AB9PCcgaQ4JMVZD4NmMRkuSgGg20Gz3rEAOoAOoAPoAHq7+RNZ7v4G+qq/vKJHO4etLvvlQIc9uN8cQAfQAXQAHUAH0CNp42MP/U/3vOY+GTsYYWLBAE/GtTNo3AC9zwnV0uvO6sro0Lvw9dDT0hk9uabWPDVN3qe4CK5eOqs15/TrKfKa5slMpro4H+533d+49WoxJqcZ162HrhqTl6bJs7F1JW1cO2ED3TV9RyVbE1uk7xEbjtfUbnMadXEirJ5cs1Y6V2NdjKlbZz2BqQWuq18X58OvWcvvl26SnvUA6GrYmQ+BnAkVRnToALoc8QA6gM4CG0APvTy6cE1Nlm9+AqALYMtrpQPooWcPQI8E2Iq76u04rcaOnfSr/sb6cqsjAB1AB9Db3i546MFoDDx0eOg+99CXr3vdLR6y/V4+6gRPxrUzKIAOoAPoAHp4zgDQEXL3e8gdQEfIXWqBDAAdQAfQAfR2MwTW0P29hn7bnY12nFZjxxaNPt5YX251BA8dQAfQAXQAHUCPZIyPk+JuXfOGWzxk+506JteTce0MCqAD6AA6gA6gA+gAuoKcALqdTwuHx0K2JuRlTNlVyNbYTHXx+CEpDklx4jlAyN3fIfdbVu90SAu95iVjj9VrGMNWncJDz8zm6qGnsuZO47TmnEad0ZqnpsvBK06G03a7UfOcq3dunU8yo2FnyrImMe1SkhNYu3NyL90a4+7VQzevUVd9YPBac/n5qCq8cR81XMJcEsnH1N1OVthAt665rn5dBXROw677IZDUylecS2g1rzVXFYQhRlOvK6M7ZtxCIzr0xZVvxRCR+4eafmlfT8a1M6gnQG9ubqZ169bRpk2bqKWlhfr27UvTp0+nXr16Wefe0NBAixYtot27d1Nubi7Nnj2bevbsyV4X56ED6HyZW6HYoAAAIABJREFUUwA99Gjpa80BdABd37MH0O0giwhAl9vLE6B/8skntHHjRho2bBhlZWXRmjVr6M0336RrrrmGAoEAjRs3jkpKSmjw4MG0YcMGqquro7KyMgA9aAF46GIXOT0PFB56MNqSJPf2lFEBRqMOoAPo4vnhvHdTHvqiO/5p7wvA0NEzxh9jqCf3uvEE6AdezhtvvEE33ngjrVixgurr62nZsmVUUVFhHSYAX1BQQJWVlfvgL8I2EX9jxoxJgIcenKyZ8HcKs70rPHR46PteKITceTAj5K6/c93RY24MJAb/nOKsfNU7TrvQaj/rsqO12sWykS+A/uCDD9LOnTtp2rRpVF1dbXnkM2fODNth6tSpNGXKFMrLy6PVq1cfBPSxY8cC6EFrAei8BwoPHR66mFS4NX3rd2ZNG0AH0GMJaLtjeQ70Xbt20RVXXGF56GINvaqqipqamqi4uDh8LTNmzKDCwkLKz8+XXh88dABdPBxOCpNgDZ3P9EdSnEjSk+/Nj6S42ITcF/zpX3Y5Z+T42RP7GOnHzU48BfpHH31kJbxNnjw5DOuamhqqra2lOXPmhK9b/F5aWkr9+8s3xwfQAXQAPfTK6OYYiLYIucNDtx4iH2e53/DHd91korTvK399pCfj2hnUM6CLxDgB7VGjRtGQIUPC59zY2EhLliyx1tHFn8iCHz58uJU4l52dDQ89NUlqA4Tc4aED6KHXA7I1/dA4gN7xFAugS9Dz+eef09y5c2nEiBF02mmnRRwlkuAmTJhARUVF4Sz3bdu20cKFC9kPlSOP/6v09y5dM6S/pWfytclTGa05q1FndOjJDJQtL4lJYGOhzcFec9MZa3JMln9EcFn3nA49menTGlM+ZFBeJg97OvFOdWuws14tk1XOnauwAbd8oOtJp6XIbWeNyWSyu3E+yvVszTrriUy7xFbeBtzHAKcJd2PtXdwTzkau1WB3YevXfqP/YESHXvZ//7HjtBo79urfHBHRl1159Z49e2jixIkkcsLOPPNMY+fVviNPPPRHHnmEbr755iC4ImG6ePFiK6wuEuTKy8tJrK/n5ORYYfnevXsD6GLC5TLZAXRH4WYAHUBXefcAuvD8mY1wAnJZpCmgX3f7+67AUNXptZO/GT5ER1597bXX0meffUZDhw6NL6CrDKfzOzx0hUYdHrpSgw2gA+gAemj2DXp60mkYQCelvPpA423evJlefvllSktLowEDBgDoKsgD6AC6eEYQcuehjJC7SHpDyJ2Fss+Bfu3yXSocuPL7dZeHdjIVfyp5dfsTEDueiiVmEYFeuXIlDRo0CEBX3SEAHUAH0ENvCbcODqAD6JYHzoXNfQ70q2/7QIUDV34vKzos3K8defXVV19tJXYL2fWtt94KoEdzdwB0AB1AB9D3zRVIigsmljKRCAA9GqpEHtMe6NHKq0W9EqHcEhujiT8APUq7A+gAOoAOoAPo+yfMeAX63KW7o6SC2cP+MGV/gbBo5dUiofu1116jhIRQdckvv/wyqOBJonPPPTdi8zRTZ+pJlrupk2/fD4AOoAPoADqAHv9An13xoRsIUfa5oLhH+BhOXi1+W7p0KQVrjFCPHvvbwENXmnj/AUfkbpYezenQ0zId1ENPk9c1T2V+S2F+ExeRwkjTOA27bt1yrp04H06HzmrNuYIwTK10MSanU09JDkjvtW6dcGtMVjMuT6RKTpKfD5c576jyGXOu3Bo6p18XNtDd/tYNjbo4n8QEuW3ZOuua+nVrTE0NeyKzuxpfE56vh85tN8vp0LnkP+4aLRuQnt25amvHFlxjRIfuB6ALG8nk1Xv37qXx48fTggULrNLg7f8Qco8S6gC6gKC8kBGnXwfQQw8ZgA6gA+ihd8HPQJ91y0dRUsHsYeUl3c126EJvcRNyB9ABdDWUeU8IQAfQAXT/A33Gzf9zAYXqLheVdlUf5PERADpC7qxnL55PhNyFvh0hd90tbnW3qbXgipA7W+GtM4bcAXT5VwOADqAD6G3vBzx0eOjw0P3voU9f/IknfvDi6fLiYJ6cUAeDAugAOoAOoIenBiTFISnO72vopTd95gk/b/5dlifj2hkUQAfQAXQAHUBvN2siy93fSXEAOkLuUgtAtsYn02ENPfToYA09KKfkpHLMb1hD50ugcmVXrfcvIM/f6Ixr6FMXfW7HaTV27K0zMo315VZHncJDz8xOl9ovXeWhM/XQU9PlOnROa57CVD4TJ8rVGOd06Pp1y5ni48Hz4WRtSVztdkZGx52rFfJLCu2s1NGfGxr1ELTlWfC6OmvdELY4H25MXa25I+27G7XSmQ8B613Q1NsnkfxeciVQrWdPU8POtUsgeVlRrv566HwYoGvqxVVjJmj2y31g5A2fYUSHXlT+hVs8ZPu9bZacI56cUAeDAugAOpvFboGFAzOAzkIHQNf37AH00IwNoEeSC0CXfz4A6AA6gN72fsBD1/eIdSMYbkUM4KHzHwKHsof+2xv3euIQL7siw5Nx7QwKoAPoADqAHp4zdEPcADofqkfInchUyP3y+d6soS+fgzV0Ox8Xjo7ldorDGjq/Lq9az0bInV/P5iCIkDtC7mJiA9ABdEeAi7IxPHR46PDQ4aHDQ283YSIpTnyAaBZnYQrUmPLQJ9/gjYd++5Xw0KP8rnB+GDx0fotWLnMeHnro+cMaOtbQQ0lo8gx5rsY4styDHwIxAPpvrvdmY5n/uwobyzgndZQ9AOgAupUVrVlaFUAPvWhYQwfQQ0sE/vXQAXQ5FOMm5N772MelV+naGjpT15zTi3P1zsVFJDNSMK4tV5vciYfOefDJKfKSrWxRF0ZnLmzAtdXVqCfxcvtgLXC53ld3UxVdr996Dhjdt+75qOqhx1r7npggpMnyPzeuk7Or5aG7UBDG0Rp6q97GMlwmu1KL36qn4+fGHDisyIgO/ddln0bp5pk97I9XdzHboQu9AehO1tAB9ODHB4DOF3XR26wGQI8iYnAI7U4HoBOZAvrEed4UZ/nTNSjO4sI3SMddwkMXXq0crvDQg/aBh86G1K2PCM2d2XQ9aXjoYmtX+UefFTGAhx4x6QPoCLlLLeBo61d46PDQFRBEyJ3/SADQAXS7Xt+E3//PbhMjx6/8fVcj/bjZCULuCLkrZWtYQ9fXUgPoALqYwBFyNxdyv+zaj91korTvVdd182RcO4MC6AA6gN72xiApDiF3JMWFXgauAhyXUBeLpDgAHSF3hNxT5QvIKh06PHR46G4l6SHkjpC7HQ9UHDv+6o/sNjFy/B1l3Y3042Yn8NDhocNDh4cenmOQFAfZmt899Euv8gboldcD6G5+jET0zWW5Z2SlaXvoqUziG1fzPDUtRToml3EuGunXNZdnuSenymu3c3u1W+fD6OITE5kxNSVt1piMTt0NjXpoTPnjyoKOk09p1hAXZ5LG6OKTk+Qbf3AZ55zG2vLCdaVgLmTHW2BhdOpunGtoTD3bcvp2bgc1rjyqOB+uLbdzHTsmkzmvHJPJyufC8d+56FIjOnQAXT5PdQoPHUAPTtQAerCuO69bA9ABdAA9BAv2I8JjoI+78sOYOYrtB/rzDT08GdfOoAC6IuQODx0euspzZT1FeOjaO97BQ48CrpoadU7b7negj5mzxw7jjB27Zv43jPXlVkcAOoAe9FzlYXMrFI2QO7/hCkLurmxIA6AD6B2BD0BHyF1qAdXGMvDQAXR46KHXR3c3ON096QF0AL2jibtw9m63HFy237ULenoyrp1B4aHDQ4eH3vbGYA0da+ihjwgkxfl5DX30rA/sMM7YsXeWH2asL7c6AtABdAAdQA/PL25kjsND55PMkOVuD29+AXpDQwMtWrSIdu/eTbm5uTR79mzq2TPSi//0009p7dq1tHXrVusi+/TpQ9OmTaOjjjrK3kVHeTSADqAD6AA6gN5uwoSH7u8s91Ez/xsl3swetm7h4eEOA4EAjRs3jkpKSmjw4MG0YcMGqquro7KysohB9+zZQ88++yydffbZlJaWRvfffz89//zzNH/+fLMn19Zb3AD9m33l9dAzuqRKjedsDV1Pa87VOxcnqlvznOuXq8Sm2imOS5rjEua4dolJikQ8RmLGadS5fjkbWKFW5pySmN84D1TX4xXn4472XR5Otp49Tk/O/KYNQaZPywaMSiApUV5LXfeeiDGTEuU24vpNZM7H0d4AjA109e1cO8sGLmTPn3x+gREd+q9+5w3Q77ppP9Dr6+tp2bJlVFFRYbFFAL6goIAqKyspKytLypu33nqL5s2bR6tWrQLQOQsA6MHJj8lGB9D58rIAeujtAtABdAC9Y9K0B3p1dbXlkc+cOTN88NSpU2nKlCmUl5fXYQcff/wx3XrrrdSvXz8aPXo0gA6g81AC0BVetkKeBw8dQIeHHppl/eyhj5y+yxUYqjq9e3Gv8CFVVVXU1NRExcXF4X+bMWMGFRYWUn5+fkRX7733ngV6AXQRnr/iiiuoe3d3tpFFyN3RGjpC7gi582FhhNz1PxLErIiQO2+DzhhyLyh9X8VeV36/5+Zvhvutqamh2tpamjNnTvjfJk+eTKWlpdS/f/8Ox//qq69oy5YtdNddd9HKlSuDW03zO1fqXASADqAri7NgDV3s887sWa+5GxwX3rZgprmencKeD9bQObvCQ/e/h+4HoDc2NtKSJUusdXTx19LSQsOHD6c1a9ZQdnY2y+KRI0fS0qVL6bDDzMvgAHQAHUBve/0Qctf3ppEUF1zuQVJcsI7611KYmUqK+2XJezrOq+M2f7mld7gPkQQ3YcIEKioqCme5b9u2jRYuXGglyAlgjxkzhoRsLTMzMyxne+qpp+j222+3pGwJCQmOz+nADgB0AB1AB9DD8wKS4pAU5/c19BHF/zEOwmg6vLfiiIjDdu7cSeXl5bRr1y7KycmxdOi9e/emvXv30vjx42nBggX04Ycf0vLly6318+TkZOu4SZMmWYlxbvwB6AA6gA6gA+jtZlfI1vydFOcXoLsBZKd9xg3Qex2zSWqLjCy5Dj0tQ/6b6DA1XS/xjat5npwir00uxuTacprxJKb+OFc6VKXP5tomcnXLNYu6CBskM9fChcYTE+VhLJX+X7dfbn1ddztZywaaRV8SOR21Qvetu/6uq7NWrWfz/TI6dE3NvPX+sW31xtS1jzgfN0L5XLKhGNONZLsfnjPUiA59+JR3nXJPq/19S4/UahfLRgA6gB700PlNXgB0ManKPxQAdBUEmY1aVB8YLsCVW+8H0EP48TPQLynyBuj33wagx+zjBB66qIrGZGJzO68B6NZzCg89CGbNDHldDxQeOl8MBh76wQgB0OVYhYcODx0eetv7AaAD6PDQ/e+h//zyf8fMUWw/0Ibl7hRUMXkxADqADqAD6OE5BR66avkAa+hcdTguVG9qDX3Y5H+ZZGDUfT1we5+oj/XqQAAdQAfQAXQAvd0MjKQ4f6+hA+gIuUstgCx3ddESJMUhKU68QMlJ8uQ2rKErVAkOsu6R5R45ff9s0jueOMAPrjjak3HtDAoPHR46PHR46PDQ4aFHcMPPWe4X//ptO4wzduzGP+YY68utjjoF0Lma52mMztxKkEmXa8ZT0+S/cZpnlR5aty0nP3OiQ+eSxdzw3oXdExPlGfu69dCVNdgZTT2bMMfs864rdxM20NWwc5njSQn8Xu5u7B/PeZgqPTRb85zb656to65vg8QE+Rq67va3XJ+hyEiLdP53YxMc6/1jnhPdJYmf/OQMIzp0AL2Th9wB9OCk4EC2BqArJG0AOit3A9D1E+0A9IPhddHEf7rl4LL9PvynYzwZ186g8NDhoStD7gA6gK4CC5cdD6AD6OL5MeWhD73sLTuMM3bsI6v6GuvLrY4AdAAdQG97u9wI5SPkzm9dipC7CG/Lw/iqD6nOGHK/cLw3QK+6A0B360PkoH65neIQckfI3VoXZELj4ncA3Z0a7PDQ4aGb9NABdKyhSy2ApDi1bA0hd4TcVZ4iQu7uJJKp7N4ZPfQLxr0ZM0ex/UCP/tmdkqcmLwYhd4TcEXJHyD08pyDLnY9SIMtdP9pgag39/LE7TTIw6r4eW31s1Md6dSCADqAD6AA6gN5uBuY+agB0AN0rWEczbtwA/fCjH5NeL7eGnpohr3cuOuS05ro1z7la31aIjamXrltRjatbzknarLVlphqbrj47WVHhTbdf3XVw1Rq7bnIbfx3ykqzifBISYl+y1Q39MVvXXVE+lTsfbuc63euwnoPE2GrNVRXnuGthdfqMFj8xkdficx8uursC/vSCU43o0M8rfCMathk/ZtPaXON9mu4QQAfQWY06gB565QB0fc8MQOcz2QF0e1g7d3STvQaGjn78zuMM9eReNwA6gA6gt71fbpRPhYeuv8e59SHF7FgGDz0YPWOiCZwk8FD20AF0+QcBgA6gA+gAeniG0A1VcyFaeOjw0MUDZirkfvaoRvdcXKbnv6473pNx7QwKoAPoADqADqC3mzWxhs5/gHi9hn7WSG+AXn03gG7n48LRsUiK4zePQVKcemMZhNzd0VLDQ4eHbtJDB9ARcpdaAFnu/IcAkuKQFLfv5dGtsgWgA+gmgf6TgtcdOX+6jWvuOUG3aczaIeSOkDtC7gi5I+SOkHsEdPwsWzvzFw0xA2T7gbasz/NkXDuDxg3QD+vzqPS6nejQU1KSpP0mp8rroXMa9SSmlKkYjNNoc23d0KiHzkduA90sbpUNdPXkfNhcXmPdikQw9dATEuWacDdC9eJ83BiT6zNkA7mN+KxpuXbbrfrs7CYvjM6a26ZW2EB373ku45zP1pfXO7fOhynewm39qpuoGBpTrlPXvc5RP883okMH0OWI9xTotbW1dMMNN9DixYspN3e/aL+hoYEWLVpEu3fvtv599uzZ1LNnT/ZDBUAPTsYpzGTMQpnf4ARAdweuHDwB9NDrrr1rG4DOfgi4pX3nPgRMAf2MEfV2nFZjx269t7+xvtzqyDOgr1+/nrZv305ffPEFTZ8+PQz0QCBA48aNo5KSEho8eDBt2LCB6urqqKysDEAXHhQDZgBdUUQlER46PPTgBjnMDmrw0EPTrJ899B9f8ppbPGT7feL+AZ6Ma2dQz4C+Y8cOGjhwIM2aNYumTJkSBnp9fT0tW7aMKioqrOsQgC8oKKDKykrKysqiNWvWHBTbGzNmTAI8dHjo1kTEhIwTAXQ2jC/sh5A7Qu5uAX3kz04MBN9B/qs6CnoB6D4NuYvTKi0tpalTp4aBXl1dbXnkM2fODJ+1+F1APy8vj1avXn0Q0MeOHQugi8kYIXcAXXzUMOv98NDhoauWMvwO9B/9/NUosG/+kCc3fMt8p4Z79MxD33cdBwK9qqqKmpqaqLi4OHypM2bMoMLCQsrPz5dePjx0AB0eeuj1ANCFDeRJXQi587kJbgHd1Br66cNeMYzB6Lp76oGBEQdGk+vV3NxM69ato02bNlFLSwv17dvXWmLu1atXdIPaPMp3QK+pqSGRLDdnzpzwpUyePNny5Pv3lyclAOgAOoAOoO+bNAB0b7TvsUiK8wPQo831+uSTT2jjxo00bNiwfUvG9Oabb9I111xjE9XRHe47oDc2NtKSJUusdXTxJ75qhg8fLtbOKTs7Gx46kuL4sDrW0OGhW1EKeOjxKls77WJvPPRnNu730FW5XjJQvfHGG3TjjTfSihUroiO0zaN8B3Tx5TNhwgQqKioKZ7lv27aNFi5cyF7aN46qkv7O6tDT5Fpy0WFqmrxeOlcn3IkOnes3mdHF69YtV9VD57aN5ZLQuAQrLiys9LQZaOvq15VjMrk8XJqPbl13cT58PXQ9XTzXZ8gG8n5167OzenpGYy3Oh5etMdBm6qxzoLNswHwMuLHhCqd7t2zAZOXrasJVY7pRpOfXI/sb0aEP+enLNjFn5vBtDw0Kd6TK9ZKN+OCDD9LOnTtp2rRpZk7qgF58B3RxfuKCy8vLadeuXZSTk2Pp0Hv37g2gi5cbQGc9dACdz/QH0PlQNIAemmYB9INx0x7oOrlegmdXXHGF5aHH7Rq6qc8UeOhCoy5XhHCeIjz0tklMM1wPD52Xu8FD5wGp8pbhoUdS4tSh/zCFDVv9PPvIt8PH2831+uijjyzHVOSDccndtk6og4M999CdXsC+9gA6gC6eBXjo8NDFc6BbSAYeuv899B9c+JIpbNjqZ3vVieHj7eR6icQ4keQ9atQoGjJkiK0x7R4MoGMNXVmcBWvoYl2ViX4wW2VgDV2xbS7W0Nm948WEDg89Emt+ADqX6yV+W7p0KQU3PKO0tDSaO3cujRgxgk477TS7fLZ9PIAOoAPoba+N7i5zCLkj5K6OCsgT+BByt8etU87/u70Gho6ufeykiJ5kuV579+6l8ePH04IFC+iVV16hm2++mVJSIpOrRf0SToate8oAOoAOoAPo4fkDWe7IcreWHZhqa7rLGaay3E8+b4cu7xy1e26TfGMzRx0bbAygA+gAOoAOoLebVCFbA9A7YiyAbvDLQ9VVjyMekR7iRIfuRs1zrt65uAiuohrnQXGSNm4NmNsD3jof3exvRtOsKh2qW2eda6eSbOkm1HH98jp9vmytbr9sVjmzz7vlmXH7wCdoat/ZPvk3m30OmPPhbMCtSYdsIK/tznmuXDtuu1nuAyLkLTPnw2jmk7h2jAcuxkxOYpYINGulT7/0GCM69O+f642H/vzj8NBVHDb2O4DOa9QBdH6jltCHiyawNEHHjSfOB0BXVM8D0NlNcOIV6N87+0Vj3LDT0d/++h07h3tybNyE3AF0AN3yZphoAjx03gOHhx6ag+Gh+9tDB9Dl3woAumINHSF3hNydfCgg5M7L1hgnOwRXbrkHHnqn9NC/e1adJ95vXfV3PRnXzqAAOoDO1lEPhaI5DTa3O508hI01dD7Ej5B7m7cMoGMN/QCifefMv9lhnLFjX9zyPWN9udURgA6gA+htbxfW0JEUh5B76GXwc1IcgI6Qu9QCqQA6gA6gh98PZLljDd3vQM8/4wW3HFy23x1bB3syrp1B4aED6AA6gA6gt5s1kRTnbw/9pB89b4dxxo79+5PfN9aXWx3FDdC79+Z06PKa5ikpfD305NQkqe1TUuVtucpnnM48tGbNrD0ny8+H06hza9aq89Ht10nGuTtj8q+R7r7riaxsjakvrtKEa2bs69ZRF9bh9NvaMjpGbs9FBKzwt64NHGjfY133ndO2u7UEkKTQoetq37l28357uBEdOoDeCULuALqY/PSS0AD00AsCoAPo1kcN84HGfRjrlokF0O35qyee7o2H/tJT8NDt3SkHRwPoALoKyo4kUprZ1uze6PDQ2Z3p1PdTL/qheg4AdP3d6WLhoX/7h885IIV+0388fbJ+4xi1RMgdIXd2q9nQpKrn+euGS90bEyF35e50bmz9ipA7Lz1Thb9d2Ir2UA65A+gIucvXwQF0AL3t6UDIHSF3hNzblp8094+PhYc+cEhtjPzdyGFe2XaKJ+PaGRQeOoAOoAPo4TkDSXFYQ7ciZD4G+rdO3W6HccaOffXZHxjry62OAHQAHUAH0AH0djMs1tAB9I6AC6C79RnSQb9IitNf60aWe1uYkUt8Q1KcfvU3rKFjDT34ipmSrQ045dkYkmX/UK/VnurJuHYG7RQeOrcbnGqnOFZPniLXhCczenGuT3HzOMDqbk/qpEgIu7ac6M5e7nxNb70xuT4tu2tqntlMds0CItb5MLZNkJtAG7zW+rFmUpyu9l11T7h+9c+VnyI5bbxuoid/rvz56NqA2x9BZXc25M4k8XGb8iyZ3sWIDr3/ydvsMM7YsfXPDTHWl1sdAeiKneIAdIU+G0BnVQC6kzGAHprydO3HtmMiBmJMAF0RcgfQ3eKx434BdACd3ZnOmuA8qLYGDx0eOoDu7KMmXj30vMHPOAafTgcNL5ym0yymbQB0AB1Ab3vlEHJHyB0eeuhl8HPI/YTveQP01/8GoMfs64RLisMaOu9lqzYbgYfOh36xhq6Seunt6AYPHR56RwAB0OVYhYcODx0eOjz08Ayhn2jG7SYIoCMpjshUUtzx3306Zo5i+4Ea637oybh2BgXQAXQAHUAH0NvNmkiK83fI/bj8p+wwztixTTtON9aXWx0B6AA6gA6gA+gAegRj/LyGDqB3gpB7t14PS6+SW0Pn6p2LDlk9eYpcDMxryRkRcXBMTiqnqyfXXQe3EmSY4iy63kwiI3ez1k4ZE7HXwtYm5+3OS6TkL5Hu+Si1wJwmXFcvrqjwpq0n19Tbc+OFngMmXM+NyT0H/GPgjlRO8zosG2huzKMr+QuNqbdMwp3riqvM6NCPPelJtxxctt+df/+RJ+PaGTRuPHQAXWyMIn8JAXQ+MVA9iQHo3POlDwBeFA6gA+gHvnn9vv2EHcYZO/bNf/zYWF9udQSgp8p3e4OHHnrs4KG7EzGAh857gvDQQ+8fPPRI/AHo8s8BAB1AD+6MxccgAXQAXUwh8NAdLAEg5E6mQu59B211y8Fl+33r5TM8GdfOoAA6gA6gt70xWEN3oCfXXnNFyF2ZR4A19AimHfMtb4D+z1cjgd7Q0ECLFi2i3bt3U25uLs2ePZt69uzZIX9ra2vphhtuoMWLF1vHuvUHoAPoADqAHp5fkBTnJCFMN5FM8VEDoPsO6IFAgMaNG0clJSU0ePBg2rBhA9XV1VFZWdlBrF6/fj1t376dvvjiC5o+fTqAHs3XDJLikBRnrfcjy107Qzm0Xqu5QQw8dG27w0OPZobff0zOgC32Ghg6+u3Xzgz3VF9fT8uWLaOKigrr3wTgCwoKqLKykrKysiJG3LFjBw0cOJBmzZpFU6ZMAdCjuR8AOoAOoIfeFN2Mc1VbrKFjDd16Rth8APlsbWoN/ej+NdEgwfgx79T/JNxndXW15ZHPnDkz/G9Tp061gJ2Xl9fh2KWlpSSOQcg9iluTfdhG6VEpzObvRGUtAAAQf0lEQVQxKSnJbO9JjNac06iziWRM9TJxMrr9chO5rn7dgqR2nXB5sh2XuSvGZAulaCYYcfdEBTO2+ptmVEDpmWnWPNc9V/VkzWnC5a+RrvTMyfnwlcb4CUX3g8iNdqrnUpHPKr1Q9bOnqf9n3s01879hpB66H4BeVVVFTU1NVFxcHLbxjBkzqLCwkPLz8wH0KJjNHgKgqwqIMJvgMPp1AD302OlCUvdjKDQmA0nNEDcHOtV16tYYB9BVXq1qDZ3ZX0KxSY7sCTqUgd7nhGqnuNBq/6/Xzwq3q6mpIZHoNmfOnPC/TZ48mYQX3r9/fwBdy8LtGgHoALrSm1F8uOh6WLrr9upJFUDX/RiAh64fhXD0YRcDD/3I4//qFBda7d9tPDvcrrGxkZYsWWKto4u/lpYWGj58OK1Zs4ays7MBdC0LA+gRZkPIXfVRo+8JwUNXrM0zptWFshOwAOgAulOmHNi+PdBFEtyECROoqKgonOW+bds2WrhwoZUgt3TpUhozZgz16NEj3A3W0G3cEXjoKpgh5I41dF4F4ASgXE4EgI6Qu3i2TK2hH5G72QYZzB36nzfOiehs586dVF5eTrt27aKcnBxLh967d2/au3cvjR8/nhYsWEB9+/YF0HVuAYAOoCPkHnpzdKMJqrZYQ9cHs6OPGgeFZmRzqXq5x79Jcb2PfVwHEY7bvLfzXMd9uN1B3GwsA6AD6AA6gL5vwkTIPX5D7gC6/N4C6JCtOaqHrrtuD9laNIVJmBcXWe6s3h5Aj1+gf7OvNx76+2/BQ3c7whDuv8s3HpSOlZwq15qnpPDV1jgdOqvtZgSiqrVcttQpowlntdvc9pEKXTwbwuWuU1N2JW6krtxLd9MLa0xtfTunt+e2A9WfdHXD6qoKb3xYnU8qlIZ3HTwHblynMtysd5n6tdsd1KjnniC3Pmq4Mbn7dd/SI43o0HsdsylmXGk/0K5/nufJuHYGjRsPHUBXbMYCoLNlKAH0tnA95/mrwiqSmUdXT69a0+eBpbcGHFq2sTOF7j9Wd53cyUcWgK53r3RaAeg6VtNsA6AD6CoAqCZqeOgqaZoe6QB097bj7YxAPzznMU1KOGv237fPd9ZBDFrDQ0fInQ1vqyDJ1VLntqVUhT0RcteHgK7nGvJO9T1bhNz1bAcP3R7pDuvzqL0Gho7+4F8XGOrJvW4AdAAdQG97v+ChA+gIuauXXjgcxWINHUCX3wEAHUAH0AH08AwBDx1r6KpIjddA/8ZRVe65uEzPe/59oSfj2hkUQAfQAXQAHUBvN2uqci3kSwsIucfCQ+9xxCN2GGfs2A//M9RYX251BKAD6AA6gA6gA+gRjFHluOh81JiSrQHonSDkntXjAelVJjObx6g04XxtcrnAluuX04urwl1cv6xmV7OmuTgf3SQr9lwVbpC2BMjBNpm61dZ0w9TqZCi973jdXADr2dPU4usDgL9G3XvC9epWCVk2FM1uBKR3n1Vzher50rWRbr+PrT7WiA69e29vPPSP3oOHrv+k2mwJoCv28AbQgxvHuAMPAF29653co3PnnujCyslHDYDO30tTQO/W62GbdDBz+Me7LjLTkYu9xE3IHUAH0FUeC4CuBi88dP0oBYAOoLvI6qi6BtCT+M0yEHJHyN2J1+YkZKybnIWQOz/3IeSuZoPuMhvXsykPvevhD6kvwIUj/vffn7rQq9kuAXQAnd1MRDxuui831tD1N4cJRRv0XnYAHUBXfYSqnizddz4WQOcqa6quy8nvn3xwsZPmMWkLoAPoAHrbq6brTWMNXR3Kl81m3LawqiUU3eQseOhqtgDoB9sIQFc/N8aOwBo61tBVAMAauhq8WEPHGrqTqFwsPHSubocxoHTQ0ad7fuZm90b6hocODx0eOjz08GQCoAPofgc657wZoaKkk88+HOZm90b6jhugp3fdIDVIcrJcr5SUzNdD57Xd8kXOJMYdVIUKddeetWtHO9KEy59DXTio1v+4ELcbocKQ5+/OdXJvsa79dDXh1kTuoHa5PKyut4OaaobTvU7V++dG7gJ7n3UHFM+l5r4B7tlW3vMzGwcZ0aED6Mxc1Br8U93cQ+F3AF0RcndQRYufNNwBne5EBaCrw+rc+wygu5OMCKATmQJ6Rjf5JmJusmrvx/DQ3bRvRN8AOoDuVqgQHnroVXPDI9bt063zUd1r/mNIT5bgyAad0EPn5no3gfPF/37uZvdG+kbIHSF35UQNDx0hd7cA6ghmmqFqhNzV7NC9L5xqwZSHDqAj5C61ANbQ1Z4XgA6gA+hqCHL6f4TczYXc07rcr74ZLhzx5aeXuNCr2S7hocNDh4cexTuFpDj1h5/MjLr5EKrbou9F8qFxTcc/mFCIkHssPHQAHR46PHQkxbEZwWp4MC+RW+uYmv3qgs7KQUCWuys79MFDN+ehq97Vzvw7PHR46PDQo5gB4KHDQ1c9JvDQRWKu3Eqm1tBV96Ez/x43QE/Nuk96HxOZ0qFJio1ldLcDTXSgQ+e/5vU8RVbO5UCHrut5qLb81O2XbacIiaq2BJWGlDVjtKrkLN3nwIkNvLC77gSsG4nQvc/iPJ3cM/nzo2sBd87Huk7NZ5q7ktdqTzWiQ9e3Vvy39CXQGxoaaNGiRbR7927Kzc2l2bNnU8+ePdm7AaB7I1vTBQCA7mwy1p1vnQBJd5J3Mqbu88W1A9DVYNO91wC62rZuHuE7oAcCARo3bhyVlJTQ4MGDacOGDVRXV0dlZWUAuvXlDA9dd7JRgUV3onfrfOCh81Ofrt117zM8dGcogofuzH7RtPYd0Ovr62nZsmVUUVFhnb8AfEFBAVVWVlJWVhatWbPmoJ3txowZkwAPHR666oEH0J1GBTSzuDWzv5X3UzNMAaCrLOtOyH3Lg/0CvXv3ZlbZ1eeFIxQfuX7b+rW6utryyGfOnBk+86lTp9KUKVMoLy+PVq9efRDQx44dC6AL752ZOLGGroaZ7kSv6ymqPjDgocNDVwHMyTPkxnIG12fNA30DRxxxBICuuqkOfvedh15VVUVNTU1UXFwcvqwZM2ZQYWEh5efnSy8VHjqArnoPVJMfgO4OQFV2V9032e+6H1K69xkhd907FWqHkLsz+0XT2ndAr6mpodraWpozZ074/CdPnkylpaXUv39/AB1r6NoZuCqw6E70umBRnQ88dHc+MHTvM4AeDVLkxwDozuwXTWvfAb2xsZGWLFliraOLv5aWFho+fLhYO6fs7GwAHUAH0INvgebysSPZlRcfLm6EhQF0NRp07zXXM4CutrvTI3wHdJEEN2HCBCoqKgpnuW/bto0WLlzo9FrRHhaABWABWAAWiFsL+A7owtI7d+6k8vJy2rVrF+Xk5Fg69GB2ZNQ3YeTIka233norHX744XppuVGPdGgeuGDBglYhCTz77LNhnw5u4aOPPtr66quv0u9+9zvYpwP7vP/++63Tpk2jdevWwT6SKWD06NGtN910k5i3YKNDc5o8JM/al0B3akkAnbcggM7bB0Dn7QOgq2coAF1tIxxh3gIAunmb+r5HAB1Ad/KQAuhq6wHoahvhCPMWANDN29T3PQLoALqThxRAV1sPQFfbCEeYtwCAbt6mvu8RQAfQnTykALraegC62kY4wrwF4hLo5s2EHmEBWAAWgAVgAX9bAED39/3B2cECsAAsAAvAAlFZAECPykw4CBaABWABWAAW8LcFAHR/3x+cHSwAC8ACsAAsEJUF4groDQ0NtGjRItq9ezfl5uZaG9L07NkzKkPE80Fib/wbbriBFi9ebNll319nt1dzc7PYHIU2bdpkbTHct29fmj59OvXq1csyUWe3z6effkpr166lrVu3Wvbo06cPiQ1ljjrqKNingwljz549NHHiRBLVIc8880zYKJ4nVZ9eW9wAXWwZO27cOCopKQlvGSvKsJaVlfnU9LE5rfXr19P27dvpiy++sGC1D+iwF9Enn3xCGzdupGHDhlFWVpZVL+DNN9+ka665hmAfIgGoZ599VuwoSGlpaXT//ffT888/T/Pnz4d9Onh9r732Wvrss89o6NChFtDxDMVmjsMo+y0QN0Cvr6+3CrpUVFRYVydepoKCAqqsrLQm6876t2PHDho4cCDNmjXLqim/D+iw18FPxBtvvEE33ngjrVixgmCfg+3z1ltv0bx582jVqlWwzwHm2bx5M7388svWh8+AAQMsoOMZ6qyzrnfXHTdAr66uJuGRz5w5M2xNEfoSEMvLy/POwj4ZWZSfFfbYB3TY6+Ab8+CDD1p1BERYGfaJtM/HH39Moj5Cv379KKixhn3amUcs8c2dO9da0lq5ciUNGjTIAjqeIZ9Mfp3oNOIG6FVVVdTU1ETFxcXh2zdjxgwqLCyk/Pz8TnRLO77UA4EOe0XaSRQCuuKKKywPXayhwz4h+7z33nvWR7EAuijoI2zUvXt32Kfd43P11VdbJZ7FPCM+evYBHc9Qp592Y26AuAF6TU0NieSvOXPmhI04efJkEiDr379/zA3rtwEPBDrstf8OffTRR1YCpXhe9n38wT6RT/BXX31FW7ZsobvuusvyQp944gm8b0ETiYTKxsZG66NH/LUHOp4hv82C8X8+cQN08VItWbLEWkcXfyJrWXw1i0Sn7Ozs+L+Tiis8EOiwV8hgIjFOfASOGjWKhgwZErYi7NPxAxWsZEhLly6lDz/8EO9b0ETiQ/C1116jhIRQldQvv/ySkpKS6Nxzz6ULLrgANur0M29sDRA3QBdJcBMmTKCioqJwlvu2bdto4cKFsbWoT0c7EOiwF9Hnn39urX2OGDGCTjvttIg7B/sQvfPOO5SZmRmWfj711FN0++23W1K21tZWvG8dvOvtPXQ8Qz6dDOP4tOIG6OIeiYSm8vJyEuuhOTk51tdz79694/j2RX9pBwId9iJ65JFH6Oabb6aUlJQIQ4rkJrFM09mfpxdffJGWL19urZ8nJydb79SkSZOsxDg8Px2/e+2BDhtFPz/hSDMWiCugmzEJeoEFYAFYABaABQ49CwDoh949wxnDArAALAALwAIHWQBAx0MBC8ACsAAsAAvEgQUA9Di4ibgEWAAWgAVgAVgAQMczAAvAArAALAALxIEFAPQ4uIm4BFgAFoAFYAFYAEDHMwALwAKwACwAC8SBBQD0OLiJuARYABaABWABWABAxzMAC8ACsAAsAAvEgQUA9Di4ibgEWAAWgAVgAVgAQMczAAvAArAALAALxIEFAPQ4uIm4BFgAFoAFYAFYAEDHMwALwAKwACwAC8SBBQD0OLiJuARYABaABWABWABAxzMAC8ACsAAsAAvEgQUA9Di4ibgEWAAWgAVgAVgAQMczAAvAArAALAALxIEFAPQ4uIm4BFgAFoAFYAFYAEDHMwALwAKwACwAC8SBBQD0OLiJuARYABaABWABWABAxzMAC8ACsAAsAAvEgQUA9Di4ibgEWAAWgAVgAVgAQMczAAvAArAALAALxIEFAPQ4uIm4BFgAFoAFYAFYAEDHMwALwAKwACwAC8SBBQD0OLiJuARYABaABWABWABAxzMAC8ACsAAsAAvEgQUA9Di4ibgEWAAWgAVgAVgAQMczAAvAArAALAALxIEFAPQ4uIm4BFgAFoAFYAFYAEDHMwALwAKwACwAC8SBBf4fPGL8S2lk0dQAAAAASUVORK5CYII=", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='RdBu'\n    )\n])\nlayout = Layout(\n    title='RdBu'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-RdBu-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"RdBu\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"RdBu\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-RdBu-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"RdBu\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"RdBu\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-RdBu-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1019", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"RdBu\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"RdBu\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-RdBu-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'RdBu', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'RdBu');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-RdBu-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/RdBu-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"RdBu\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"RdBu\"};\n\nvar graph_options = {filename: \"heatmap-RdBu-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'RdBu', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'RdBu');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-RdBu-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"RdBu\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"RdBu\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-RdBu-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='RdBu'\n    )\n])\nlayout = Layout(\n    title='RdBu'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-RdBu-heatmap', auto_open=False)"
            }, 
            "Greys-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Greys-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Greys-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Greys-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Greys-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Greys-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Greys-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Greys\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Greys\"};\n\nvar graph_options = {filename: \"heatmap-Greys-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Greys-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Greys'\n    )\n])\nlayout = Layout(\n    title='Greys'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Greys-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Greys\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Greys\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Greys-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Greys\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Greys\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Greys-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1020", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Greys\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Greys\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Greys-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Greys', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Greys');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Greys-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Greys-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Greys\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Greys\"};\n\nvar graph_options = {filename: \"heatmap-Greys-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Greys', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Greys');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Greys-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Greys\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Greys\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Greys-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Greys'\n    )\n])\nlayout = Layout(\n    title='Greys'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Greys-heatmap', auto_open=False)"
            }, 
            "basic-heatmap": {
              "files": {
                "model.json": "hard-coded/chart-types/heatmap/basic-heatmap/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-basic-heatmap\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Heatmap(\n        z=[[1, 20, 30], [20, 1, 60], [30, 60, 1]]\n    )\n])\n\nplot_url = py.plot(data, filename='heatmap-basic-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"z\" => [1 20 30; 20 1 60; 30 60 1], \n    \"type\" => \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"heatmap-basic-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"z\" =&gt; [1 20 30; 20 1 60; 30 60 1], \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"heatmap-basic-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1021", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    z = matrix(c(1, 20, 30, 20, 1, 60, 30, 60, 1), nrow=3, ncol=3), \n    type = \"heatmap\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"heatmap-basic-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'z', [1, 20, 30; 20, 1, 60; 30, 60, 1], ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-basic-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/basic-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-basic-heatmap\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'z', [1, 20, 30; 20, 1, 60; 30, 60, 1], ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-basic-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    z = matrix(c(1, 20, 30, 20, 1, 60, 30, 60, 1), nrow=3, ncol=3), \n    type = \"heatmap\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"heatmap-basic-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Heatmap(\n        z=[[1, 20, 30], [20, 1, 60], [30, 60, 1]]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='heatmap-basic-heatmap', auto_open=False)"
            }, 
            "Jet-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Jet-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Jet-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Jet-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Jet-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Jet-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Jet-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Jet\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Jet\"};\n\nvar graph_options = {filename: \"heatmap-Jet-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Jet-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Jet'\n    )\n])\nlayout = Layout(\n    title='Jet'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Jet-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Jet\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Jet\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Jet-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Jet\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Jet\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Jet-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1022", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Jet\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Jet\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Jet-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Jet', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Jet');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Jet-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Jet-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Jet\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Jet\"};\n\nvar graph_options = {filename: \"heatmap-Jet-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Jet', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Jet');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Jet-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Jet\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Jet\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Jet-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Jet'\n    )\n])\nlayout = Layout(\n    title='Jet'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Jet-heatmap', auto_open=False)"
            }, 
            "Electric-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Electric-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Electric-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Electric-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Electric-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Electric-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Electric-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Electric\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Electric\"};\n\nvar graph_options = {filename: \"heatmap-Electric-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Electric-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Electric'\n    )\n])\nlayout = Layout(\n    title='Electric'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Electric-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Electric\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Electric\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Electric-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Electric\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Electric\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Electric-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1023", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Electric\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Electric\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Electric-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Electric', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Electric');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Electric-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Electric-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Electric\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Electric\"};\n\nvar graph_options = {filename: \"heatmap-Electric-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Electric', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Electric');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Electric-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Electric\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Electric\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Electric-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Electric'\n    )\n])\nlayout = Layout(\n    title='Electric'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Electric-heatmap', auto_open=False)"
            }, 
            "labelled-heatmap": {
              "files": {
                "model.json": "hard-coded/chart-types/heatmap/labelled-heatmap/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    z: [[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]], \n    x: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], \n    y: [\"Morning\", \"Afternoon\", \"Evening\"], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-labelled-heatmap\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "labelled-heatmap", 
              "image.png": "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j47Oo7vbunXropX85MmTrVatWio+KYfQJWzpCiF0hK42FqEjdLU7cQn9L3OmqFPwyrVoe1HW/MYrdHcRXJcuXaxnz56Zq9wXLFhgI0eO9BpfCSN0hVrKMggdoauVRegIXe1OXEJ/6Q/T1Cl45Q5vc0GlhO42Ki0ttREjRtjq1autQYMG0efQ69Wr5zW+EkboCrWUZRA6Qlcri9ARutqdXBa6ymRr5xD61iZcDe4foSN0tYYIHaGr3YlL6C/OfUidgleu5Wnne+VDhBF6COoJj4nQEbpaOYSO0NXuxCX0F554WJ2CV+7IUzt45UOEEXoI6gmPidARulo5hI7Q1e4gdJWcnkPoOrvUJBE6QlfLitARutqduIS+8IkZ6hS8ckedeo5XPkQYoYegnvCYCB2hq5VD6Ahd7U5cQl/w5GPqFLxyR7c+yysfIozQQ1BPeEyEjtDVyiF0hK52B6Gr5PQcQtfZpSaJ0BG6WlaEjtDV7sQl9D8/9bg6Ba/cMaec7pUPEUboIagnPCZCR+hq5RA6Qle7E5fQ//THOeoUvHLHntzWKx8ijNBDUE94TISO0NXKIXSErnYHoavk9BxC19mlJonQEbpaVoSO0NXuxCX05+fNVafglWt10mle+RBhhB6CesJjInSErlYOoSN0tTtxCf3ZeU+qU/DK/eKk1l75EOEaL730UtlBBx1kO+20U4jxYxuz29AvY7uvXLsjhI7Q1U4jdISudgehq+T0XI0NP9heNnToUPvxj3+s30s1SCL07DsBoSN09SmK0BG62p24hP7M/HnqFLxyx594klc+RLjGqaeeWrbPPvtEP8ReVFRkH3zwgd166632ySefRD//1r9/f6tbt240t86dO0e/+zp27FjLy8uzq6++2jp27GjnnHOOLVy40NauXWvNmze3DW8Sou1Xrlxpt99+u3344YdWs2ZN69atW/R7sd/3t4ruc8OPxpdtDuriiy+ugdARuvoEeuyooWo053MIHaGrJb+kfdP122677TZqvjz39NNP+96FlD/hhBOkXMhQjfz8/LI777wzWqG7H2q/4oor7PLLL7eWLVva3Llz7dlnn7Xhw4dHczzrrLPs8MMPtyuvvDIStLu1bdvWOnXqZBvuJ8r37t07ug93GL9r166RxI888kh7//33bcCAAZHgd99996x/c28est3nIYccYr/73e++I/RL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zyF0nV1qkggdoatlRegIXe1OXEI/vHWYFfpLT7JCV/e9d44vlsmOEKEjdPUJhtARutqduIR+2Mkvq1Pwyv31j4d65UOEN1mhr1271s4//3w78sgj7dprr411PmVlZXbJJZfYvffea9tvv32s9+3uDKEjdLVURzV5V43mfA6hI3S15AhdJafnNhH63LlzbebMmbbnnnvGLnQ3xZdfftkOPXTrvOtB6AhdfRog9OzkEDpCV59XcQn95yctVqfglVs87+de+RDhTYTer18/a9mypZWUlGSEvnLlSrv99tvtww8/tJo1a1q3bt2sRYsW0Vw7d+5sXbp0sbFjx1peXp5dffXV1rFjRzvnnHNs4cKF5lb8zZs3t169ekXbt23b1ubMmRP974q2c28sZs2aZV9//bW9++67tttuu9kNN9xgBx54oL3zzjtlm4Nq2LBhDYSO0NUnEEJH6Gp3Wt9doEZzPvfGC0eur1Gjxja+D/TQE/7qexdS/uWnD5NyIUM1vvnmmzJ3CPyjjz6yoUOHWn5+vj377LOR0NevX29du3aNJO4Ow7///vs2YMCASPB169a1s846yw4//HC78sorI9mXS7tTp07R/bh879697YorrrBDDjlkE6E7uW9pu7333jvK3H333bbTTjvZTTfdZCeeeKIde+yx0f1veAPxHaHfc889CL2CFnEOveKnGEJH6OqLMELPTu7VP7VYv8EtCF0tl5Cr8dxzz5W1atXKJk+ebLVq1YpWwxv+LRL6ihUrrKioyO68887MXY8bN8722GMPa9++fSTou+66y+rXr5/5u/u3KVOmWO3ataN/c/Jv3LixtWnT5jtC39J2TugPPPCADR8+PMpPmzbN3Pn3Cy+8sMKHxwqdFbrQ/yiC0BG62h2Enp1cXIfc847/i7p7vHJLnvn2SHSabjWuu+66MrcKdofOR48ebUuWLMkI3R02d4e+hw0blnlMTrCff/55tGp38p49e7ZtOKyyidA3/rcxY8bYhkPidsYZZ3xH6Fvazr256NGjh02YMCF6g7FhftGbh8MOq/jwB0JH6OoTD6EjdLU7CH3rC/1nx72k7h6v3CvPHe6VDxGucd5555UVFhbaU089ZTfeeGMk8/IV+rJly2zUqFEVrtDLz4mXT37j8+Tu3yoS+sbZjbebOnVqdK59r732ig7pO6F/3w2hI/Tv60i2vyN0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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Heatmap(\n        z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n        x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n        y=['Morning', 'Afternoon', 'Evening']\n    )\n])\n\nplot_url = py.plot(data, filename='heatmap-labelled-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"z\" => [1 20 30; 20 1 60; 30 60 1; 50 80 -10; 1 30 20], \n    \"x\" => [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], \n    \"y\" => [\"Morning\", \"Afternoon\", \"Evening\"], \n    \"type\" => \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"heatmap-labelled-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"z\" =&gt; [1 20 30; 20 1 60; 30 60 1; 50 80 -10; 1 30 20], \n    \"x\" =&gt; [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], \n    \"y\" =&gt; [\"Morning\", \"Afternoon\", \"Evening\"], \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"heatmap-labelled-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1024", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    z = matrix(c(1, 20, 30, 50, 1, 20, 1, 60, 80, 30, 30, 60, 1, -10, 20), nrow=3, ncol=5), \n    x = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"), \n    y = c(\"Morning\", \"Afternoon\", \"Evening\"), \n    type = \"heatmap\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"heatmap-labelled-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'z', [1, 20, 30, 50, 1; 20, 1, 60, 80, 30; 30, 60, 1, -10, 20], ...\n    'x', { {'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'} }, ...\n    'y', { {'Morning', 'Afternoon', 'Evening'} }, ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-labelled-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/labelled-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    z: [[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]], \n    x: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"], \n    y: [\"Morning\", \"Afternoon\", \"Evening\"], \n    type: \"heatmap\"\n  }\n];\n\nvar graph_options = {filename: \"heatmap-labelled-heatmap\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'z', [1, 20, 30, 50, 1; 20, 1, 60, 80, 30; 30, 60, 1, -10, 20], ...\n    'x', { {'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'} }, ...\n    'y', { {'Morning', 'Afternoon', 'Evening'} }, ...\n    'type', 'heatmap')...\n};\n\nresponse = plotly(data, struct('filename', 'heatmap-labelled-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    z = matrix(c(1, 20, 30, 50, 1, 20, 1, 60, 80, 30, 30, 60, 1, -10, 20), nrow=3, ncol=5), \n    x = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"), \n    y = c(\"Morning\", \"Afternoon\", \"Evening\"), \n    type = \"heatmap\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"heatmap-labelled-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Heatmap(\n        z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n        x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n        y=['Morning', 'Afternoon', 'Evening']\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='heatmap-labelled-heatmap', auto_open=False)"
            }, 
            "Portland-heatmap": {
              "files": {
                "prepend.js": "hard-coded/chart-types/heatmap/Portland-heatmap/prepend.js", 
                "prepend.py": "hard-coded/chart-types/heatmap/Portland-heatmap/prepend.py", 
                "prepend.m": "hard-coded/chart-types/heatmap/Portland-heatmap/prepend.m", 
                "model.json": "hard-coded/chart-types/heatmap/Portland-heatmap/model.json", 
                "prepend.r": "hard-coded/chart-types/heatmap/Portland-heatmap/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/heatmap/Portland-heatmap/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Portland\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Portland\"};\n\nvar graph_options = {filename: \"heatmap-Portland-heatmap\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "Portland-heatmap", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Portland'\n    )\n])\nlayout = Layout(\n    title='Portland'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='heatmap-Portland-heatmap')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" => z, \n    \"scl\" => \"Portland\", \n    \"type\" => \"heatmap\"\n  ]\n]\nlayout = [\"title\" => \"Portland\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"heatmap-Portland-heatmap\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 50\nz = rand(size, size)\nfor r = 1:size\n  for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"scl\" =&gt; \"Portland\", \n    \"type\" =&gt; \"heatmap\"\n  ]\n]\nlayout = [\"title\" =&gt; \"Portland\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"heatmap-Portland-heatmap\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1025", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 50\nz &lt;- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] &lt;- sqrt(r*c/size^2)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    scl = \"Portland\", \n    type = \"heatmap\"\n  )\n)\nlayout &lt;- list(title = \"Portland\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Portland-heatmap\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Portland', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Portland');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Portland-heatmap', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/heatmap/Portland-heatmap", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 50;\nvar z = unpack(fill(zeros([size, size]), function(c,r) {\n  return Math.sqrt((r*c)/(size*size));\n}));\nvar data = [\n  {\n    z: z, \n    scl: \"Portland\", \n    type: \"heatmap\"\n  }\n];\nvar layout = {title: \"Portland\"};\n\nvar graph_options = {filename: \"heatmap-Portland-heatmap\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 50;\nz = zeros(size, size);\nfor r = 1:size\n    for c = 1:size\n        z(r,c) = sqrt(r*c/size^2)\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'scl', 'Portland', ...\n    'type', 'heatmap')...\n};\nlayout = struct('title', 'Portland');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'heatmap-Portland-heatmap', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 50\nz <- matrix(0, size, size)\nfor(r in 1:size) {\n    for(c in 1:size) {\n        z[r, c] <- sqrt(r*c/size^2)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    scl = \"Portland\", \n    type = \"heatmap\"\n  )\n)\nlayout <- list(title = \"Portland\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"heatmap-Portland-heatmap\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 50\nz = np.zeros((size, size)).tolist()\nfor r in range(1, size + 1):\n    for c in range(1, size + 1):\n        z[r-1][c-1] = np.sqrt(r*c/float(size**2))\ndata = Data([\n    Heatmap(\n        z=z,\n        scl='Portland'\n    )\n])\nlayout = Layout(\n    title='Portland'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='heatmap-Portland-heatmap', auto_open=False)"
            }
          }, 
          "name": "heatmap", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "heatmap"
          }
        }, 
        "area": {
          "path": "hard-coded/chart-types/area", 
          "subsections": {
            "basic-area": {
              "files": {
                "model.json": "hard-coded/chart-types/area/basic-area/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [0, 2, 3, 5], \n  fill: \"tozeroy\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [3, 5, 1, 7], \n  fill: \"tonexty\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"area-basic-area\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-area", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy'\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty'\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='area-basic-area')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [0, 2, 3, 5], \n  \"fill\" => \"tozeroy\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [3, 5, 1, 7], \n  \"fill\" => \"tonexty\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"area-basic-area\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [0, 2, 3, 5], \n  \"fill\" =&gt; \"tozeroy\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [3, 5, 1, 7], \n  \"fill\" =&gt; \"tonexty\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"area-basic-area\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1026", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(0, 2, 3, 5), \n  fill = \"tozeroy\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(3, 5, 1, 7), \n  fill = \"tonexty\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"area-basic-area\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [0, 2, 3, 5], ...\n  'fill', 'tozeroy', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [3, 5, 1, 7], ...\n  'fill', 'tonexty', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'area-basic-area', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/area/basic-area", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [0, 2, 3, 5], \n  fill: \"tozeroy\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [3, 5, 1, 7], \n  fill: \"tonexty\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"area-basic-area\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [0, 2, 3, 5], ...\n  'fill', 'tozeroy', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [3, 5, 1, 7], ...\n  'fill', 'tonexty', ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'area-basic-area', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(0, 2, 3, 5), \n  fill = \"tozeroy\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(3, 5, 1, 7), \n  fill = \"tonexty\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"area-basic-area\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy'\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty'\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='area-basic-area', auto_open=False)"
            }
          }, 
          "name": "area", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "area"
          }
        }, 
        "text": {
          "path": "hard-coded/chart-types/text", 
          "subsections": {
            "text-chart-styling": {
              "files": {
                "model.json": "hard-coded/chart-types/text/text-chart-styling/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [1, 1, 1], \n  text: [\"Text A\", \"Text B\", \"Text C\"], \n  textposition: \"top right\", \n  name: \"Lines, Markers and Text\", \n  mode: \"lines+markers+text\", \n  textfont: {\n    family: \"sans serif\", \n    size: 18, \n    color: \"#1f77b4\"\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2], \n  y: [2, 2, 2], \n  text: [\"Text G\", \"Text H\", \"Text I\"], \n  textposition: \"bottom\", \n  name: \"Lines and Text\", \n  mode: \"lines+markers+text\", \n  textfont: {\n    family: \"sans serif\", \n    size: 18, \n    color: \"#ff7f0e\"\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"text-text-chart-styling\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "text-chart-styling", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top right',\n    name='Lines, Markers and Text',\n    mode='lines+markers+text',\n    textfont=Font(\n        family='sans serif',\n        size=18,\n        color='#1f77b4'\n    )\n)\ntrace2 = Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom',\n    name='Lines and Text',\n    mode='lines+markers+text',\n    textfont=Font(\n        family='sans serif',\n        size=18,\n        color='#ff7f0e'\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='text-text-chart-styling')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [1, 1, 1], \n  \"text\" => [\"Text A\", \"Text B\", \"Text C\"], \n  \"textposition\" => \"top right\", \n  \"name\" => \"Lines, Markers and Text\", \n  \"mode\" => \"lines+markers+text\", \n  \"textfont\" => [\n    \"family\" => \"sans serif\", \n    \"size\" => 18, \n    \"color\" => \"#1f77b4\"\n  ], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [2, 2, 2], \n  \"text\" => [\"Text G\", \"Text H\", \"Text I\"], \n  \"textposition\" => \"bottom\", \n  \"name\" => \"Lines and Text\", \n  \"mode\" => \"lines+markers+text\", \n  \"textfont\" => [\n    \"family\" => \"sans serif\", \n    \"size\" => 18, \n    \"color\" => \"#ff7f0e\"\n  ], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"showlegend\" => false]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"text-text-chart-styling\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [1, 1, 1], \n  \"text\" =&gt; [\"Text A\", \"Text B\", \"Text C\"], \n  \"textposition\" =&gt; \"top right\", \n  \"name\" =&gt; \"Lines, Markers and Text\", \n  \"mode\" =&gt; \"lines+markers+text\", \n  \"textfont\" =&gt; [\n    \"family\" =&gt; \"sans serif\", \n    \"size\" =&gt; 18, \n    \"color\" =&gt; \"#1f77b4\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [2, 2, 2], \n  \"text\" =&gt; [\"Text G\", \"Text H\", \"Text I\"], \n  \"textposition\" =&gt; \"bottom\", \n  \"name\" =&gt; \"Lines and Text\", \n  \"mode\" =&gt; \"lines+markers+text\", \n  \"textfont\" =&gt; [\n    \"family\" =&gt; \"sans serif\", \n    \"size\" =&gt; 18, \n    \"color\" =&gt; \"#ff7f0e\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\nlayout = [\"showlegend\" =&gt; false]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"text-text-chart-styling\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1027", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(1, 1, 1), \n  text = c(\"Text A\", \"Text B\", \"Text C\"), \n  textposition = \"top right\", \n  name = \"Lines, Markers and Text\", \n  mode = \"lines+markers+text\", \n  textfont = list(\n    family = \"sans serif\", \n    size = 18, \n    color = \"#1f77b4\"\n  ), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(2, 2, 2), \n  text = c(\"Text G\", \"Text H\", \"Text I\"), \n  textposition = \"bottom\", \n  name = \"Lines and Text\", \n  mode = \"lines+markers+text\", \n  textfont = list(\n    family = \"sans serif\", \n    size = 18, \n    color = \"#ff7f0e\"\n  ), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(showlegend = FALSE)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"text-text-chart-styling\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [1, 1, 1], ...\n  'text', { {'Text A', 'Text B', 'Text C'} }, ...\n  'textposition', 'top right', ...\n  'name', 'Lines, Markers and Text', ...\n  'mode', 'lines+markers+text', ...\n  'textfont', struct(...\n    'family', 'sans serif', ...\n    'size', 18, ...\n    'color', '#1f77b4'), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [2, 2, 2], ...\n  'text', { {'Text G', 'Text H', 'Text I'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Lines and Text', ...\n  'mode', 'lines+markers+text', ...\n  'textfont', struct(...\n    'family', 'sans serif', ...\n    'size', 18, ...\n    'color', '#ff7f0e'), ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'text-text-chart-styling', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/text/text-chart-styling", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [1, 1, 1], \n  text: [\"Text A\", \"Text B\", \"Text C\"], \n  textposition: \"top right\", \n  name: \"Lines, Markers and Text\", \n  mode: \"lines+markers+text\", \n  textfont: {\n    family: \"sans serif\", \n    size: 18, \n    color: \"#1f77b4\"\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2], \n  y: [2, 2, 2], \n  text: [\"Text G\", \"Text H\", \"Text I\"], \n  textposition: \"bottom\", \n  name: \"Lines and Text\", \n  mode: \"lines+markers+text\", \n  textfont: {\n    family: \"sans serif\", \n    size: 18, \n    color: \"#ff7f0e\"\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"text-text-chart-styling\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [1, 1, 1], ...\n  'text', { {'Text A', 'Text B', 'Text C'} }, ...\n  'textposition', 'top right', ...\n  'name', 'Lines, Markers and Text', ...\n  'mode', 'lines+markers+text', ...\n  'textfont', struct(...\n    'family', 'sans serif', ...\n    'size', 18, ...\n    'color', '#1f77b4'), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [2, 2, 2], ...\n  'text', { {'Text G', 'Text H', 'Text I'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Lines and Text', ...\n  'mode', 'lines+markers+text', ...\n  'textfont', struct(...\n    'family', 'sans serif', ...\n    'size', 18, ...\n    'color', '#ff7f0e'), ...\n  'type', 'scatter');\ndata = {trace1, trace2};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'text-text-chart-styling', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2), \n  y = c(1, 1, 1), \n  text = c(\"Text A\", \"Text B\", \"Text C\"), \n  textposition = \"top right\", \n  name = \"Lines, Markers and Text\", \n  mode = \"lines+markers+text\", \n  textfont = list(\n    family = \"sans serif\", \n    size = 18, \n    color = \"#1f77b4\"\n  ), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2), \n  y = c(2, 2, 2), \n  text = c(\"Text G\", \"Text H\", \"Text I\"), \n  textposition = \"bottom\", \n  name = \"Lines and Text\", \n  mode = \"lines+markers+text\", \n  textfont = list(\n    family = \"sans serif\", \n    size = 18, \n    color = \"#ff7f0e\"\n  ), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(showlegend = FALSE)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"text-text-chart-styling\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top right',\n    name='Lines, Markers and Text',\n    mode='lines+markers+text',\n    textfont=Font(\n        family='sans serif',\n        size=18,\n        color='#1f77b4'\n    )\n)\ntrace2 = Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom',\n    name='Lines and Text',\n    mode='lines+markers+text',\n    textfont=Font(\n        family='sans serif',\n        size=18,\n        color='#ff7f0e'\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='text-text-chart-styling', auto_open=False)"
            }, 
            "text-chart-basic": {
              "files": {
                "model.json": "hard-coded/chart-types/text/text-chart-basic/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [1, 1, 1], \n  text: [\"Text A\", \"Text B\", \"Text C\"], \n  textposition: \"top\", \n  name: \"Lines, Markers and Text\", \n  mode: \"lines+markers+text\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2], \n  y: [2, 2, 2], \n  text: [\"Text D\", \"Text E\", \"Text F\"], \n  textposition: \"bottom\", \n  name: \"Markers and Text\", \n  mode: \"markers+text\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [0, 1, 2], \n  y: [3, 3, 3], \n  text: [\"Text G\", \"Text H\", \"Text I\"], \n  textposition: \"bottom\", \n  name: \"Lines and Text\", \n  mode: \"lines+text\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"text-text-chart-basic\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "text-chart-basic", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top',\n    name='Lines, Markers and Text',\n    mode='lines+markers+text'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    text=['Text D', 'Text E', 'Text F'],\n    textposition='bottom',\n    name='Markers and Text',\n    mode='markers+text'\n)\ntrace3 = Scatter(\n    x=[0, 1, 2],\n    y=[3, 3, 3],\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom',\n    name='Lines and Text',\n    mode='lines+text'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='text-text-chart-basic')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [1, 1, 1], \n  \"text\" => [\"Text A\", \"Text B\", \"Text C\"], \n  \"textposition\" => \"top\", \n  \"name\" => \"Lines, Markers and Text\", \n  \"mode\" => \"lines+markers+text\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [2, 2, 2], \n  \"text\" => [\"Text D\", \"Text E\", \"Text F\"], \n  \"textposition\" => \"bottom\", \n  \"name\" => \"Markers and Text\", \n  \"mode\" => \"markers+text\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [0, 1, 2], \n  \"y\" => [3, 3, 3], \n  \"text\" => [\"Text G\", \"Text H\", \"Text I\"], \n  \"textposition\" => \"bottom\", \n  \"name\" => \"Lines and Text\", \n  \"mode\" => \"lines+text\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\"showlegend\" => false]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"text-text-chart-basic\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [1, 1, 1], \n  \"text\" =&gt; [\"Text A\", \"Text B\", \"Text C\"], \n  \"textposition\" =&gt; \"top\", \n  \"name\" =&gt; \"Lines, Markers and Text\", \n  \"mode\" =&gt; \"lines+markers+text\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [2, 2, 2], \n  \"text\" =&gt; [\"Text D\", \"Text E\", \"Text F\"], \n  \"textposition\" =&gt; \"bottom\", \n  \"name\" =&gt; \"Markers and Text\", \n  \"mode\" =&gt; \"markers+text\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [0, 1, 2], \n  \"y\" =&gt; [3, 3, 3], \n  \"text\" =&gt; [\"Text G\", \"Text H\", \"Text I\"], \n  \"textposition\" =&gt; \"bottom\", \n  \"name\" =&gt; \"Lines and Text\", \n  \"mode\" =&gt; \"lines+text\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\"showlegend\" =&gt; false]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"text-text-chart-basic\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1028", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(1, 1, 1), \n  text = c(\"Text A\", \"Text B\", \"Text C\"), \n  textposition = \"top\", \n  name = \"Lines, Markers and Text\", \n  mode = \"lines+markers+text\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(2, 2, 2), \n  text = c(\"Text D\", \"Text E\", \"Text F\"), \n  textposition = \"bottom\", \n  name = \"Markers and Text\", \n  mode = \"markers+text\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(0, 1, 2), \n  y = c(3, 3, 3), \n  text = c(\"Text G\", \"Text H\", \"Text I\"), \n  textposition = \"bottom\", \n  name = \"Lines and Text\", \n  mode = \"lines+text\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3)\nlayout &lt;- list(showlegend = FALSE)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"text-text-chart-basic\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [1, 1, 1], ...\n  'text', { {'Text A', 'Text B', 'Text C'} }, ...\n  'textposition', 'top', ...\n  'name', 'Lines, Markers and Text', ...\n  'mode', 'lines+markers+text', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [2, 2, 2], ...\n  'text', { {'Text D', 'Text E', 'Text F'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Markers and Text', ...\n  'mode', 'markers+text', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [3, 3, 3], ...\n  'text', { {'Text G', 'Text H', 'Text I'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Lines and Text', ...\n  'mode', 'lines+text', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'text-text-chart-basic', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/text/text-chart-basic", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2], \n  y: [1, 1, 1], \n  text: [\"Text A\", \"Text B\", \"Text C\"], \n  textposition: \"top\", \n  name: \"Lines, Markers and Text\", \n  mode: \"lines+markers+text\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2], \n  y: [2, 2, 2], \n  text: [\"Text D\", \"Text E\", \"Text F\"], \n  textposition: \"bottom\", \n  name: \"Markers and Text\", \n  mode: \"markers+text\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [0, 1, 2], \n  y: [3, 3, 3], \n  text: [\"Text G\", \"Text H\", \"Text I\"], \n  textposition: \"bottom\", \n  name: \"Lines and Text\", \n  mode: \"lines+text\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"text-text-chart-basic\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [1, 1, 1], ...\n  'text', { {'Text A', 'Text B', 'Text C'} }, ...\n  'textposition', 'top', ...\n  'name', 'Lines, Markers and Text', ...\n  'mode', 'lines+markers+text', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [2, 2, 2], ...\n  'text', { {'Text D', 'Text E', 'Text F'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Markers and Text', ...\n  'mode', 'markers+text', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [0, 1, 2], ...\n  'y', [3, 3, 3], ...\n  'text', { {'Text G', 'Text H', 'Text I'} }, ...\n  'textposition', 'bottom', ...\n  'name', 'Lines and Text', ...\n  'mode', 'lines+text', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'text-text-chart-basic', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2), \n  y = c(1, 1, 1), \n  text = c(\"Text A\", \"Text B\", \"Text C\"), \n  textposition = \"top\", \n  name = \"Lines, Markers and Text\", \n  mode = \"lines+markers+text\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2), \n  y = c(2, 2, 2), \n  text = c(\"Text D\", \"Text E\", \"Text F\"), \n  textposition = \"bottom\", \n  name = \"Markers and Text\", \n  mode = \"markers+text\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(0, 1, 2), \n  y = c(3, 3, 3), \n  text = c(\"Text G\", \"Text H\", \"Text I\"), \n  textposition = \"bottom\", \n  name = \"Lines and Text\", \n  mode = \"lines+text\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3)\nlayout <- list(showlegend = FALSE)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"text-text-chart-basic\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top',\n    name='Lines, Markers and Text',\n    mode='lines+markers+text'\n)\ntrace2 = Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    text=['Text D', 'Text E', 'Text F'],\n    textposition='bottom',\n    name='Markers and Text',\n    mode='markers+text'\n)\ntrace3 = Scatter(\n    x=[0, 1, 2],\n    y=[3, 3, 3],\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom',\n    name='Lines and Text',\n    mode='lines+text'\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='text-text-chart-basic', auto_open=False)"
            }
          }, 
          "name": "text", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "text"
          }
        }, 
        "histogram": {
          "path": "hard-coded/chart-types/histogram", 
          "subsections": {
            "basic-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram/basic-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram/basic-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram/basic-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram/basic-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram/basic-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram/basic-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x = Math.random() * 500\nvar data = [\n  {\n    x: x, \n    type: \"histogram\"\n  }\n];\n\nvar graph_options = {filename: \"histogram-basic-histogram\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-histogram", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\nx = np.random.randn(500)\ndata = Data([\n    Histogram(\n        x=x\n    )\n])\n\nplot_url = py.plot(data, filename='histogram-basic-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx = randn(500)\ndata = [\n  [\n    \"x\" => x, \n    \"type\" => \"histogram\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"histogram-basic-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx = randn(500)\ndata = [\n  [\n    \"x\" =&gt; x, \n    \"type\" =&gt; \"histogram\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"histogram-basic-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1029", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx = rnorm(500)\ndata &lt;- list(\n  list(\n    x = x, \n    type = \"histogram\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"histogram-basic-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx = randn(500,1);\ndata = {...\n  struct(...\n    'x', x, ...\n    'type', 'histogram')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram-basic-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram/basic-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x = Math.random() * 500\nvar data = [\n  {\n    x: x, \n    type: \"histogram\"\n  }\n];\n\nvar graph_options = {filename: \"histogram-basic-histogram\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx = randn(500,1);\ndata = {...\n  struct(...\n    'x', x, ...\n    'type', 'histogram')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram-basic-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx = rnorm(500)\ndata <- list(\n  list(\n    x = x, \n    type = \"histogram\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"histogram-basic-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\nx = np.random.randn(500)\ndata = Data([\n    Histogram(\n        x=x\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='histogram-basic-histogram', auto_open=False)"
            }, 
            "horizontal-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram/horizontal-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram/horizontal-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram/horizontal-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram/horizontal-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram/horizontal-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram/horizontal-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar y = Math.random() * 50\nvar data = [\n  {\n    y: y, \n    type: \"histogram\"\n  }\n];\n\nvar graph_options = {filename: \"histogram-horizontal-histogram\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "horizontal-histogram", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\ny = np.random.randn(500)\ndata = Data([\n    Histogram(\n        y=y\n    )\n])\n\nplot_url = py.plot(data, filename='histogram-horizontal-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ny = randn(500)\ndata = [\n  [\n    \"y\" => y, \n    \"type\" => \"histogram\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"histogram-horizontal-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ny = randn(500)\ndata = [\n  [\n    \"y\" =&gt; y, \n    \"type\" =&gt; \"histogram\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"histogram-horizontal-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1030", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ny = rnorm(500)\ndata &lt;- list(\n  list(\n    y = y, \n    type = \"histogram\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"histogram-horizontal-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ny = randn(500,1);\ndata = {...\n  struct(...\n    'y', y, ...\n    'type', 'histogram')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram-horizontal-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram/horizontal-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar y = Math.random() * 50\nvar data = [\n  {\n    y: y, \n    type: \"histogram\"\n  }\n];\n\nvar graph_options = {filename: \"histogram-horizontal-histogram\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ny = randn(500,1);\ndata = {...\n  struct(...\n    'y', y, ...\n    'type', 'histogram')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram-horizontal-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ny = rnorm(500)\ndata <- list(\n  list(\n    y = y, \n    type = \"histogram\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"histogram-horizontal-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\ny = np.random.randn(500)\ndata = Data([\n    Histogram(\n        y=y\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='histogram-horizontal-histogram', auto_open=False)"
            }, 
            "overlaid-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram/overlaid-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram/overlaid-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram/overlaid-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram/overlaid-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram/overlaid-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram/overlaid-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  opacity: 0.75, \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  opacity: 0.75, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"overlay\"};\n\nvar graph_options = {filename: \"histogram-overlaid-histogram\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "overlaid-histogram", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0,\n    opacity=0.75\n)\ntrace2 = Histogram(\n    x=x1,\n    opacity=0.75\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='overlay'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='histogram-overlaid-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" => x0, \n  \"opacity\" => 0.75, \n  \"type\" => \"histogram\"\n]\ntrace2 = [\n  \"x\" => x1, \n  \"opacity\" => 0.75, \n  \"type\" => \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" => \"overlay\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"histogram-overlaid-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" =&gt; x0, \n  \"opacity\" =&gt; 0.75, \n  \"type\" =&gt; \"histogram\"\n]\ntrace2 = [\n  \"x\" =&gt; x1, \n  \"opacity\" =&gt; 0.75, \n  \"type\" =&gt; \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" =&gt; \"overlay\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"histogram-overlaid-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1031", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 &lt;- list(\n  x = x0, \n  opacity = 0.75, \n  type = \"histogram\"\n)\ntrace2 &lt;- list(\n  x = x1, \n  opacity = 0.75, \n  type = \"histogram\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(barmode = \"overlay\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-overlaid-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'opacity', 0.75, ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'opacity', 0.75, ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'overlay');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-overlaid-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram/overlaid-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  opacity: 0.75, \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  opacity: 0.75, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"overlay\"};\n\nvar graph_options = {filename: \"histogram-overlaid-histogram\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'opacity', 0.75, ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'opacity', 0.75, ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'overlay');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-overlaid-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 <- list(\n  x = x0, \n  opacity = 0.75, \n  type = \"histogram\"\n)\ntrace2 <- list(\n  x = x1, \n  opacity = 0.75, \n  type = \"histogram\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(barmode = \"overlay\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-overlaid-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0,\n    opacity=0.75\n)\ntrace2 = Histogram(\n    x=x1,\n    opacity=0.75\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='overlay'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='histogram-overlaid-histogram', auto_open=False)"
            }, 
            "style-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram/style-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram/style-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram/style-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram/style-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram/style-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram/style-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  name: \"control\", \n  marker: {\n    line: {\n      color: \"grey\", \n      width: 0\n    }, \n    color: \"fuchsia\", \n    opacity: 0.75\n  }, \n  autobinx: false, \n  xbins: {\n    start: -3.2, \n    end: 2.8, \n    size: 0.2\n  }, \n  histnorm: \"count\", \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  name: \"experimental\", \n  marker: {color: \"rgb(255, 217, 102)\"}, \n  opacity: 0.75, \n  autobinx: false, \n  xbins: {\n    start: -1.8, \n    end: 4.2, \n    size: 0.2\n  }, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Sampled Results\", \n  xaxis: {title: \"Value\"}, \n  yaxis: {title: \"Count\"}, \n  barmode: \"overlay\", \n  bargap: 0.25, \n  bargroupgap: 0.3, \n  bardir: \"v\"\n};\n\nvar graph_options = {filename: \"histogram-style-histogram\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "style-histogram", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0,\n    name='control',\n    marker=Marker(\n        line=Line(\n            color='grey',\n            width=0\n        ),\n        color='fuchsia',\n        opacity=0.75\n    ),\n    autobinx=False,\n    xbins=XBins(\n        start=-3.2,\n        end=2.8,\n        size=0.2\n    ),\n    histnorm='count'\n)\ntrace2 = Histogram(\n    x=x1,\n    name='experimental',\n    marker=Marker(\n        color='rgb(255, 217, 102)'\n    ),\n    opacity=0.75,\n    autobinx=False,\n    xbins=XBins(\n        start=-1.8,\n        end=4.2,\n        size=0.2\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Sampled Results',\n    xaxis=XAxis(\n        title='Value'\n    ),\n    yaxis=YAxis(\n        title='Count'\n    ),\n    barmode='overlay',\n    bargap=0.25,\n    bargroupgap=0.3,\n    bardir='v'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='histogram-style-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" => x0, \n  \"name\" => \"control\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"grey\", \n      \"width\" => 0\n    ], \n    \"color\" => \"fuchsia\", \n    \"opacity\" => 0.75\n  ], \n  \"autobinx\" => false, \n  \"xbins\" => [\n    \"start\" => -3.2, \n    \"end\" => 2.8, \n    \"size\" => 0.2\n  ], \n  \"histnorm\" => \"count\", \n  \"type\" => \"histogram\"\n]\ntrace2 = [\n  \"x\" => x1, \n  \"name\" => \"experimental\", \n  \"marker\" => [\"color\" => \"rgb(255, 217, 102)\"], \n  \"opacity\" => 0.75, \n  \"autobinx\" => false, \n  \"xbins\" => [\n    \"start\" => -1.8, \n    \"end\" => 4.2, \n    \"size\" => 0.2\n  ], \n  \"type\" => \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" => \"Sampled Results\", \n  \"xaxis\" => [\"title\" => \"Value\"], \n  \"yaxis\" => [\"title\" => \"Count\"], \n  \"barmode\" => \"overlay\", \n  \"bargap\" => 0.25, \n  \"bargroupgap\" => 0.3, \n  \"bardir\" => \"v\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"histogram-style-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" =&gt; x0, \n  \"name\" =&gt; \"control\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"grey\", \n      \"width\" =&gt; 0\n    ], \n    \"color\" =&gt; \"fuchsia\", \n    \"opacity\" =&gt; 0.75\n  ], \n  \"autobinx\" =&gt; false, \n  \"xbins\" =&gt; [\n    \"start\" =&gt; -3.2, \n    \"end\" =&gt; 2.8, \n    \"size\" =&gt; 0.2\n  ], \n  \"histnorm\" =&gt; \"count\", \n  \"type\" =&gt; \"histogram\"\n]\ntrace2 = [\n  \"x\" =&gt; x1, \n  \"name\" =&gt; \"experimental\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(255, 217, 102)\"], \n  \"opacity\" =&gt; 0.75, \n  \"autobinx\" =&gt; false, \n  \"xbins\" =&gt; [\n    \"start\" =&gt; -1.8, \n    \"end\" =&gt; 4.2, \n    \"size\" =&gt; 0.2\n  ], \n  \"type\" =&gt; \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\n  \"title\" =&gt; \"Sampled Results\", \n  \"xaxis\" =&gt; [\"title\" =&gt; \"Value\"], \n  \"yaxis\" =&gt; [\"title\" =&gt; \"Count\"], \n  \"barmode\" =&gt; \"overlay\", \n  \"bargap\" =&gt; 0.25, \n  \"bargroupgap\" =&gt; 0.3, \n  \"bardir\" =&gt; \"v\"\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"histogram-style-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1032", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 &lt;- list(\n  x = x0, \n  name = \"control\", \n  marker = list(\n    line = list(\n      color = \"grey\", \n      width = 0\n    ), \n    color = \"fuchsia\", \n    opacity = 0.75\n  ), \n  autobinx = FALSE, \n  xbins = list(\n    start = -3.2, \n    end = 2.8, \n    size = 0.2\n  ), \n  histnorm = \"count\", \n  type = \"histogram\"\n)\ntrace2 &lt;- list(\n  x = x1, \n  name = \"experimental\", \n  marker = list(color = \"rgb(255, 217, 102)\"), \n  opacity = 0.75, \n  autobinx = FALSE, \n  xbins = list(\n    start = -1.8, \n    end = 4.2, \n    size = 0.2\n  ), \n  type = \"histogram\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(\n  title = \"Sampled Results\", \n  xaxis = list(title = \"Value\"), \n  yaxis = list(title = \"Count\"), \n  barmode = \"overlay\", \n  bargap = 0.25, \n  bargroupgap = 0.3, \n  bardir = \"v\"\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-style-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'name', 'control', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'grey', ...\n      'width', 0), ...\n    'color', 'fuchsia', ...\n    'opacity', 0.75), ...\n  'autobinx', false, ...\n  'xbins', struct(...\n    'start', -3.2, ...\n    'end', 2.8, ...\n    'size', 0.2), ...\n  'histnorm', 'count', ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'name', 'experimental', ...\n  'marker', struct('color', 'rgb(255, 217, 102)'), ...\n  'opacity', 0.75, ...\n  'autobinx', false, ...\n  'xbins', struct(...\n    'start', -1.8, ...\n    'end', 4.2, ...\n    'size', 0.2), ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Sampled Results', ...\n    'xaxis', struct('title', 'Value'), ...\n    'yaxis', struct('title', 'Count'), ...\n    'barmode', 'overlay', ...\n    'bargap', 0.25, ...\n    'bargroupgap', 0.3, ...\n    'bardir', 'v');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-style-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram/style-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  name: \"control\", \n  marker: {\n    line: {\n      color: \"grey\", \n      width: 0\n    }, \n    color: \"fuchsia\", \n    opacity: 0.75\n  }, \n  autobinx: false, \n  xbins: {\n    start: -3.2, \n    end: 2.8, \n    size: 0.2\n  }, \n  histnorm: \"count\", \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  name: \"experimental\", \n  marker: {color: \"rgb(255, 217, 102)\"}, \n  opacity: 0.75, \n  autobinx: false, \n  xbins: {\n    start: -1.8, \n    end: 4.2, \n    size: 0.2\n  }, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: \"Sampled Results\", \n  xaxis: {title: \"Value\"}, \n  yaxis: {title: \"Count\"}, \n  barmode: \"overlay\", \n  bargap: 0.25, \n  bargroupgap: 0.3, \n  bardir: \"v\"\n};\n\nvar graph_options = {filename: \"histogram-style-histogram\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'name', 'control', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'grey', ...\n      'width', 0), ...\n    'color', 'fuchsia', ...\n    'opacity', 0.75), ...\n  'autobinx', false, ...\n  'xbins', struct(...\n    'start', -3.2, ...\n    'end', 2.8, ...\n    'size', 0.2), ...\n  'histnorm', 'count', ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'name', 'experimental', ...\n  'marker', struct('color', 'rgb(255, 217, 102)'), ...\n  'opacity', 0.75, ...\n  'autobinx', false, ...\n  'xbins', struct(...\n    'start', -1.8, ...\n    'end', 4.2, ...\n    'size', 0.2), ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct(...\n    'title', 'Sampled Results', ...\n    'xaxis', struct('title', 'Value'), ...\n    'yaxis', struct('title', 'Count'), ...\n    'barmode', 'overlay', ...\n    'bargap', 0.25, ...\n    'bargroupgap', 0.3, ...\n    'bardir', 'v');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-style-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 <- list(\n  x = x0, \n  name = \"control\", \n  marker = list(\n    line = list(\n      color = \"grey\", \n      width = 0\n    ), \n    color = \"fuchsia\", \n    opacity = 0.75\n  ), \n  autobinx = FALSE, \n  xbins = list(\n    start = -3.2, \n    end = 2.8, \n    size = 0.2\n  ), \n  histnorm = \"count\", \n  type = \"histogram\"\n)\ntrace2 <- list(\n  x = x1, \n  name = \"experimental\", \n  marker = list(color = \"rgb(255, 217, 102)\"), \n  opacity = 0.75, \n  autobinx = FALSE, \n  xbins = list(\n    start = -1.8, \n    end = 4.2, \n    size = 0.2\n  ), \n  type = \"histogram\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(\n  title = \"Sampled Results\", \n  xaxis = list(title = \"Value\"), \n  yaxis = list(title = \"Count\"), \n  barmode = \"overlay\", \n  bargap = 0.25, \n  bargroupgap = 0.3, \n  bardir = \"v\"\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-style-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0,\n    name='control',\n    marker=Marker(\n        line=Line(\n            color='grey',\n            width=0\n        ),\n        color='fuchsia',\n        opacity=0.75\n    ),\n    autobinx=False,\n    xbins=XBins(\n        start=-3.2,\n        end=2.8,\n        size=0.2\n    ),\n    histnorm='count'\n)\ntrace2 = Histogram(\n    x=x1,\n    name='experimental',\n    marker=Marker(\n        color='rgb(255, 217, 102)'\n    ),\n    opacity=0.75,\n    autobinx=False,\n    xbins=XBins(\n        start=-1.8,\n        end=4.2,\n        size=0.2\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    title='Sampled Results',\n    xaxis=XAxis(\n        title='Value'\n    ),\n    yaxis=YAxis(\n        title='Count'\n    ),\n    barmode='overlay',\n    bargap=0.25,\n    bargroupgap=0.3,\n    bardir='v'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='histogram-style-histogram', auto_open=False)"
            }, 
            "stacked-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram/stacked-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram/stacked-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram/stacked-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram/stacked-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram/stacked-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram/stacked-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"stacked\"};\n\nvar graph_options = {filename: \"histogram-stacked-histogram\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "stacked-histogram", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0\n)\ntrace2 = Histogram(\n    x=x1\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='stacked'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='histogram-stacked-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" => x0, \n  \"type\" => \"histogram\"\n]\ntrace2 = [\n  \"x\" => x1, \n  \"type\" => \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" => \"stacked\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"histogram-stacked-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx0 = randn(500)\nx1 = randn(500)+1\ntrace1 = [\n  \"x\" =&gt; x0, \n  \"type\" =&gt; \"histogram\"\n]\ntrace2 = [\n  \"x\" =&gt; x1, \n  \"type\" =&gt; \"histogram\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" =&gt; \"stacked\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"histogram-stacked-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1033", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 &lt;- list(\n  x = x0, \n  type = \"histogram\"\n)\ntrace2 &lt;- list(\n  x = x1, \n  type = \"histogram\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(barmode = \"stacked\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-stacked-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'stacked');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-stacked-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram/stacked-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x0 = Math.random() * 500\nvar x1 = Math.random() * 500 + 1\nvar trace1 = {\n  x: x0, \n  type: \"histogram\"\n};\nvar trace2 = {\n  x: x1, \n  type: \"histogram\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"stacked\"};\n\nvar graph_options = {filename: \"histogram-stacked-histogram\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx0 = randn(500,1);\nx1 = randn(500,1)+1;\ntrace1 = struct(...\n  'x', x0, ...\n  'type', 'histogram');\ntrace2 = struct(...\n  'x', x1, ...\n  'type', 'histogram');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'stacked');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'histogram-stacked-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx0 = rnorm(500)\nx1 = rnorm(500)+1\ntrace1 <- list(\n  x = x0, \n  type = \"histogram\"\n)\ntrace2 <- list(\n  x = x1, \n  type = \"histogram\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(barmode = \"stacked\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"histogram-stacked-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\ntrace1 = Histogram(\n    x=x0\n)\ntrace2 = Histogram(\n    x=x1\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='stacked'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='histogram-stacked-histogram', auto_open=False)"
            }
          }, 
          "name": "histogram", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "Histograms for the people", 
            "relative_url": "histogramz"
          }
        }, 
        "time-series": {
          "path": "hard-coded/chart-types/time-series", 
          "subsections": {
            "date-axes": {
              "files": {
                "model.json": "hard-coded/chart-types/time-series/date-axes/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"], \n    y: [1, 3, 6], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"time-series-date-axes\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "date-axes", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n        y=[1, 3, 6]\n    )\n])\n\nplot_url = py.plot(data, filename='time-series-date-axes')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"], \n    \"y\" => [1, 3, 6], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"time-series-date-axes\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"], \n    \"y\" =&gt; [1, 3, 6], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"time-series-date-axes\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1034", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"), \n    y = c(1, 3, 6), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"time-series-date-axes\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', { {'2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'} }, ...\n    'y', [1, 3, 6], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'time-series-date-axes', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/time-series/date-axes", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"], \n    y: [1, 3, 6], \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"time-series-date-axes\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', { {'2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'} }, ...\n    'y', [1, 3, 6], ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'time-series-date-axes', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(\"2013-10-04 22:23:00\", \"2013-11-04 22:23:00\", \"2013-12-04 22:23:00\"), \n    y = c(1, 3, 6), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"time-series-date-axes\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n        y=[1, 3, 6]\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='time-series-date-axes', auto_open=False)"
            }
          }, 
          "name": "time-series", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "time-series"
          }
        }, 
        "error-bar": {
          "path": "hard-coded/chart-types/error-bar", 
          "subsections": {
            "basic-error-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/basic-error-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 1, 2], \n    y: [6, 10, 2], \n    error_y: {\n      array: [1, 2, 3], \n      type: \"data\", \n      visible: true\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-basic-error-bar\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-error-bar", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=ErrorY(\n            array=[1, 2, 3],\n            type='data',\n            visible=True\n        )\n    )\n])\n\nplot_url = py.plot(data, filename='error-bar-basic-error-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 1, 2], \n    \"y\" => [6, 10, 2], \n    \"error_y\" => [\n      \"array\" => [1, 2, 3], \n      \"type\" => \"data\", \n      \"visible\" => true\n    ], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-basic-error-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 1, 2], \n    \"y\" =&gt; [6, 10, 2], \n    \"error_y\" =&gt; [\n      \"array\" =&gt; [1, 2, 3], \n      \"type\" =&gt; \"data\", \n      \"visible\" =&gt; true\n    ], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-basic-error-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1035", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 1, 2), \n    y = c(6, 10, 2), \n    error_y = list(\n      array = c(1, 2, 3), \n      type = \"data\", \n      visible = TRUE\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-basic-error-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2], ...\n    'y', [6, 10, 2], ...\n    'error_y', struct(...\n      'array', [1, 2, 3], ...\n      'type', 'data', ...\n      'visible', true), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-basic-error-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/basic-error-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 1, 2], \n    y: [6, 10, 2], \n    error_y: {\n      array: [1, 2, 3], \n      type: \"data\", \n      visible: true\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-basic-error-bar\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2], ...\n    'y', [6, 10, 2], ...\n    'error_y', struct(...\n      'array', [1, 2, 3], ...\n      'type', 'data', ...\n      'visible', true), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-basic-error-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 1, 2), \n    y = c(6, 10, 2), \n    error_y = list(\n      array = c(1, 2, 3), \n      type = \"data\", \n      visible = TRUE\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-basic-error-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=ErrorY(\n            array=[1, 2, 3],\n            type='data',\n            visible=True\n        )\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-basic-error-bar', auto_open=False)"
            }, 
            "error-bar-asymmetric-constant": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/error-bar-asymmetric-constant/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_y: {\n      value: 15, \n      type: \"percent\", \n      symmetric: false, \n      valueminus: 25\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-asymmetric-constant\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "error-bar-asymmetric-constant", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=ErrorY(\n            value=15,\n            type='percent',\n            symmetric=False,\n            valueminus=25\n        )\n    )\n])\n\nplot_url = py.plot(data, filename='error-bar-error-bar-asymmetric-constant')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [1, 2, 3, 4], \n    \"y\" => [2, 1, 3, 4], \n    \"error_y\" => [\n      \"value\" => 15, \n      \"type\" => \"percent\", \n      \"symmetric\" => false, \n      \"valueminus\" => 25\n    ], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-error-bar-asymmetric-constant\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [1, 2, 3, 4], \n    \"y\" =&gt; [2, 1, 3, 4], \n    \"error_y\" =&gt; [\n      \"value\" =&gt; 15, \n      \"type\" =&gt; \"percent\", \n      \"symmetric\" =&gt; false, \n      \"valueminus\" =&gt; 25\n    ], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-error-bar-asymmetric-constant\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1036", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_y = list(\n      value = 15, \n      type = \"percent\", \n      symmetric = FALSE, \n      valueminus = 25\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-asymmetric-constant\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_y', struct(...\n      'value', 15, ...\n      'type', 'percent', ...\n      'symmetric', false, ...\n      'valueminus', 25), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-asymmetric-constant', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/error-bar-asymmetric-constant", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_y: {\n      value: 15, \n      type: \"percent\", \n      symmetric: false, \n      valueminus: 25\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-asymmetric-constant\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_y', struct(...\n      'value', 15, ...\n      'type', 'percent', ...\n      'symmetric', false, ...\n      'valueminus', 25), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-asymmetric-constant', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_y = list(\n      value = 15, \n      type = \"percent\", \n      symmetric = FALSE, \n      valueminus = 25\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-asymmetric-constant\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=ErrorY(\n            value=15,\n            type='percent',\n            symmetric=False,\n            valueminus=25\n        )\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-error-bar-asymmetric-constant', auto_open=False)"
            }, 
            "percent-error-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/percent-error-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [0, 1, 2], \n    y: [6, 10, 2], \n    error_y: {\n      value: 50, \n      type: \"percent\", \n      visible: true\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-percent-error-bar\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "percent-error-bar", 
              "image.png": "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", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=ErrorY(\n            value=50,\n            type='percent',\n            visible=True\n        )\n    )\n])\n\nplot_url = py.plot(data, filename='error-bar-percent-error-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [0, 1, 2], \n    \"y\" => [6, 10, 2], \n    \"error_y\" => [\n      \"value\" => 50, \n      \"type\" => \"percent\", \n      \"visible\" => true\n    ], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-percent-error-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [0, 1, 2], \n    \"y\" =&gt; [6, 10, 2], \n    \"error_y\" =&gt; [\n      \"value\" =&gt; 50, \n      \"type\" =&gt; \"percent\", \n      \"visible\" =&gt; true\n    ], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-percent-error-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1037", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(0, 1, 2), \n    y = c(6, 10, 2), \n    error_y = list(\n      value = 50, \n      type = \"percent\", \n      visible = TRUE\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-percent-error-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2], ...\n    'y', [6, 10, 2], ...\n    'error_y', struct(...\n      'value', 50, ...\n      'type', 'percent', ...\n      'visible', true), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-percent-error-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/percent-error-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [0, 1, 2], \n    y: [6, 10, 2], \n    error_y: {\n      value: 50, \n      type: \"percent\", \n      visible: true\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-percent-error-bar\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [0, 1, 2], ...\n    'y', [6, 10, 2], ...\n    'error_y', struct(...\n      'value', 50, ...\n      'type', 'percent', ...\n      'visible', true), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-percent-error-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(0, 1, 2), \n    y = c(6, 10, 2), \n    error_y = list(\n      value = 50, \n      type = \"percent\", \n      visible = TRUE\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-percent-error-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=ErrorY(\n            value=50,\n            type='percent',\n            visible=True\n        )\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-percent-error-bar', auto_open=False)"
            }, 
            "error-bar-horizontal": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/error-bar-horizontal/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_x: {\n      value: 10, \n      type: \"percent\"\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-horizontal\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "error-bar-horizontal", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_x=ErrorX(\n            value=10,\n            type='percent'\n        )\n    )\n])\n\nplot_url = py.plot(data, filename='error-bar-error-bar-horizontal')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [1, 2, 3, 4], \n    \"y\" => [2, 1, 3, 4], \n    \"error_x\" => [\n      \"value\" => 10, \n      \"type\" => \"percent\"\n    ], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-error-bar-horizontal\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [1, 2, 3, 4], \n    \"y\" =&gt; [2, 1, 3, 4], \n    \"error_x\" =&gt; [\n      \"value\" =&gt; 10, \n      \"type\" =&gt; \"percent\"\n    ], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-error-bar-horizontal\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1038", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_x = list(\n      value = 10, \n      type = \"percent\"\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-horizontal\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_x', struct(...\n      'value', 10, ...\n      'type', 'percent'), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-horizontal', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/error-bar-horizontal", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_x: {\n      value: 10, \n      type: \"percent\"\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-horizontal\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_x', struct(...\n      'value', 10, ...\n      'type', 'percent'), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-horizontal', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_x = list(\n      value = 10, \n      type = \"percent\"\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-horizontal\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_x=ErrorX(\n            value=10,\n            type='percent'\n        )\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-error-bar-horizontal', auto_open=False)"
            }, 
            "error-bar-style": {
              "files": {
                "prepend.js": "hard-coded/chart-types/error-bar/error-bar-style/prepend.js", 
                "prepend.py": "hard-coded/chart-types/error-bar/error-bar-style/prepend.py", 
                "prepend.m": "hard-coded/chart-types/error-bar/error-bar-style/prepend.m", 
                "model.json": "hard-coded/chart-types/error-bar/error-bar-style/model.json", 
                "prepend.r": "hard-coded/chart-types/error-bar/error-bar-style/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/error-bar/error-bar-style/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar linspace = require('linspace')\n\nx_theo = linspace(-4, 4, 100)\nsincx = Math.sin(x_theo) / x_theo\nvar x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\nvar y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\nvar trace1 = {\n  x: x_theo, \n  y: sincx, \n  name: \"sinc(x)\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x, \n  y: y, \n  name: \"measured\", \n  mode: \"markers\", \n  marker: {\n    size: 8, \n    color: \"#85144B\"\n  }, \n  error_y: {\n    value: 0.1, \n    type: \"constant\", \n    color: \"#85144B\", \n    opacity: 1, \n    thickness: 1.5, \n    width: 3\n  }, \n  error_x: {\n    value: 0.2, \n    type: \"constant\", \n    color: \"#85144B\", \n    opacity: 1, \n    thickness: 1.5, \n    width: 3\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"error-bar-error-bar-style\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "error-bar-style", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nx_theo = np.linspace(-4, 4, 100)\nsincx = np.sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = Scatter(\n    x=x_theo,\n    y=sincx,\n    name='sinc(x)'\n)\ntrace2 = Scatter(\n    x=x,\n    y=y,\n    name='measured',\n    mode='markers',\n    marker=Marker(\n        size=8,\n        color='#85144B'\n    ),\n    error_y=ErrorY(\n        value=0.1,\n        type='constant',\n        color='#85144B',\n        opacity=1,\n        thickness=1.5,\n        width=3\n    ),\n    error_x=ErrorX(\n        value=0.2,\n        type='constant',\n        color='#85144B',\n        opacity=1,\n        thickness=1.5,\n        width=3\n    )\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='error-bar-error-bar-style')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx_theo = linspace(-4, 4, 100)\nsincx = sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = [\n  \"x\" => x_theo, \n  \"y\" => sincx, \n  \"name\" => \"sinc(x)\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => x, \n  \"y\" => y, \n  \"name\" => \"measured\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"size\" => 8, \n    \"color\" => \"#85144B\"\n  ], \n  \"error_y\" => [\n    \"value\" => 0.1, \n    \"type\" => \"constant\", \n    \"color\" => \"#85144B\", \n    \"opacity\" => 1, \n    \"thickness\" => 1.5, \n    \"width\" => 3\n  ], \n  \"error_x\" => [\n    \"value\" => 0.2, \n    \"type\" => \"constant\", \n    \"color\" => \"#85144B\", \n    \"opacity\" => 1, \n    \"thickness\" => 1.5, \n    \"width\" => 3\n  ], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-error-bar-style\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx_theo = linspace(-4, 4, 100)\nsincx = sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = [\n  \"x\" =&gt; x_theo, \n  \"y\" =&gt; sincx, \n  \"name\" =&gt; \"sinc(x)\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; x, \n  \"y\" =&gt; y, \n  \"name\" =&gt; \"measured\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"size\" =&gt; 8, \n    \"color\" =&gt; \"#85144B\"\n  ], \n  \"error_y\" =&gt; [\n    \"value\" =&gt; 0.1, \n    \"type\" =&gt; \"constant\", \n    \"color\" =&gt; \"#85144B\", \n    \"opacity\" =&gt; 1, \n    \"thickness\" =&gt; 1.5, \n    \"width\" =&gt; 3\n  ], \n  \"error_x\" =&gt; [\n    \"value\" =&gt; 0.2, \n    \"type\" =&gt; \"constant\", \n    \"color\" =&gt; \"#85144B\", \n    \"opacity\" =&gt; 1, \n    \"thickness\" =&gt; 1.5, \n    \"width\" =&gt; 3\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-error-bar-style\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1039", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx_theo &lt;- seq(-4,4,length=100)\nsinc &lt;- function(x) {\n    y &lt;- sin(x) / x\n    y[x == 0] &lt;- 1\n    y\n}\nsincx &lt;- sinc(x_theo)\nx &lt;- c(-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56)\ny &lt;- c(-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15)\ntrace1 &lt;- list(\n  x = x_theo, \n  y = sincx, \n  name = \"sinc(x)\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = x, \n  y = y, \n  name = \"measured\", \n  mode = \"markers\", \n  marker = list(\n    size = 8, \n    color = \"#85144B\"\n  ), \n  error_y = list(\n    value = 0.1, \n    type = \"constant\", \n    color = \"#85144B\", \n    opacity = 1, \n    thickness = 1.5, \n    width = 3\n  ), \n  error_x = list(\n    value = 0.2, \n    type = \"constant\", \n    color = \"#85144B\", \n    opacity = 1, \n    thickness = 1.5, \n    width = 3\n  ), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-style\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx_theo = linspace(-4, 4, 100);\nsincx = sinc(x_theo);\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56];\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = struct(...\n  'x', x_theo, ...\n  'y', sincx, ...\n  'name', 'sinc(x)', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'measured', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', 8, ...\n    'color', '#85144B'), ...\n  'error_y', struct(...\n    'value', 0.1, ...\n    'type', 'constant', ...\n    'color', '#85144B', ...\n    'opacity', 1, ...\n    'thickness', 1.5, ...\n    'width', 3), ...\n  'error_x', struct(...\n    'value', 0.2, ...\n    'type', 'constant', ...\n    'color', '#85144B', ...\n    'opacity', 1, ...\n    'thickness', 1.5, ...\n    'width', 3), ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-style', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/error-bar-style", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar linspace = require('linspace')\n\nx_theo = linspace(-4, 4, 100)\nsincx = Math.sin(x_theo) / x_theo\nvar x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\nvar y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\nvar trace1 = {\n  x: x_theo, \n  y: sincx, \n  name: \"sinc(x)\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x, \n  y: y, \n  name: \"measured\", \n  mode: \"markers\", \n  marker: {\n    size: 8, \n    color: \"#85144B\"\n  }, \n  error_y: {\n    value: 0.1, \n    type: \"constant\", \n    color: \"#85144B\", \n    opacity: 1, \n    thickness: 1.5, \n    width: 3\n  }, \n  error_x: {\n    value: 0.2, \n    type: \"constant\", \n    color: \"#85144B\", \n    opacity: 1, \n    thickness: 1.5, \n    width: 3\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"error-bar-error-bar-style\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx_theo = linspace(-4, 4, 100);\nsincx = sinc(x_theo);\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56];\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = struct(...\n  'x', x_theo, ...\n  'y', sincx, ...\n  'name', 'sinc(x)', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'measured', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', 8, ...\n    'color', '#85144B'), ...\n  'error_y', struct(...\n    'value', 0.1, ...\n    'type', 'constant', ...\n    'color', '#85144B', ...\n    'opacity', 1, ...\n    'thickness', 1.5, ...\n    'width', 3), ...\n  'error_x', struct(...\n    'value', 0.2, ...\n    'type', 'constant', ...\n    'color', '#85144B', ...\n    'opacity', 1, ...\n    'thickness', 1.5, ...\n    'width', 3), ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-style', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx_theo <- seq(-4,4,length=100)\nsinc <- function(x) {\n    y <- sin(x) / x\n    y[x == 0] <- 1\n    y\n}\nsincx <- sinc(x_theo)\nx <- c(-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56)\ny <- c(-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15)\ntrace1 <- list(\n  x = x_theo, \n  y = sincx, \n  name = \"sinc(x)\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = x, \n  y = y, \n  name = \"measured\", \n  mode = \"markers\", \n  marker = list(\n    size = 8, \n    color = \"#85144B\"\n  ), \n  error_y = list(\n    value = 0.1, \n    type = \"constant\", \n    color = \"#85144B\", \n    opacity = 1, \n    thickness = 1.5, \n    width = 3\n  ), \n  error_x = list(\n    value = 0.2, \n    type = \"constant\", \n    color = \"#85144B\", \n    opacity = 1, \n    thickness = 1.5, \n    width = 3\n  ), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-style\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nx_theo = np.linspace(-4, 4, 100)\nsincx = np.sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\ntrace1 = Scatter(\n    x=x_theo,\n    y=sincx,\n    name='sinc(x)'\n)\ntrace2 = Scatter(\n    x=x,\n    y=y,\n    name='measured',\n    mode='markers',\n    marker=Marker(\n        size=8,\n        color='#85144B'\n    ),\n    error_y=ErrorY(\n        value=0.1,\n        type='constant',\n        color='#85144B',\n        opacity=1,\n        thickness=1.5,\n        width=3\n    ),\n    error_x=ErrorX(\n        value=0.2,\n        type='constant',\n        color='#85144B',\n        opacity=1,\n        thickness=1.5,\n        width=3\n    )\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-error-bar-style', auto_open=False)"
            }, 
            "error-bar-asymmetric-array": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/error-bar-asymmetric-array/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_y: {\n      array: [0.1, 0.2, 0.1, 0.1], \n      type: \"data\", \n      symmetric: false, \n      arrayminus: [0.2, 0.4, 1, 0.2]\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-asymmetric-array\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "error-bar-asymmetric-array", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=ErrorY(\n            array=[0.1, 0.2, 0.1, 0.1],\n            type='data',\n            symmetric=False,\n            arrayminus=[0.2, 0.4, 1, 0.2]\n        )\n    )\n])\n\nplot_url = py.plot(data, filename='error-bar-error-bar-asymmetric-array')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ndata = [\n  [\n    \"x\" => [1, 2, 3, 4], \n    \"y\" => [2, 1, 3, 4], \n    \"error_y\" => [\n      \"array\" => [0.1, 0.2, 0.1, 0.1], \n      \"type\" => \"data\", \n      \"symmetric\" => false, \n      \"arrayminus\" => [0.2, 0.4, 1, 0.2]\n    ], \n    \"type\" => \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"error-bar-error-bar-asymmetric-array\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ndata = [\n  [\n    \"x\" =&gt; [1, 2, 3, 4], \n    \"y\" =&gt; [2, 1, 3, 4], \n    \"error_y\" =&gt; [\n      \"array\" =&gt; [0.1, 0.2, 0.1, 0.1], \n      \"type\" =&gt; \"data\", \n      \"symmetric\" =&gt; false, \n      \"arrayminus\" =&gt; [0.2, 0.4, 1, 0.2]\n    ], \n    \"type\" =&gt; \"scatter\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"error-bar-error-bar-asymmetric-array\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1040", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ndata &lt;- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_y = list(\n      array = c(0.1, 0.2, 0.1, 0.1), \n      type = \"data\", \n      symmetric = FALSE, \n      arrayminus = c(0.2, 0.4, 1, 0.2)\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-asymmetric-array\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_y', struct(...\n      'array', [0.1, 0.2, 0.1, 0.1], ...\n      'type', 'data', ...\n      'symmetric', false, ...\n      'arrayminus', [0.2, 0.4, 1, 0.2]), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-asymmetric-array', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/error-bar-asymmetric-array", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar data = [\n  {\n    x: [1, 2, 3, 4], \n    y: [2, 1, 3, 4], \n    error_y: {\n      array: [0.1, 0.2, 0.1, 0.1], \n      type: \"data\", \n      symmetric: false, \n      arrayminus: [0.2, 0.4, 1, 0.2]\n    }, \n    type: \"scatter\"\n  }\n];\n\nvar graph_options = {filename: \"error-bar-error-bar-asymmetric-array\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ndata = {...\n  struct(...\n    'x', [1, 2, 3, 4], ...\n    'y', [2, 1, 3, 4], ...\n    'error_y', struct(...\n      'array', [0.1, 0.2, 0.1, 0.1], ...\n      'type', 'data', ...\n      'symmetric', false, ...\n      'arrayminus', [0.2, 0.4, 1, 0.2]), ...\n    'type', 'scatter')...\n};\n\nresponse = plotly(data, struct('filename', 'error-bar-error-bar-asymmetric-array', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ndata <- list(\n  list(\n    x = c(1, 2, 3, 4), \n    y = c(2, 1, 3, 4), \n    error_y = list(\n      array = c(0.1, 0.2, 0.1, 0.1), \n      type = \"data\", \n      symmetric = FALSE, \n      arrayminus = c(0.2, 0.4, 1, 0.2)\n    ), \n    type = \"scatter\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"error-bar-error-bar-asymmetric-array\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ndata = Data([\n    Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=ErrorY(\n            array=[0.1, 0.2, 0.1, 0.1],\n            type='data',\n            symmetric=False,\n            arrayminus=[0.2, 0.4, 1, 0.2]\n        )\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='error-bar-error-bar-asymmetric-array', auto_open=False)"
            }, 
            "error-bar-bar": {
              "files": {
                "model.json": "hard-coded/chart-types/error-bar/error-bar-bar/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  y: [3, 6, 4], \n  name: \"Control\", \n  error_y: {\n    array: [1, 0.5, 1.5], \n    type: \"data\", \n    visible: true\n  }, \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  y: [4, 7, 3], \n  name: \"Experimental\", \n  error_y: {\n    array: [0.5, 1, 2], \n    type: \"data\", \n    visible: true\n  }, \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"group\"};\n\nvar graph_options = {filename: \"error-bar-error-bar-bar\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "error-bar-bar", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[3, 6, 4],\n    name='Control',\n    error_y=ErrorY(\n        array=[1, 0.5, 1.5],\n        type='data',\n        visible=True\n    )\n)\ntrace2 = Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[4, 7, 3],\n    name='Experimental',\n    error_y=ErrorY(\n        array=[0.5, 1, 2],\n        type='data',\n        visible=True\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='error-bar-error-bar-bar')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  \"y\" => [3, 6, 4], \n  \"name\" => \"Control\", \n  \"error_y\" => [\n    \"array\" => [1, 0.5, 1.5], \n    \"type\" => \"data\", \n    \"visible\" => true\n  ], \n  \"type\" => \"bar\"\n]\ntrace2 = [\n  \"x\" => [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  \"y\" => [4, 7, 3], \n  \"name\" => \"Experimental\", \n  \"error_y\" => [\n    \"array\" => [0.5, 1, 2], \n    \"type\" => \"data\", \n    \"visible\" => true\n  ], \n  \"type\" => \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" => \"group\"]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"error-bar-error-bar-bar\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  \"y\" =&gt; [3, 6, 4], \n  \"name\" =&gt; \"Control\", \n  \"error_y\" =&gt; [\n    \"array\" =&gt; [1, 0.5, 1.5], \n    \"type\" =&gt; \"data\", \n    \"visible\" =&gt; true\n  ], \n  \"type\" =&gt; \"bar\"\n]\ntrace2 = [\n  \"x\" =&gt; [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  \"y\" =&gt; [4, 7, 3], \n  \"name\" =&gt; \"Experimental\", \n  \"error_y\" =&gt; [\n    \"array\" =&gt; [0.5, 1, 2], \n    \"type\" =&gt; \"data\", \n    \"visible\" =&gt; true\n  ], \n  \"type\" =&gt; \"bar\"\n]\ndata = [trace1, trace2]\nlayout = [\"barmode\" =&gt; \"group\"]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"error-bar-error-bar-bar\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1041", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(\"Trial 1\", \"Trial 2\", \"Trial 3\"), \n  y = c(3, 6, 4), \n  name = \"Control\", \n  error_y = list(\n    array = c(1, 0.5, 1.5), \n    type = \"data\", \n    visible = TRUE\n  ), \n  type = \"bar\"\n)\ntrace2 &lt;- list(\n  x = c(\"Trial 1\", \"Trial 2\", \"Trial 3\"), \n  y = c(4, 7, 3), \n  name = \"Experimental\", \n  error_y = list(\n    array = c(0.5, 1, 2), \n    type = \"data\", \n    visible = TRUE\n  ), \n  type = \"bar\"\n)\ndata &lt;- list(trace1, trace2)\nlayout &lt;- list(barmode = \"group\")\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"error-bar-error-bar-bar\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', { {'Trial 1', 'Trial 2', 'Trial 3'} }, ...\n  'y', [3, 6, 4], ...\n  'name', 'Control', ...\n  'error_y', struct(...\n    'array', [1, 0.5, 1.5], ...\n    'type', 'data', ...\n    'visible', true), ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'Trial 1', 'Trial 2', 'Trial 3'} }, ...\n  'y', [4, 7, 3], ...\n  'name', 'Experimental', ...\n  'error_y', struct(...\n    'array', [0.5, 1, 2], ...\n    'type', 'data', ...\n    'visible', true), ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'error-bar-error-bar-bar', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/error-bar/error-bar-bar", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  y: [3, 6, 4], \n  name: \"Control\", \n  error_y: {\n    array: [1, 0.5, 1.5], \n    type: \"data\", \n    visible: true\n  }, \n  type: \"bar\"\n};\nvar trace2 = {\n  x: [\"Trial 1\", \"Trial 2\", \"Trial 3\"], \n  y: [4, 7, 3], \n  name: \"Experimental\", \n  error_y: {\n    array: [0.5, 1, 2], \n    type: \"data\", \n    visible: true\n  }, \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"group\"};\n\nvar graph_options = {filename: \"error-bar-error-bar-bar\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', { {'Trial 1', 'Trial 2', 'Trial 3'} }, ...\n  'y', [3, 6, 4], ...\n  'name', 'Control', ...\n  'error_y', struct(...\n    'array', [1, 0.5, 1.5], ...\n    'type', 'data', ...\n    'visible', true), ...\n  'type', 'bar');\ntrace2 = struct(...\n  'x', { {'Trial 1', 'Trial 2', 'Trial 3'} }, ...\n  'y', [4, 7, 3], ...\n  'name', 'Experimental', ...\n  'error_y', struct(...\n    'array', [0.5, 1, 2], ...\n    'type', 'data', ...\n    'visible', true), ...\n  'type', 'bar');\ndata = {trace1, trace2};\nlayout = struct('barmode', 'group');\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'error-bar-error-bar-bar', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(\"Trial 1\", \"Trial 2\", \"Trial 3\"), \n  y = c(3, 6, 4), \n  name = \"Control\", \n  error_y = list(\n    array = c(1, 0.5, 1.5), \n    type = \"data\", \n    visible = TRUE\n  ), \n  type = \"bar\"\n)\ntrace2 <- list(\n  x = c(\"Trial 1\", \"Trial 2\", \"Trial 3\"), \n  y = c(4, 7, 3), \n  name = \"Experimental\", \n  error_y = list(\n    array = c(0.5, 1, 2), \n    type = \"data\", \n    visible = TRUE\n  ), \n  type = \"bar\"\n)\ndata <- list(trace1, trace2)\nlayout <- list(barmode = \"group\")\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"error-bar-error-bar-bar\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[3, 6, 4],\n    name='Control',\n    error_y=ErrorY(\n        array=[1, 0.5, 1.5],\n        type='data',\n        visible=True\n    )\n)\ntrace2 = Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[4, 7, 3],\n    name='Experimental',\n    error_y=ErrorY(\n        array=[0.5, 1, 2],\n        type='data',\n        visible=True\n    )\n)\ndata = Data([trace1, trace2])\nlayout = Layout(\n    barmode='group'\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='error-bar-error-bar-bar', auto_open=False)"
            }
          }, 
          "name": "error-bar", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "error-bar"
          }
        }, 
        "scatter": {
          "path": "hard-coded/chart-types/scatter", 
          "subsections": {
            "line-style": {
              "files": {
                "model.json": "hard-coded/chart-types/scatter/line-style/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [52698, 43117], \n  y: [53, 31], \n  text: [\"United States\", \"Canada\"], \n  name: \"North America\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(164, 194, 244)\"\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], \n  y: [33, 20, 13, 19, 27, 19, 49, 44, 38], \n  text: [\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"], \n  name: \"Europe\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(255, 217, 102)\"\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], \n  y: [23, 42, 54, 89, 14, 99, 93, 70], \n  text: [\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"], \n  name: \"Asia/Pacific\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(234, 153, 153)\"\n  }, \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [19097, 18601, 15595, 13546, 12026, 7434, 5419], \n  y: [43, 47, 56, 80, 86, 93, 80], \n  text: [\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"], \n  name: \"Latin America\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(142, 124, 195)\"\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  title: \"Quarter 1 Growth\", \n  xaxis: {\n    title: \"GDP per Capita\", \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis: {\n    title: \"Percent\", \n    showline: false\n  }\n};\n\nvar graph_options = {filename: \"scatter-line-style\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "line-style", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[52698, 43117],\n    y=[53, 31],\n    text=['United States', 'Canada'],\n    name='North America',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(164, 194, 244)'\n    )\n)\ntrace2 = Scatter(\n    x=[39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],\n    y=[33, 20, 13, 19, 27, 19, 49, 44, 38],\n    text=['Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'],\n    name='Europe',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(255, 217, 102)'\n    )\n)\ntrace3 = Scatter(\n    x=[42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],\n    y=[23, 42, 54, 89, 14, 99, 93, 70],\n    text=['Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'],\n    name='Asia/Pacific',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(234, 153, 153)'\n    )\n)\ntrace4 = Scatter(\n    x=[19097, 18601, 15595, 13546, 12026, 7434, 5419],\n    y=[43, 47, 56, 80, 86, 93, 80],\n    text=['Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'],\n    name='Latin America',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(142, 124, 195)'\n    )\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    title='Quarter 1 Growth',\n    xaxis=XAxis(\n        title='GDP per Capita',\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        title='Percent',\n        showline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='scatter-line-style')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [52698, 43117], \n  \"y\" => [53, 31], \n  \"text\" => [\"United States\", \"Canada\"], \n  \"name\" => \"North America\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"white\", \n      \"width\" => 0.5\n    ], \n    \"size\" => 12, \n    \"color\" => \"rgb(164, 194, 244)\"\n  ], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], \n  \"y\" => [33, 20, 13, 19, 27, 19, 49, 44, 38], \n  \"text\" => [\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"], \n  \"name\" => \"Europe\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"white\", \n      \"width\" => 0.5\n    ], \n    \"size\" => 12, \n    \"color\" => \"rgb(255, 217, 102)\"\n  ], \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], \n  \"y\" => [23, 42, 54, 89, 14, 99, 93, 70], \n  \"text\" => [\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"], \n  \"name\" => \"Asia/Pacific\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"white\", \n      \"width\" => 0.5\n    ], \n    \"size\" => 12, \n    \"color\" => \"rgb(234, 153, 153)\"\n  ], \n  \"type\" => \"scatter\"\n]\ntrace4 = [\n  \"x\" => [19097, 18601, 15595, 13546, 12026, 7434, 5419], \n  \"y\" => [43, 47, 56, 80, 86, 93, 80], \n  \"text\" => [\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"], \n  \"name\" => \"Latin America\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => \"white\", \n      \"width\" => 0.5\n    ], \n    \"size\" => 12, \n    \"color\" => \"rgb(142, 124, 195)\"\n  ], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"title\" => \"Quarter 1 Growth\", \n  \"xaxis\" => [\n    \"title\" => \"GDP per Capita\", \n    \"showgrid\" => false, \n    \"zeroline\" => false\n  ], \n  \"yaxis\" => [\n    \"title\" => \"Percent\", \n    \"showline\" => false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"scatter-line-style\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [52698, 43117], \n  \"y\" =&gt; [53, 31], \n  \"text\" =&gt; [\"United States\", \"Canada\"], \n  \"name\" =&gt; \"North America\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"white\", \n      \"width\" =&gt; 0.5\n    ], \n    \"size\" =&gt; 12, \n    \"color\" =&gt; \"rgb(164, 194, 244)\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], \n  \"y\" =&gt; [33, 20, 13, 19, 27, 19, 49, 44, 38], \n  \"text\" =&gt; [\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"], \n  \"name\" =&gt; \"Europe\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"white\", \n      \"width\" =&gt; 0.5\n    ], \n    \"size\" =&gt; 12, \n    \"color\" =&gt; \"rgb(255, 217, 102)\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], \n  \"y\" =&gt; [23, 42, 54, 89, 14, 99, 93, 70], \n  \"text\" =&gt; [\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"], \n  \"name\" =&gt; \"Asia/Pacific\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"white\", \n      \"width\" =&gt; 0.5\n    ], \n    \"size\" =&gt; 12, \n    \"color\" =&gt; \"rgb(234, 153, 153)\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace4 = [\n  \"x\" =&gt; [19097, 18601, 15595, 13546, 12026, 7434, 5419], \n  \"y\" =&gt; [43, 47, 56, 80, 86, 93, 80], \n  \"text\" =&gt; [\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"], \n  \"name\" =&gt; \"Latin America\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; \"white\", \n      \"width\" =&gt; 0.5\n    ], \n    \"size\" =&gt; 12, \n    \"color\" =&gt; \"rgb(142, 124, 195)\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"title\" =&gt; \"Quarter 1 Growth\", \n  \"xaxis\" =&gt; [\n    \"title\" =&gt; \"GDP per Capita\", \n    \"showgrid\" =&gt; false, \n    \"zeroline\" =&gt; false\n  ], \n  \"yaxis\" =&gt; [\n    \"title\" =&gt; \"Percent\", \n    \"showline\" =&gt; false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"scatter-line-style\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1042", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(52698, 43117), \n  y = c(53, 31), \n  text = c(\"United States\", \"Canada\"), \n  name = \"North America\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(164, 194, 244)\"\n  ), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007), \n  y = c(33, 20, 13, 19, 27, 19, 49, 44, 38), \n  text = c(\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"), \n  name = \"Europe\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(255, 217, 102)\"\n  ), \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899), \n  y = c(23, 42, 54, 89, 14, 99, 93, 70), \n  text = c(\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"), \n  name = \"Asia/Pacific\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(234, 153, 153)\"\n  ), \n  type = \"scatter\"\n)\ntrace4 &lt;- list(\n  x = c(19097, 18601, 15595, 13546, 12026, 7434, 5419), \n  y = c(43, 47, 56, 80, 86, 93, 80), \n  text = c(\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"), \n  name = \"Latin America\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(142, 124, 195)\"\n  ), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4)\nlayout &lt;- list(\n  title = \"Quarter 1 Growth\", \n  xaxis = list(\n    title = \"GDP per Capita\", \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    title = \"Percent\", \n    showline = FALSE\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"scatter-line-style\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [52698, 43117], ...\n  'y', [53, 31], ...\n  'text', { {'United States', 'Canada'} }, ...\n  'name', 'North America', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(164, 194, 244)'), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], ...\n  'y', [33, 20, 13, 19, 27, 19, 49, 44, 38], ...\n  'text', { {'Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'} }, ...\n  'name', 'Europe', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(255, 217, 102)'), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], ...\n  'y', [23, 42, 54, 89, 14, 99, 93, 70], ...\n  'text', { {'Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'} }, ...\n  'name', 'Asia/Pacific', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(234, 153, 153)'), ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [19097, 18601, 15595, 13546, 12026, 7434, 5419], ...\n  'y', [43, 47, 56, 80, 86, 93, 80], ...\n  'text', { {'Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'} }, ...\n  'name', 'Latin America', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(142, 124, 195)'), ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'title', 'Quarter 1 Growth', ...\n    'xaxis', struct(...\n      'title', 'GDP per Capita', ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'title', 'Percent', ...\n      'showline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'scatter-line-style', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/scatter/line-style", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [52698, 43117], \n  y: [53, 31], \n  text: [\"United States\", \"Canada\"], \n  name: \"North America\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(164, 194, 244)\"\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], \n  y: [33, 20, 13, 19, 27, 19, 49, 44, 38], \n  text: [\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"], \n  name: \"Europe\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(255, 217, 102)\"\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], \n  y: [23, 42, 54, 89, 14, 99, 93, 70], \n  text: [\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"], \n  name: \"Asia/Pacific\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(234, 153, 153)\"\n  }, \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [19097, 18601, 15595, 13546, 12026, 7434, 5419], \n  y: [43, 47, 56, 80, 86, 93, 80], \n  text: [\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"], \n  name: \"Latin America\", \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: \"white\", \n      width: 0.5\n    }, \n    size: 12, \n    color: \"rgb(142, 124, 195)\"\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  title: \"Quarter 1 Growth\", \n  xaxis: {\n    title: \"GDP per Capita\", \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis: {\n    title: \"Percent\", \n    showline: false\n  }\n};\n\nvar graph_options = {filename: \"scatter-line-style\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [52698, 43117], ...\n  'y', [53, 31], ...\n  'text', { {'United States', 'Canada'} }, ...\n  'name', 'North America', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(164, 194, 244)'), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007], ...\n  'y', [33, 20, 13, 19, 27, 19, 49, 44, 38], ...\n  'text', { {'Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'} }, ...\n  'name', 'Europe', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(255, 217, 102)'), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899], ...\n  'y', [23, 42, 54, 89, 14, 99, 93, 70], ...\n  'text', { {'Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'} }, ...\n  'name', 'Asia/Pacific', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(234, 153, 153)'), ...\n  'type', 'scatter');\ntrace4 = struct(...\n  'x', [19097, 18601, 15595, 13546, 12026, 7434, 5419], ...\n  'y', [43, 47, 56, 80, 86, 93, 80], ...\n  'text', { {'Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'} }, ...\n  'name', 'Latin America', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', 'white', ...\n      'width', 0.5), ...\n    'size', 12, ...\n    'color', 'rgb(142, 124, 195)'), ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'title', 'Quarter 1 Growth', ...\n    'xaxis', struct(...\n      'title', 'GDP per Capita', ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'title', 'Percent', ...\n      'showline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'scatter-line-style', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(52698, 43117), \n  y = c(53, 31), \n  text = c(\"United States\", \"Canada\"), \n  name = \"North America\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(164, 194, 244)\"\n  ), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007), \n  y = c(33, 20, 13, 19, 27, 19, 49, 44, 38), \n  text = c(\"Germany\", \"Britain\", \"France\", \"Spain\", \"Italy\", \"Czech Rep.\", \"Greece\", \"Poland\"), \n  name = \"Europe\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(255, 217, 102)\"\n  ), \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899), \n  y = c(23, 42, 54, 89, 14, 99, 93, 70), \n  text = c(\"Australia\", \"Japan\", \"South Korea\", \"Malaysia\", \"China\", \"Indonesia\", \"Philippines\", \"India\"), \n  name = \"Asia/Pacific\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(234, 153, 153)\"\n  ), \n  type = \"scatter\"\n)\ntrace4 <- list(\n  x = c(19097, 18601, 15595, 13546, 12026, 7434, 5419), \n  y = c(43, 47, 56, 80, 86, 93, 80), \n  text = c(\"Chile\", \"Argentina\", \"Mexico\", \"Venezuela\", \"Venezuela\", \"El Salvador\", \"Bolivia\"), \n  name = \"Latin America\", \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = \"white\", \n      width = 0.5\n    ), \n    size = 12, \n    color = \"rgb(142, 124, 195)\"\n  ), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3, trace4)\nlayout <- list(\n  title = \"Quarter 1 Growth\", \n  xaxis = list(\n    title = \"GDP per Capita\", \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    title = \"Percent\", \n    showline = FALSE\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"scatter-line-style\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[52698, 43117],\n    y=[53, 31],\n    text=['United States', 'Canada'],\n    name='North America',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(164, 194, 244)'\n    )\n)\ntrace2 = Scatter(\n    x=[39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],\n    y=[33, 20, 13, 19, 27, 19, 49, 44, 38],\n    text=['Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'],\n    name='Europe',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(255, 217, 102)'\n    )\n)\ntrace3 = Scatter(\n    x=[42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],\n    y=[23, 42, 54, 89, 14, 99, 93, 70],\n    text=['Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'],\n    name='Asia/Pacific',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(234, 153, 153)'\n    )\n)\ntrace4 = Scatter(\n    x=[19097, 18601, 15595, 13546, 12026, 7434, 5419],\n    y=[43, 47, 56, 80, 86, 93, 80],\n    text=['Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'],\n    name='Latin America',\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color='white',\n            width=0.5\n        ),\n        size=12,\n        color='rgb(142, 124, 195)'\n    )\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    title='Quarter 1 Growth',\n    xaxis=XAxis(\n        title='GDP per Capita',\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        title='Percent',\n        showline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='scatter-line-style', auto_open=False)"
            }, 
            "basic-line": {
              "files": {
                "model.json": "hard-coded/chart-types/scatter/basic-line/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 15, 13, 17], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [16, 5, 11, 9], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"scatter-basic-line\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "basic-line", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17]\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[16, 5, 11, 9]\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='scatter-basic-line')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [10, 15, 13, 17], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [16, 5, 11, 9], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"scatter-basic-line\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [10, 15, 13, 17], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [16, 5, 11, 9], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"scatter-basic-line\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/968", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 15, 13, 17), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(16, 5, 11, 9), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"scatter-basic-line\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 15, 13, 17], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [16, 5, 11, 9], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'scatter-basic-line', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/scatter/basic-line", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 15, 13, 17], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [16, 5, 11, 9], \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"scatter-basic-line\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 15, 13, 17], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [16, 5, 11, 9], ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'scatter-basic-line', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 15, 13, 17), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(16, 5, 11, 9), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"scatter-basic-line\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17]\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[16, 5, 11, 9]\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='scatter-basic-line', auto_open=False)"
            }, 
            "data-visible": {
              "files": {
                "model.json": "hard-coded/chart-types/scatter/data-visible/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3], \n  y: [0, 2, 4, 6], \n  visible: true, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3], \n  y: [8, 4, 2, 0], \n  visible: false, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"scatter-data-visible\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "data-visible", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3],\n    y=[0, 2, 4, 6],\n    visible=True\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3],\n    y=[8, 4, 2, 0],\n    visible=False\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='scatter-data-visible')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3], \n  \"y\" => [0, 2, 4, 6], \n  \"visible\" => true, \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3], \n  \"y\" => [8, 4, 2, 0], \n  \"visible\" => false, \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"scatter-data-visible\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3], \n  \"y\" =&gt; [0, 2, 4, 6], \n  \"visible\" =&gt; true, \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3], \n  \"y\" =&gt; [8, 4, 2, 0], \n  \"visible\" =&gt; false, \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"scatter-data-visible\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1043", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3), \n  y = c(0, 2, 4, 6), \n  visible = TRUE, \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3), \n  y = c(8, 4, 2, 0), \n  visible = FALSE, \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"scatter-data-visible\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3], ...\n  'y', [0, 2, 4, 6], ...\n  'visible', true, ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3], ...\n  'y', [8, 4, 2, 0], ...\n  'visible', false, ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'scatter-data-visible', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/scatter/data-visible", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3], \n  y: [0, 2, 4, 6], \n  visible: true, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3], \n  y: [8, 4, 2, 0], \n  visible: false, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"scatter-data-visible\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3], ...\n  'y', [0, 2, 4, 6], ...\n  'visible', true, ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3], ...\n  'y', [8, 4, 2, 0], ...\n  'visible', false, ...\n  'type', 'scatter');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'scatter-data-visible', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3), \n  y = c(0, 2, 4, 6), \n  visible = TRUE, \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3), \n  y = c(8, 4, 2, 0), \n  visible = FALSE, \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"scatter-data-visible\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3],\n    y=[0, 2, 4, 6],\n    visible=True\n)\ntrace2 = Scatter(\n    x=[0, 1, 2, 3],\n    y=[8, 4, 2, 0],\n    visible=False\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='scatter-data-visible', auto_open=False)"
            }, 
            "line-scatter": {
              "files": {
                "model.json": "hard-coded/chart-types/scatter/line-scatter/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 15, 13, 17], \n  mode: \"markers\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4, 5], \n  y: [16, 5, 11, 9], \n  mode: \"lines\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [1, 2, 3, 4], \n  y: [12, 9, 15, 12], \n  mode: \"lines+markers\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\n\nvar graph_options = {filename: \"scatter-line-scatter\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "line-scatter", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17],\n    mode='markers'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4, 5],\n    y=[16, 5, 11, 9],\n    mode='lines'\n)\ntrace3 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[12, 9, 15, 12],\n    mode='lines+markers'\n)\ndata = Data([trace1, trace2, trace3])\n\nplot_url = py.plot(data, filename='scatter-line-scatter')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [10, 15, 13, 17], \n  \"mode\" => \"markers\", \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [2, 3, 4, 5], \n  \"y\" => [16, 5, 11, 9], \n  \"mode\" => \"lines\", \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [12, 9, 15, 12], \n  \"mode\" => \"lines+markers\", \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3]\n\nresponse = Plotly.plot([data], [\"filename\" => \"scatter-line-scatter\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [10, 15, 13, 17], \n  \"mode\" =&gt; \"markers\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [2, 3, 4, 5], \n  \"y\" =&gt; [16, 5, 11, 9], \n  \"mode\" =&gt; \"lines\", \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [12, 9, 15, 12], \n  \"mode\" =&gt; \"lines+markers\", \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"scatter-line-scatter\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1044", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 15, 13, 17), \n  mode = \"markers\", \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(2, 3, 4, 5), \n  y = c(16, 5, 11, 9), \n  mode = \"lines\", \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(12, 9, 15, 12), \n  mode = \"lines+markers\", \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"scatter-line-scatter\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 15, 13, 17], ...\n  'mode', 'markers', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4, 5], ...\n  'y', [16, 5, 11, 9], ...\n  'mode', 'lines', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [12, 9, 15, 12], ...\n  'mode', 'lines+markers', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\n\nresponse = plotly(data, struct('filename', 'scatter-line-scatter', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/scatter/line-scatter", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 15, 13, 17], \n  mode: \"markers\", \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [2, 3, 4, 5], \n  y: [16, 5, 11, 9], \n  mode: \"lines\", \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [1, 2, 3, 4], \n  y: [12, 9, 15, 12], \n  mode: \"lines+markers\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\n\nvar graph_options = {filename: \"scatter-line-scatter\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 15, 13, 17], ...\n  'mode', 'markers', ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [2, 3, 4, 5], ...\n  'y', [16, 5, 11, 9], ...\n  'mode', 'lines', ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [12, 9, 15, 12], ...\n  'mode', 'lines+markers', ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\n\nresponse = plotly(data, struct('filename', 'scatter-line-scatter', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 15, 13, 17), \n  mode = \"markers\", \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(2, 3, 4, 5), \n  y = c(16, 5, 11, 9), \n  mode = \"lines\", \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(12, 9, 15, 12), \n  mode = \"lines+markers\", \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"scatter-line-scatter\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17],\n    mode='markers'\n)\ntrace2 = Scatter(\n    x=[2, 3, 4, 5],\n    y=[16, 5, 11, 9],\n    mode='lines'\n)\ntrace3 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[12, 9, 15, 12],\n    mode='lines+markers'\n)\ndata = Data([trace1, trace2, trace3])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='scatter-line-scatter', auto_open=False)"
            }
          }, 
          "name": "scatter", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "scatterz for the people", 
            "relative_url": "api"
          }
        }, 
        "mixed": {
          "path": "hard-coded/chart-types/mixed", 
          "subsections": {
            "bar-line": {
              "files": {
                "model.json": "hard-coded/chart-types/mixed/bar-line/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5], \n  y: [1.5, 1, 1.3, 0.7, 0.8, 0.9], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5], \n  y: [1, 0.5, 0.7, -1.2, 0.3, 0.4], \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"mixed-bar-line\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "bar-line", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n)\ntrace2 = Bar(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]\n)\ndata = Data([trace1, trace2])\n\nplot_url = py.plot(data, filename='mixed-bar-line')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [0, 1, 2, 3, 4, 5], \n  \"y\" => [1.5, 1, 1.3, 0.7, 0.8, 0.9], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [0, 1, 2, 3, 4, 5], \n  \"y\" => [1, 0.5, 0.7, -1.2, 0.3, 0.4], \n  \"type\" => \"bar\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" => \"mixed-bar-line\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5], \n  \"y\" =&gt; [1.5, 1, 1.3, 0.7, 0.8, 0.9], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [0, 1, 2, 3, 4, 5], \n  \"y\" =&gt; [1, 0.5, 0.7, -1.2, 0.3, 0.4], \n  \"type\" =&gt; \"bar\"\n]\ndata = [trace1, trace2]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"mixed-bar-line\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1045", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5), \n  y = c(1.5, 1, 1.3, 0.7, 0.8, 0.9), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(0, 1, 2, 3, 4, 5), \n  y = c(1, 0.5, 0.7, -1.2, 0.3, 0.4), \n  type = \"bar\"\n)\ndata &lt;- list(trace1, trace2)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"mixed-bar-line\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5], ...\n  'y', [1.5, 1, 1.3, 0.7, 0.8, 0.9], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5], ...\n  'y', [1, 0.5, 0.7, -1.2, 0.3, 0.4], ...\n  'type', 'bar');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'mixed-bar-line', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/mixed/bar-line", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [0, 1, 2, 3, 4, 5], \n  y: [1.5, 1, 1.3, 0.7, 0.8, 0.9], \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5], \n  y: [1, 0.5, 0.7, -1.2, 0.3, 0.4], \n  type: \"bar\"\n};\nvar data = [trace1, trace2];\n\nvar graph_options = {filename: \"mixed-bar-line\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [0, 1, 2, 3, 4, 5], ...\n  'y', [1.5, 1, 1.3, 0.7, 0.8, 0.9], ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [0, 1, 2, 3, 4, 5], ...\n  'y', [1, 0.5, 0.7, -1.2, 0.3, 0.4], ...\n  'type', 'bar');\ndata = {trace1, trace2};\n\nresponse = plotly(data, struct('filename', 'mixed-bar-line', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(0, 1, 2, 3, 4, 5), \n  y = c(1.5, 1, 1.3, 0.7, 0.8, 0.9), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(0, 1, 2, 3, 4, 5), \n  y = c(1, 0.5, 0.7, -1.2, 0.3, 0.4), \n  type = \"bar\"\n)\ndata <- list(trace1, trace2)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"mixed-bar-line\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n)\ntrace2 = Bar(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]\n)\ndata = Data([trace1, trace2])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='mixed-bar-line', auto_open=False)"
            }
          }, 
          "name": "mixed", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "mixed"
          }
        }, 
        "histogram2d": {
          "path": "hard-coded/chart-types/histogram2d", 
          "subsections": {
            "2d-histogram": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram2d/2d-histogram/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram2d/2d-histogram/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram2d/2d-histogram/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram2d/2d-histogram/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram2d/2d-histogram/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram2d/2d-histogram/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x = Math.random() * 50\nvar y = Math.random() * 50 + 1\nvar data = [\n  {\n    x: x, \n    y: y, \n    type: \"histogram2d\"\n  }\n];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "2d-histogram", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\ndata = Data([\n    Histogram2d(\n        x=x,\n        y=y\n    )\n])\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx = randn(500)\ny = randn(500)+1\ndata = [\n  [\n    \"x\" => x, \n    \"y\" => y, \n    \"type\" => \"histogram2d\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"histogram2d-2d-histogram\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx = randn(500)\ny = randn(500)+1\ndata = [\n  [\n    \"x\" =&gt; x, \n    \"y\" =&gt; y, \n    \"type\" =&gt; \"histogram2d\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"histogram2d-2d-histogram\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1046", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx &lt;- rnorm(500)\ny &lt;- rnorm(500)+1\ndata &lt;- list(\n  list(\n    x = x, \n    y = y, \n    type = \"histogram2d\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx = randn(500,1);\ny = randn(500,1)+1;\ndata = {...\n  struct(...\n    'x', x, ...\n    'y', y, ...\n    'type', 'histogram2d')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram2d/2d-histogram", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x = Math.random() * 50\nvar y = Math.random() * 50 + 1\nvar data = [\n  {\n    x: x, \n    y: y, \n    type: \"histogram2d\"\n  }\n];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx = randn(500,1);\ny = randn(500,1)+1;\ndata = {...\n  struct(...\n    'x', x, ...\n    'y', y, ...\n    'type', 'histogram2d')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx <- rnorm(500)\ny <- rnorm(500)+1\ndata <- list(\n  list(\n    x = x, \n    y = y, \n    type = \"histogram2d\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\ndata = Data([\n    Histogram2d(\n        x=x,\n        y=y\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram', auto_open=False)"
            }, 
            "2d-histogram-scatter": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram2d/2d-histogram-scatter/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x0 = (Math.random() * 100) / 5 + 0.5\nvar y0 = (Math.random() * 100) / 5 + 0.5\nvar x1 = Math.random() * 50\nvar y1 = Math.random() * 50 + 1.0\n\n\nvar x = [x0, x1]\nvar y = [y0, y1]\nvar trace1 = {\n  x: x0, \n  y: y0, \n  mode: \"markers\", \n  marker: {\n    symbol: \"circle\", \n    opacity: 0.7\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x1, \n  y: y1, \n  mode: \"markers\", \n  marker: {\n    symbol: \"square\", \n    opacity: 0.7\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: x, \n  y: y, \n  type: \"histogram2d\"\n};\nvar data = [trace1, trace2, trace3];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram-scatter\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "2d-histogram-scatter", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\n\nx0 = np.random.randn(100)/5. + 0.5  # 5. enforces float division\ny0 = np.random.randn(100)/5. + 0.5\nx1 = np.random.rand(50)\ny1 = np.random.rand(50) + 1.0\n\n\nx = np.concatenate([x0, x1])\ny = np.concatenate([y0, y1])\ntrace1 = Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    marker=Marker(\n        symbol='circle',\n        opacity=0.7\n    )\n)\ntrace2 = Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    marker=Marker(\n        symbol='square',\n        opacity=0.7\n    )\n)\ntrace3 = Histogram2d(\n    x=x,\n    y=y\n)\ndata = Data([trace1, trace2, trace3])\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram-scatter')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx0 = randn(100)/5. + 0.5\ny0 = randn(100)/5. + 0.5\nx1 = rand(50)\ny1 = rand(50) + 1.0\n\n\nx = [x0; x1]\ny = [y0; y1]\ntrace1 = [\n  \"x\" => x0, \n  \"y\" => y0, \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"symbol\" => \"circle\", \n    \"opacity\" => 0.7\n  ], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => x1, \n  \"y\" => y1, \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"symbol\" => \"square\", \n    \"opacity\" => 0.7\n  ], \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => x, \n  \"y\" => y, \n  \"type\" => \"histogram2d\"\n]\ndata = [trace1, trace2, trace3]\n\nresponse = Plotly.plot([data], [\"filename\" => \"histogram2d-2d-histogram-scatter\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx0 = randn(100)/5. + 0.5\ny0 = randn(100)/5. + 0.5\nx1 = rand(50)\ny1 = rand(50) + 1.0\n\n\nx = [x0; x1]\ny = [y0; y1]\ntrace1 = [\n  \"x\" =&gt; x0, \n  \"y\" =&gt; y0, \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"symbol\" =&gt; \"circle\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; x1, \n  \"y\" =&gt; y1, \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"symbol\" =&gt; \"square\", \n    \"opacity\" =&gt; 0.7\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; x, \n  \"y\" =&gt; y, \n  \"type\" =&gt; \"histogram2d\"\n]\ndata = [trace1, trace2, trace3]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"histogram2d-2d-histogram-scatter\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1047", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 &lt;- rnorm(100)/5. + 0.5\ny0 &lt;- rnorm(100)/5. + 0.5\nx1 &lt;- runif(50)\ny1 &lt;- runif(50) + 1.0\n\n\nx &lt;- c(x0, x1)\ny &lt;- c(y0, y1)\ntrace1 &lt;- list(\n  x = x0, \n  y = y0, \n  mode = \"markers\", \n  marker = list(\n    symbol = \"circle\", \n    opacity = 0.7\n  ), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = x1, \n  y = y1, \n  mode = \"markers\", \n  marker = list(\n    symbol = \"square\", \n    opacity = 0.7\n  ), \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = x, \n  y = y, \n  type = \"histogram2d\"\n)\ndata &lt;- list(trace1, trace2, trace3)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram-scatter\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx0 = randn(100,1)./5. + 0.5;\ny0 = randn(100,1)./5. + 0.5;\nx1 = rand(50,1);\ny1 = rand(50,1) + 1.0;\n\n\nx = [x0; x1];\ny = [y0; y1];\ntrace1 = struct(...\n  'x', x0, ...\n  'y', y0, ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', 'circle', ...\n    'opacity', 0.7), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x1, ...\n  'y', y1, ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', 'square', ...\n    'opacity', 0.7), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'type', 'histogram2d');\ndata = {trace1, trace2, trace3};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram-scatter', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram2d/2d-histogram-scatter", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x0 = (Math.random() * 100) / 5 + 0.5\nvar y0 = (Math.random() * 100) / 5 + 0.5\nvar x1 = Math.random() * 50\nvar y1 = Math.random() * 50 + 1.0\n\n\nvar x = [x0, x1]\nvar y = [y0, y1]\nvar trace1 = {\n  x: x0, \n  y: y0, \n  mode: \"markers\", \n  marker: {\n    symbol: \"circle\", \n    opacity: 0.7\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x1, \n  y: y1, \n  mode: \"markers\", \n  marker: {\n    symbol: \"square\", \n    opacity: 0.7\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: x, \n  y: y, \n  type: \"histogram2d\"\n};\nvar data = [trace1, trace2, trace3];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram-scatter\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx0 = randn(100,1)./5. + 0.5;\ny0 = randn(100,1)./5. + 0.5;\nx1 = rand(50,1);\ny1 = rand(50,1) + 1.0;\n\n\nx = [x0; x1];\ny = [y0; y1];\ntrace1 = struct(...\n  'x', x0, ...\n  'y', y0, ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', 'circle', ...\n    'opacity', 0.7), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x1, ...\n  'y', y1, ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', 'square', ...\n    'opacity', 0.7), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'type', 'histogram2d');\ndata = {trace1, trace2, trace3};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram-scatter', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx0 <- rnorm(100)/5. + 0.5\ny0 <- rnorm(100)/5. + 0.5\nx1 <- runif(50)\ny1 <- runif(50) + 1.0\n\n\nx <- c(x0, x1)\ny <- c(y0, y1)\ntrace1 <- list(\n  x = x0, \n  y = y0, \n  mode = \"markers\", \n  marker = list(\n    symbol = \"circle\", \n    opacity = 0.7\n  ), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = x1, \n  y = y1, \n  mode = \"markers\", \n  marker = list(\n    symbol = \"square\", \n    opacity = 0.7\n  ), \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = x, \n  y = y, \n  type = \"histogram2d\"\n)\ndata <- list(trace1, trace2, trace3)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram-scatter\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\n\nx0 = np.random.randn(100)/5. + 0.5  # 5. enforces float division\ny0 = np.random.randn(100)/5. + 0.5\nx1 = np.random.rand(50)\ny1 = np.random.rand(50) + 1.0\n\n\nx = np.concatenate([x0, x1])\ny = np.concatenate([y0, y1])\ntrace1 = Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    marker=Marker(\n        symbol='circle',\n        opacity=0.7\n    )\n)\ntrace2 = Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    marker=Marker(\n        symbol='square',\n        opacity=0.7\n    )\n)\ntrace3 = Histogram2d(\n    x=x,\n    y=y\n)\ndata = Data([trace1, trace2, trace3])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram-scatter', auto_open=False)"
            }, 
            "2d-histogram-options": {
              "files": {
                "prepend.js": "hard-coded/chart-types/histogram2d/2d-histogram-options/prepend.js", 
                "prepend.py": "hard-coded/chart-types/histogram2d/2d-histogram-options/prepend.py", 
                "prepend.m": "hard-coded/chart-types/histogram2d/2d-histogram-options/prepend.m", 
                "model.json": "hard-coded/chart-types/histogram2d/2d-histogram-options/model.json", 
                "prepend.r": "hard-coded/chart-types/histogram2d/2d-histogram-options/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/histogram2d/2d-histogram-options/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar x = Math.random() * 50\nvar y = Math.random() * 50 + 1\nvar data = [\n  {\n    x: x, \n    y: y, \n    scl: [[\"0\", \"rgb(12,51,131)\"], [\"0.25\", \"rgb(10,136,186)\"], [\"0.5\", \"rgb(242,211,56)\"], [\"0.75\", \"rgb(242,143,56)\"], [\"1\", \"rgb(217,30,30)\"]], \n    autobinx: false, \n    autobiny: false, \n    xbins: {\n      start: -3, \n      end: 3, \n      size: 0.1\n    }, \n    ybins: {\n      start: -2.5, \n      end: 4, \n      size: 0.1\n    }, \n    histnorm: \"probability\", \n    type: \"histogram2d\"\n  }\n];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram-options\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "2d-histogram-options", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\ndata = Data([\n    Histogram2d(\n        x=x,\n        y=y,\n        scl=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']],\n        autobinx=False,\n        autobiny=False,\n        xbins=XBins(\n            start=-3,\n            end=3,\n            size=0.1\n        ),\n        ybins=YBins(\n            start=-2.5,\n            end=4,\n            size=0.1\n        ),\n        histnorm='probability'\n    )\n])\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram-options')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nx = randn(500)\ny = randn(500)+1\ndata = [\n  [\n    \"x\" => x, \n    \"y\" => y, \n    \"scl\" => {[0, \"rgb(12,51,131)\"],[0.25, \"rgb(10,136,186)\"],[0.5, \"rgb(242,211,56)\"],[0.75, \"rgb(242,143,56)\"],[1, \"rgb(217,30,30)\"]}, \n    \"autobinx\" => false, \n    \"autobiny\" => false, \n    \"xbins\" => [\n      \"start\" => -3, \n      \"end\" => 3, \n      \"size\" => 0.1\n    ], \n    \"ybins\" => [\n      \"start\" => -2.5, \n      \"end\" => 4, \n      \"size\" => 0.1\n    ], \n    \"histnorm\" => \"probability\", \n    \"type\" => \"histogram2d\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"histogram2d-2d-histogram-options\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nx = randn(500)\ny = randn(500)+1\ndata = [\n  [\n    \"x\" =&gt; x, \n    \"y\" =&gt; y, \n    \"scl\" =&gt; {[0, \"rgb(12,51,131)\"],[0.25, \"rgb(10,136,186)\"],[0.5, \"rgb(242,211,56)\"],[0.75, \"rgb(242,143,56)\"],[1, \"rgb(217,30,30)\"]}, \n    \"autobinx\" =&gt; false, \n    \"autobiny\" =&gt; false, \n    \"xbins\" =&gt; [\n      \"start\" =&gt; -3, \n      \"end\" =&gt; 3, \n      \"size\" =&gt; 0.1\n    ], \n    \"ybins\" =&gt; [\n      \"start\" =&gt; -2.5, \n      \"end\" =&gt; 4, \n      \"size\" =&gt; 0.1\n    ], \n    \"histnorm\" =&gt; \"probability\", \n    \"type\" =&gt; \"histogram2d\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"histogram2d-2d-histogram-options\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1048", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nx &lt;- rnorm(500)\ny &lt;- rnorm(500)+1\ndata &lt;- list(\n  list(\n    x = x, \n    y = y, \n    scl = list(c(0, \"rgb(12,51,131)\"),list(0.25, \"rgb(10,136,186)\"),list(0.5, \"rgb(242,211,56)\"),list(0.75, \"rgb(242,143,56)\"),list(1, \"rgb(217,30,30)\")), \n    autobinx = FALSE, \n    autobiny = FALSE, \n    xbins = list(\n      start = -3, \n      end = 3, \n      size = 0.1\n    ), \n    ybins = list(\n      start = -2.5, \n      end = 4, \n      size = 0.1\n    ), \n    histnorm = \"probability\", \n    type = \"histogram2d\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram-options\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nx = randn(500,1);\ny = randn(500,1)+1;\ndata = {...\n  struct(...\n    'x', x, ...\n    'y', y, ...\n    'scl', { { {0, 'rgb(12,51,131)'},{0.25, 'rgb(10,136,186)'},{0.5, 'rgb(242,211,56)'},{0.75, 'rgb(242,143,56)'},{1, 'rgb(217,30,30)'} } }, ...\n    'autobinx', false, ...\n    'autobiny', false, ...\n    'xbins', struct(...\n      'start', -3, ...\n      'end', 3, ...\n      'size', 0.1), ...\n    'ybins', struct(...\n      'start', -2.5, ...\n      'end', 4, ...\n      'size', 0.1), ...\n    'histnorm', 'probability', ...\n    'type', 'histogram2d')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram-options', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/histogram2d/2d-histogram-options", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar x = Math.random() * 50\nvar y = Math.random() * 50 + 1\nvar data = [\n  {\n    x: x, \n    y: y, \n    scl: [[\"0\", \"rgb(12,51,131)\"], [\"0.25\", \"rgb(10,136,186)\"], [\"0.5\", \"rgb(242,211,56)\"], [\"0.75\", \"rgb(242,143,56)\"], [\"1\", \"rgb(217,30,30)\"]], \n    autobinx: false, \n    autobiny: false, \n    xbins: {\n      start: -3, \n      end: 3, \n      size: 0.1\n    }, \n    ybins: {\n      start: -2.5, \n      end: 4, \n      size: 0.1\n    }, \n    histnorm: \"probability\", \n    type: \"histogram2d\"\n  }\n];\n\nvar graph_options = {filename: \"histogram2d-2d-histogram-options\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nx = randn(500,1);\ny = randn(500,1)+1;\ndata = {...\n  struct(...\n    'x', x, ...\n    'y', y, ...\n    'scl', { { {0, 'rgb(12,51,131)'},{0.25, 'rgb(10,136,186)'},{0.5, 'rgb(242,211,56)'},{0.75, 'rgb(242,143,56)'},{1, 'rgb(217,30,30)'} } }, ...\n    'autobinx', false, ...\n    'autobiny', false, ...\n    'xbins', struct(...\n      'start', -3, ...\n      'end', 3, ...\n      'size', 0.1), ...\n    'ybins', struct(...\n      'start', -2.5, ...\n      'end', 4, ...\n      'size', 0.1), ...\n    'histnorm', 'probability', ...\n    'type', 'histogram2d')...\n};\n\nresponse = plotly(data, struct('filename', 'histogram2d-2d-histogram-options', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nx <- rnorm(500)\ny <- rnorm(500)+1\ndata <- list(\n  list(\n    x = x, \n    y = y, \n    scl = list(c(0, \"rgb(12,51,131)\"),list(0.25, \"rgb(10,136,186)\"),list(0.5, \"rgb(242,211,56)\"),list(0.75, \"rgb(242,143,56)\"),list(1, \"rgb(217,30,30)\")), \n    autobinx = FALSE, \n    autobiny = FALSE, \n    xbins = list(\n      start = -3, \n      end = 3, \n      size = 0.1\n    ), \n    ybins = list(\n      start = -2.5, \n      end = 4, \n      size = 0.1\n    ), \n    histnorm = \"probability\", \n    type = \"histogram2d\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"histogram2d-2d-histogram-options\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\ndata = Data([\n    Histogram2d(\n        x=x,\n        y=y,\n        scl=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']],\n        autobinx=False,\n        autobiny=False,\n        xbins=XBins(\n            start=-3,\n            end=3,\n            size=0.1\n        ),\n        ybins=YBins(\n            start=-2.5,\n            end=4,\n            size=0.1\n        ),\n        histnorm='probability'\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='histogram2d-2d-histogram-options', auto_open=False)"
            }
          }, 
          "name": "histogram2d", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "histogram2d"
          }
        }, 
        "bubble": {
          "path": "hard-coded/chart-types/bubble", 
          "subsections": {
            "bubblechart": {
              "files": {
                "model.json": "hard-coded/chart-types/bubble/bubblechart/model.json"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 11, 12, 13], \n  mode: \"markers\", \n  marker: {\n    size: [12, 22, 32, 42], \n    color: [\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"], \n    opacity: [0.6, 0.7, 0.8, 0.9]\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [11, 12, 13, 14], \n  mode: \"markers\", \n  marker: {\n    symbol: [\"circle\", \"square\", \"diamond\", \"cross\"], \n    size: 18, \n    color: \"rgb(31, 119, 180)\"\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [1, 2, 3, 4], \n  y: [12, 13, 14, 15], \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: [\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"], \n      width: [2, 2, 6, 2]\n    }, \n    size: 18\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"bubble-bubblechart\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "bubblechart", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=Marker(\n        size=[12, 22, 32, 42],\n        color=['hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'],\n        opacity=[0.6, 0.7, 0.8, 0.9]\n    )\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[11, 12, 13, 14],\n    mode='markers',\n    marker=Marker(\n        symbol=['circle', 'square', 'diamond', 'cross'],\n        size=18,\n        color='rgb(31, 119, 180)'\n    )\n)\ntrace3 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[12, 13, 14, 15],\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color=['rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'],\n            width=[2, 2, 6, 2]\n        ),\n        size=18\n    )\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='bubble-bubblechart')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\ntrace1 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [10, 11, 12, 13], \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"size\" => [12, 22, 32, 42], \n    \"color\" => [\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"], \n    \"opacity\" => [0.6, 0.7, 0.8, 0.9]\n  ], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [11, 12, 13, 14], \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"symbol\" => [\"circle\", \"square\", \"diamond\", \"cross\"], \n    \"size\" => 18, \n    \"color\" => \"rgb(31, 119, 180)\"\n  ], \n  \"type\" => \"scatter\"\n]\ntrace3 = [\n  \"x\" => [1, 2, 3, 4], \n  \"y\" => [12, 13, 14, 15], \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"line\" => [\n      \"color\" => [\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"], \n      \"width\" => [2, 2, 6, 2]\n    ], \n    \"size\" => 18\n  ], \n  \"type\" => \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\"showlegend\" => false]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"bubble-bubblechart\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\ntrace1 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [10, 11, 12, 13], \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"size\" =&gt; [12, 22, 32, 42], \n    \"color\" =&gt; [\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"], \n    \"opacity\" =&gt; [0.6, 0.7, 0.8, 0.9]\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [11, 12, 13, 14], \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"symbol\" =&gt; [\"circle\", \"square\", \"diamond\", \"cross\"], \n    \"size\" =&gt; 18, \n    \"color\" =&gt; \"rgb(31, 119, 180)\"\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace3 = [\n  \"x\" =&gt; [1, 2, 3, 4], \n  \"y\" =&gt; [12, 13, 14, 15], \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"line\" =&gt; [\n      \"color\" =&gt; [\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"], \n      \"width\" =&gt; [2, 2, 6, 2]\n    ], \n    \"size\" =&gt; 18\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ndata = [trace1, trace2, trace3]\nlayout = [\"showlegend\" =&gt; false]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"bubble-bubblechart\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1049", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 11, 12, 13), \n  mode = \"markers\", \n  marker = list(\n    size = c(12, 22, 32, 42), \n    color = c(\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"), \n    opacity = c(0.6, 0.7, 0.8, 0.9)\n  ), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(11, 12, 13, 14), \n  mode = \"markers\", \n  marker = list(\n    symbol = c(\"circle\", \"square\", \"diamond\", \"cross\"), \n    size = 18, \n    color = \"rgb(31, 119, 180)\"\n  ), \n  type = \"scatter\"\n)\ntrace3 &lt;- list(\n  x = c(1, 2, 3, 4), \n  y = c(12, 13, 14, 15), \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = c(\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"), \n      width = c(2, 2, 6, 2)\n    ), \n    size = 18\n  ), \n  type = \"scatter\"\n)\ndata &lt;- list(trace1, trace2, trace3)\nlayout &lt;- list(showlegend = FALSE)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"bubble-bubblechart\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 11, 12, 13], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', [12, 22, 32, 42], ...\n    'color', { {'hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'} }, ...\n    'opacity', [0.6, 0.7, 0.8, 0.9]), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [11, 12, 13, 14], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', { {'circle', 'square', 'diamond', 'cross'} }, ...\n    'size', 18, ...\n    'color', 'rgb(31, 119, 180)'), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [12, 13, 14, 15], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', { {'rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'} }, ...\n      'width', [2, 2, 6, 2]), ...\n    'size', 18), ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bubble-bubblechart', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/bubble/bubblechart", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 11, 12, 13], \n  mode: \"markers\", \n  marker: {\n    size: [12, 22, 32, 42], \n    color: [\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"], \n    opacity: [0.6, 0.7, 0.8, 0.9]\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4], \n  y: [11, 12, 13, 14], \n  mode: \"markers\", \n  marker: {\n    symbol: [\"circle\", \"square\", \"diamond\", \"cross\"], \n    size: 18, \n    color: \"rgb(31, 119, 180)\"\n  }, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [1, 2, 3, 4], \n  y: [12, 13, 14, 15], \n  mode: \"markers\", \n  marker: {\n    line: {\n      color: [\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"], \n      width: [2, 2, 6, 2]\n    }, \n    size: 18\n  }, \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {showlegend: false};\n\nvar graph_options = {filename: \"bubble-bubblechart\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\ntrace1 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [10, 11, 12, 13], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', [12, 22, 32, 42], ...\n    'color', { {'hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'} }, ...\n    'opacity', [0.6, 0.7, 0.8, 0.9]), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [11, 12, 13, 14], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'symbol', { {'circle', 'square', 'diamond', 'cross'} }, ...\n    'size', 18, ...\n    'color', 'rgb(31, 119, 180)'), ...\n  'type', 'scatter');\ntrace3 = struct(...\n  'x', [1, 2, 3, 4], ...\n  'y', [12, 13, 14, 15], ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'line', struct(...\n      'color', { {'rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'} }, ...\n      'width', [2, 2, 6, 2]), ...\n    'size', 18), ...\n  'type', 'scatter');\ndata = {trace1, trace2, trace3};\nlayout = struct('showlegend', false);\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'bubble-bubblechart', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people"
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\ntrace1 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(10, 11, 12, 13), \n  mode = \"markers\", \n  marker = list(\n    size = c(12, 22, 32, 42), \n    color = c(\"hsl(0,100,40)\", \"hsl(33,100,40)\", \"hsl(66,100,40)\", \"hsl(99,100,40)\"), \n    opacity = c(0.6, 0.7, 0.8, 0.9)\n  ), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(11, 12, 13, 14), \n  mode = \"markers\", \n  marker = list(\n    symbol = c(\"circle\", \"square\", \"diamond\", \"cross\"), \n    size = 18, \n    color = \"rgb(31, 119, 180)\"\n  ), \n  type = \"scatter\"\n)\ntrace3 <- list(\n  x = c(1, 2, 3, 4), \n  y = c(12, 13, 14, 15), \n  mode = \"markers\", \n  marker = list(\n    line = list(\n      color = c(\"rgb(120,120,120)\", \"rgb(120,120,120)\", \"red\", \"rgb(120,120,120)\"), \n      width = c(2, 2, 6, 2)\n    ), \n    size = 18\n  ), \n  type = \"scatter\"\n)\ndata <- list(trace1, trace2, trace3)\nlayout <- list(showlegend = FALSE)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"bubble-bubblechart\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\ntrace1 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=Marker(\n        size=[12, 22, 32, 42],\n        color=['hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'],\n        opacity=[0.6, 0.7, 0.8, 0.9]\n    )\n)\ntrace2 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[11, 12, 13, 14],\n    mode='markers',\n    marker=Marker(\n        symbol=['circle', 'square', 'diamond', 'cross'],\n        size=18,\n        color='rgb(31, 119, 180)'\n    )\n)\ntrace3 = Scatter(\n    x=[1, 2, 3, 4],\n    y=[12, 13, 14, 15],\n    mode='markers',\n    marker=Marker(\n        line=Line(\n            color=['rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'],\n            width=[2, 2, 6, 2]\n        ),\n        size=18\n    )\n)\ndata = Data([trace1, trace2, trace3])\nlayout = Layout(\n    showlegend=False\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='bubble-bubblechart', auto_open=False)"
            }
          }, 
          "name": "bubble", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "bubble"
          }
        }, 
        "contour": {
          "path": "hard-coded/chart-types/contour", 
          "subsections": {
            "contour-subplots": {
              "files": {
                "prepend.js": "hard-coded/chart-types/contour/contour-subplots/prepend.js", 
                "prepend.py": "hard-coded/chart-types/contour/contour-subplots/prepend.py", 
                "prepend.m": "hard-coded/chart-types/contour/contour-subplots/prepend.m", 
                "model.json": "hard-coded/chart-types/contour/contour-subplots/model.json", 
                "prepend.r": "hard-coded/chart-types/contour/contour-subplots/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/contour/contour-subplots/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar linspace = require('linspace');\n\nvar t = linspace(-1,1.2,2000);\nvar x = (Math.pow(t, 3)) + (0.3 * (Math.random() * 2000));\nvar y = (Math.pow(t, 6)) + (0.3 * (Math.random() * 2000));\nvar trace1 = {\n  x: x, \n  y: y, \n  name: \"points\", \n  mode: \"markers\", \n  marker: {\n    size: 2, \n    color: \"rgb(102,0,0)\", \n    opacity: 0.4\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x, \n  y: y, \n  name: \"density\", \n  ncontours: 20, \n  scl: \"Hot\", \n  reversescl: true, \n  showscale: false, \n  type: \"histogram2dcontour\"\n};\nvar trace3 = {\n  x: x, \n  name: \"x density\", \n  marker: {color: \"rgb(102,0,0)\"}, \n  yaxis: \"y2\", \n  type: \"histogram\"\n};\nvar trace4 = {\n  y: y, \n  name: \"y density\", \n  marker: {color: \"rgb(102,0,0)\"}, \n  xaxis: \"x2\", \n  type: \"histogram\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {\n    domain: [0, 0.85], \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis: {\n    domain: [0, 0.85], \n    showgrid: false, \n    zeroline: false\n  }, \n  width: 600, \n  height: 550, \n  autosize: false, \n  margin: {t: 50}, \n  hovermode: \"closest\", \n  bargap: 0, \n  showlegend: false, \n  xaxis2: {\n    domain: [0.85, 1], \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis2: {\n    domain: [0.85, 1], \n    showgrid: false, \n    zeroline: false\n  }\n};\n\nvar graph_options = {filename: \"contour-contour-subplots\", fileopt: \"overwrite\", layout: layout}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "contour-subplots", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nt = np.linspace(-1,1.2,2000)\nx = (t**3)+(0.3*np.random.randn(2000))\ny = (t**6)+(0.3*np.random.randn(2000))\ntrace1 = Scatter(\n    x=x,\n    y=y,\n    name='points',\n    mode='markers',\n    marker=Marker(\n        size=2,\n        color='rgb(102,0,0)',\n        opacity=0.4\n    )\n)\ntrace2 = Histogram2dContour(\n    x=x,\n    y=y,\n    name='density',\n    ncontours=20,\n    scl='Hot',\n    reversescl=True,\n    showscale=False\n)\ntrace3 = Histogram(\n    x=x,\n    name='x density',\n    marker=Marker(\n        color='rgb(102,0,0)'\n    ),\n    yaxis='y2'\n)\ntrace4 = Histogram(\n    y=y,\n    name='y density',\n    marker=Marker(\n        color='rgb(102,0,0)'\n    ),\n    xaxis='x2'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    width=600,\n    height=550,\n    autosize=False,\n    margin=Margin(\n        t=50\n    ),\n    hovermode='closest',\n    bargap=0,\n    showlegend=False,\n    xaxis2=XAxis(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis2=YAxis(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nplot_url = py.plot(fig, filename='contour-contour-subplots')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nt = linspace(-1, 1.2, 2000)\nx = t.^3+0.3*randn(2000)\ny = t.^6+0.3*randn(2000)\ntrace1 = [\n  \"x\" => x, \n  \"y\" => y, \n  \"name\" => \"points\", \n  \"mode\" => \"markers\", \n  \"marker\" => [\n    \"size\" => 2, \n    \"color\" => \"rgb(102,0,0)\", \n    \"opacity\" => 0.4\n  ], \n  \"type\" => \"scatter\"\n]\ntrace2 = [\n  \"x\" => x, \n  \"y\" => y, \n  \"name\" => \"density\", \n  \"ncontours\" => 20, \n  \"scl\" => \"Hot\", \n  \"reversescl\" => true, \n  \"showscale\" => false, \n  \"type\" => \"histogram2dcontour\"\n]\ntrace3 = [\n  \"x\" => x, \n  \"name\" => \"x density\", \n  \"marker\" => [\"color\" => \"rgb(102,0,0)\"], \n  \"yaxis\" => \"y2\", \n  \"type\" => \"histogram\"\n]\ntrace4 = [\n  \"y\" => y, \n  \"name\" => \"y density\", \n  \"marker\" => [\"color\" => \"rgb(102,0,0)\"], \n  \"xaxis\" => \"x2\", \n  \"type\" => \"histogram\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" => [\n    \"domain\" => [0, 0.85], \n    \"showgrid\" => false, \n    \"zeroline\" => false\n  ], \n  \"yaxis\" => [\n    \"domain\" => [0, 0.85], \n    \"showgrid\" => false, \n    \"zeroline\" => false\n  ], \n  \"width\" => 600, \n  \"height\" => 550, \n  \"autosize\" => false, \n  \"margin\" => [\"t\" => 50], \n  \"hovermode\" => \"closest\", \n  \"bargap\" => 0, \n  \"showlegend\" => false, \n  \"xaxis2\" => [\n    \"domain\" => [0.85, 1], \n    \"showgrid\" => false, \n    \"zeroline\" => false\n  ], \n  \"yaxis2\" => [\n    \"domain\" => [0.85, 1], \n    \"showgrid\" => false, \n    \"zeroline\" => false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" => layout, \"filename\" => \"contour-contour-subplots\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nt = linspace(-1, 1.2, 2000)\nx = t.^3+0.3*randn(2000)\ny = t.^6+0.3*randn(2000)\ntrace1 = [\n  \"x\" =&gt; x, \n  \"y\" =&gt; y, \n  \"name\" =&gt; \"points\", \n  \"mode\" =&gt; \"markers\", \n  \"marker\" =&gt; [\n    \"size\" =&gt; 2, \n    \"color\" =&gt; \"rgb(102,0,0)\", \n    \"opacity\" =&gt; 0.4\n  ], \n  \"type\" =&gt; \"scatter\"\n]\ntrace2 = [\n  \"x\" =&gt; x, \n  \"y\" =&gt; y, \n  \"name\" =&gt; \"density\", \n  \"ncontours\" =&gt; 20, \n  \"scl\" =&gt; \"Hot\", \n  \"reversescl\" =&gt; true, \n  \"showscale\" =&gt; false, \n  \"type\" =&gt; \"histogram2dcontour\"\n]\ntrace3 = [\n  \"x\" =&gt; x, \n  \"name\" =&gt; \"x density\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(102,0,0)\"], \n  \"yaxis\" =&gt; \"y2\", \n  \"type\" =&gt; \"histogram\"\n]\ntrace4 = [\n  \"y\" =&gt; y, \n  \"name\" =&gt; \"y density\", \n  \"marker\" =&gt; [\"color\" =&gt; \"rgb(102,0,0)\"], \n  \"xaxis\" =&gt; \"x2\", \n  \"type\" =&gt; \"histogram\"\n]\ndata = [trace1, trace2, trace3, trace4]\nlayout = [\n  \"xaxis\" =&gt; [\n    \"domain\" =&gt; [0, 0.85], \n    \"showgrid\" =&gt; false, \n    \"zeroline\" =&gt; false\n  ], \n  \"yaxis\" =&gt; [\n    \"domain\" =&gt; [0, 0.85], \n    \"showgrid\" =&gt; false, \n    \"zeroline\" =&gt; false\n  ], \n  \"width\" =&gt; 600, \n  \"height\" =&gt; 550, \n  \"autosize\" =&gt; false, \n  \"margin\" =&gt; [\"t\" =&gt; 50], \n  \"hovermode\" =&gt; \"closest\", \n  \"bargap\" =&gt; 0, \n  \"showlegend\" =&gt; false, \n  \"xaxis2\" =&gt; [\n    \"domain\" =&gt; [0.85, 1], \n    \"showgrid\" =&gt; false, \n    \"zeroline\" =&gt; false\n  ], \n  \"yaxis2\" =&gt; [\n    \"domain\" =&gt; [0.85, 1], \n    \"showgrid\" =&gt; false, \n    \"zeroline\" =&gt; false\n  ]\n]\n\nresponse = Plotly.plot([data], [\"layout\" =&gt; layout, \"filename\" =&gt; \"contour-contour-subplots\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1050", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nt = seq(-1, 1.2, length=2000)\nx = t^3+0.3*rnorm(2000)\ny = t^6+0.3*rnorm(2000)\ntrace1 &lt;- list(\n  x = x, \n  y = y, \n  name = \"points\", \n  mode = \"markers\", \n  marker = list(\n    size = 2, \n    color = \"rgb(102,0,0)\", \n    opacity = 0.4\n  ), \n  type = \"scatter\"\n)\ntrace2 &lt;- list(\n  x = x, \n  y = y, \n  name = \"density\", \n  ncontours = 20, \n  scl = \"Hot\", \n  reversescl = TRUE, \n  showscale = FALSE, \n  type = \"histogram2dcontour\"\n)\ntrace3 &lt;- list(\n  x = x, \n  name = \"x density\", \n  marker = list(color = \"rgb(102,0,0)\"), \n  yaxis = \"y2\", \n  type = \"histogram\"\n)\ntrace4 &lt;- list(\n  y = y, \n  name = \"y density\", \n  marker = list(color = \"rgb(102,0,0)\"), \n  xaxis = \"x2\", \n  type = \"histogram\"\n)\ndata &lt;- list(trace1, trace2, trace3, trace4)\nlayout &lt;- list(\n  xaxis = list(\n    domain = c(0, 0.85), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    domain = c(0, 0.85), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  width = 600, \n  height = 550, \n  autosize = FALSE, \n  margin = list(t = 50), \n  hovermode = \"closest\", \n  bargap = 0, \n  showlegend = FALSE, \n  xaxis2 = list(\n    domain = c(0.85, 1), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis2 = list(\n    domain = c(0.85, 1), \n    showgrid = FALSE, \n    zeroline = FALSE\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(layout=layout, filename=\"contour-contour-subplots\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nt = linspace(-1, 1.2, 2000);\nx = (t.^3)+(0.3.*randn(1, 2000));\ny = (t.^6)+(0.3.*randn(1, 2000));\ntrace1 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'points', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', 2, ...\n    'color', 'rgb(102,0,0)', ...\n    'opacity', 0.4), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'density', ...\n  'ncontours', 20, ...\n  'scl', 'Hot', ...\n  'reversescl', true, ...\n  'showscale', false, ...\n  'type', 'histogram2dcontour');\ntrace3 = struct(...\n  'x', x, ...\n  'name', 'x density', ...\n  'marker', struct('color', 'rgb(102,0,0)'), ...\n  'yaxis', 'y2', ...\n  'type', 'histogram');\ntrace4 = struct(...\n  'y', y, ...\n  'name', 'y density', ...\n  'marker', struct('color', 'rgb(102,0,0)'), ...\n  'xaxis', 'x2', ...\n  'type', 'histogram');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct(...\n      'domain', [0, 0.85], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'domain', [0, 0.85], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'width', 600, ...\n    'height', 550, ...\n    'autosize', false, ...\n    'margin', struct('t', 50), ...\n    'hovermode', 'closest', ...\n    'bargap', 0, ...\n    'showlegend', false, ...\n    'xaxis2', struct(...\n      'domain', [0.85, 1], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis2', struct(...\n      'domain', [0.85, 1], ...\n      'showgrid', false, ...\n      'zeroline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'contour-contour-subplots', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/contour/contour-subplots", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar linspace = require('linspace');\n\nvar t = linspace(-1,1.2,2000);\nvar x = (Math.pow(t, 3)) + (0.3 * (Math.random() * 2000));\nvar y = (Math.pow(t, 6)) + (0.3 * (Math.random() * 2000));\nvar trace1 = {\n  x: x, \n  y: y, \n  name: \"points\", \n  mode: \"markers\", \n  marker: {\n    size: 2, \n    color: \"rgb(102,0,0)\", \n    opacity: 0.4\n  }, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: x, \n  y: y, \n  name: \"density\", \n  ncontours: 20, \n  scl: \"Hot\", \n  reversescl: true, \n  showscale: false, \n  type: \"histogram2dcontour\"\n};\nvar trace3 = {\n  x: x, \n  name: \"x density\", \n  marker: {color: \"rgb(102,0,0)\"}, \n  yaxis: \"y2\", \n  type: \"histogram\"\n};\nvar trace4 = {\n  y: y, \n  name: \"y density\", \n  marker: {color: \"rgb(102,0,0)\"}, \n  xaxis: \"x2\", \n  type: \"histogram\"\n};\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {\n    domain: [0, 0.85], \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis: {\n    domain: [0, 0.85], \n    showgrid: false, \n    zeroline: false\n  }, \n  width: 600, \n  height: 550, \n  autosize: false, \n  margin: {t: 50}, \n  hovermode: \"closest\", \n  bargap: 0, \n  showlegend: false, \n  xaxis2: {\n    domain: [0.85, 1], \n    showgrid: false, \n    zeroline: false\n  }, \n  yaxis2: {\n    domain: [0.85, 1], \n    showgrid: false, \n    zeroline: false\n  }\n};\n\nvar graph_options = {filename: \"contour-contour-subplots\", fileopt: \"overwrite\", layout: layout, auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nt = linspace(-1, 1.2, 2000);\nx = (t.^3)+(0.3.*randn(1, 2000));\ny = (t.^6)+(0.3.*randn(1, 2000));\ntrace1 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'points', ...\n  'mode', 'markers', ...\n  'marker', struct(...\n    'size', 2, ...\n    'color', 'rgb(102,0,0)', ...\n    'opacity', 0.4), ...\n  'type', 'scatter');\ntrace2 = struct(...\n  'x', x, ...\n  'y', y, ...\n  'name', 'density', ...\n  'ncontours', 20, ...\n  'scl', 'Hot', ...\n  'reversescl', true, ...\n  'showscale', false, ...\n  'type', 'histogram2dcontour');\ntrace3 = struct(...\n  'x', x, ...\n  'name', 'x density', ...\n  'marker', struct('color', 'rgb(102,0,0)'), ...\n  'yaxis', 'y2', ...\n  'type', 'histogram');\ntrace4 = struct(...\n  'y', y, ...\n  'name', 'y density', ...\n  'marker', struct('color', 'rgb(102,0,0)'), ...\n  'xaxis', 'x2', ...\n  'type', 'histogram');\ndata = {trace1, trace2, trace3, trace4};\nlayout = struct(...\n    'xaxis', struct(...\n      'domain', [0, 0.85], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis', struct(...\n      'domain', [0, 0.85], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'width', 600, ...\n    'height', 550, ...\n    'autosize', false, ...\n    'margin', struct('t', 50), ...\n    'hovermode', 'closest', ...\n    'bargap', 0, ...\n    'showlegend', false, ...\n    'xaxis2', struct(...\n      'domain', [0.85, 1], ...\n      'showgrid', false, ...\n      'zeroline', false), ...\n    'yaxis2', struct(...\n      'domain', [0.85, 1], ...\n      'showgrid', false, ...\n      'zeroline', false));\n\nresponse = plotly(data, struct('layout', layout, 'filename', 'contour-contour-subplots', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nt = seq(-1, 1.2, length=2000)\nx = t^3+0.3*rnorm(2000)\ny = t^6+0.3*rnorm(2000)\ntrace1 <- list(\n  x = x, \n  y = y, \n  name = \"points\", \n  mode = \"markers\", \n  marker = list(\n    size = 2, \n    color = \"rgb(102,0,0)\", \n    opacity = 0.4\n  ), \n  type = \"scatter\"\n)\ntrace2 <- list(\n  x = x, \n  y = y, \n  name = \"density\", \n  ncontours = 20, \n  scl = \"Hot\", \n  reversescl = TRUE, \n  showscale = FALSE, \n  type = \"histogram2dcontour\"\n)\ntrace3 <- list(\n  x = x, \n  name = \"x density\", \n  marker = list(color = \"rgb(102,0,0)\"), \n  yaxis = \"y2\", \n  type = \"histogram\"\n)\ntrace4 <- list(\n  y = y, \n  name = \"y density\", \n  marker = list(color = \"rgb(102,0,0)\"), \n  xaxis = \"x2\", \n  type = \"histogram\"\n)\ndata <- list(trace1, trace2, trace3, trace4)\nlayout <- list(\n  xaxis = list(\n    domain = c(0, 0.85), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis = list(\n    domain = c(0, 0.85), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  width = 600, \n  height = 550, \n  autosize = FALSE, \n  margin = list(t = 50), \n  hovermode = \"closest\", \n  bargap = 0, \n  showlegend = FALSE, \n  xaxis2 = list(\n    domain = c(0.85, 1), \n    showgrid = FALSE, \n    zeroline = FALSE\n  ), \n  yaxis2 = list(\n    domain = c(0.85, 1), \n    showgrid = FALSE, \n    zeroline = FALSE\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(layout=layout, filename=\"contour-contour-subplots\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nt = np.linspace(-1,1.2,2000)\nx = (t**3)+(0.3*np.random.randn(2000))\ny = (t**6)+(0.3*np.random.randn(2000))\ntrace1 = Scatter(\n    x=x,\n    y=y,\n    name='points',\n    mode='markers',\n    marker=Marker(\n        size=2,\n        color='rgb(102,0,0)',\n        opacity=0.4\n    )\n)\ntrace2 = Histogram2dContour(\n    x=x,\n    y=y,\n    name='density',\n    ncontours=20,\n    scl='Hot',\n    reversescl=True,\n    showscale=False\n)\ntrace3 = Histogram(\n    x=x,\n    name='x density',\n    marker=Marker(\n        color='rgb(102,0,0)'\n    ),\n    yaxis='y2'\n)\ntrace4 = Histogram(\n    y=y,\n    name='y density',\n    marker=Marker(\n        color='rgb(102,0,0)'\n    ),\n    xaxis='x2'\n)\ndata = Data([trace1, trace2, trace3, trace4])\nlayout = Layout(\n    xaxis=XAxis(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=YAxis(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    width=600,\n    height=550,\n    autosize=False,\n    margin=Margin(\n        t=50\n    ),\n    hovermode='closest',\n    bargap=0,\n    showlegend=False,\n    xaxis2=XAxis(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis2=YAxis(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    )\n)\nfig = Figure(data=data, layout=layout)\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(fig, filename='contour-contour-subplots', auto_open=False)"
            }, 
            "simple-contour": {
              "files": {
                "prepend.js": "hard-coded/chart-types/contour/simple-contour/prepend.js", 
                "prepend.py": "hard-coded/chart-types/contour/simple-contour/prepend.py", 
                "prepend.m": "hard-coded/chart-types/contour/simple-contour/prepend.m", 
                "model.json": "hard-coded/chart-types/contour/simple-contour/model.json", 
                "prepend.r": "hard-coded/chart-types/contour/simple-contour/prepend.r", 
                "prepend.jl": "hard-coded/chart-types/contour/simple-contour/prepend.jl"
              }, 
              "node": "var plotly = require('plotly')({% if username %}'{{username}}'{% else %}'theengineear'{% endif %},{% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %});\n\nvar linspace = require('linspace');\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 100\nvar x = linspace(-2 * Math.PI, 2 * Math.PI, size)\nvar y = linspace(-2 * Math.PI, 2 * Math.PI, size)\nvar z = unpack(zeros([size,size]))\nfor (var i = 0; i &lt; size; i++) {\n  for (var j = 0; j &lt; size; j++) {\n    r2 = (x * (i * i) + y * (j * j))\n      z[i][j] = Math.sin(x * i) * Math.cos(y * j) * Math.sin(r2) / Math.log(r2+1)\n  }\n}\nvar data = [\n  {\n    z: z, \n    x: x, \n    y: y, \n    type: \"contour\"\n  }\n];\n\nvar graph_options = {filename: \"contour-simple-contour\", fileopt: \"overwrite\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "name": "simple-contour", 
              "image.png": "", 
              "python": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in({% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nimport numpy as np\n\nsize = 100\nx = np.linspace(-2*np.pi, 2*np.pi, size)\ny = np.linspace(-2*np.pi, 2*np.pi, size)\nz = np.empty((size, size))\nfor i, xi in enumerate(x):\n    for j, yj in enumerate(y):\n        r2 = (xi**2+yj**2)\n        z[i][j] = np.sin(xi)*np.cos(yj)*np.sin(r2)/(np.log(r2+1))\ndata = Data([\n    Contour(\n        z=z,\n        x=x,\n        y=y\n    )\n])\n\nplot_url = py.plot(data, filename='contour-simple-contour')", 
              "julia-exec": "using Plotly\n\nusing Plotly\nPlotly.signin(\"theengineear\", \"o9zlr0hy6z\")\n\nsize = 100\nx = linspace(-2*pi, 2*pi, size)\ny = linspace(-2*pi, 2*pi, size)\nz = rand(size, size)\nfor i = 1:size\n  for j = 1:size\n    r2 = (x(i)^2 + y(j)^2)\n        z(i,j) = sin(x(i))*cos(y(j))*sin(r2)/log(r2+1)\ndata = [\n  [\n    \"z\" => z, \n    \"x\" => x, \n    \"y\" => y, \n    \"type\" => \"contour\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" => \"contour-simple-contour\", \"fileopt\" => \"overwrite\", \"auto_open\" => \"false\"])\nplot_url = response[\"url\"]", 
              "julia": "using Plotly\n\nPlotly.signin({% if username %}\"{{username}}\"{% else %}\"theengineear\"{% endif %}, {% if api_key %}\"{{api_key}}\"{% else %}\"o9zlr0hy6z\"{% endif %})\n\nsize = 100\nx = linspace(-2*pi, 2*pi, size)\ny = linspace(-2*pi, 2*pi, size)\nz = rand(size, size)\nfor i = 1:size\n  for j = 1:size\n    r2 = (x(i)^2 + y(j)^2)\n        z(i,j) = sin(x(i))*cos(y(j))*sin(r2)/log(r2+1)\ndata = [\n  [\n    \"z\" =&gt; z, \n    \"x\" =&gt; x, \n    \"y\" =&gt; y, \n    \"type\" =&gt; \"contour\"\n  ]\n]\n\nresponse = Plotly.plot([data], [\"filename\" =&gt; \"contour-simple-contour\", \"fileopt\" =&gt; \"overwrite\"])\nplot_url = response[\"url\"]", 
              "url.json": "https://plot.ly/~theengineear/1051", 
              "r": "library(plotly)\n\np &lt;- plotly(username={% if username %}\"{{username}}\"{% else %}'theengineear'{% endif %}, key={% if api_key %}\"{{api_key}}\"{% else %}'o9zlr0hy6z'{% endif %})\n\nsize &lt;- 100\nx &lt;- seq(-2*pi, 2*pi, length=size)\ny &lt;- seq(-2*pi, 2*pi, length=size)\nz &lt;- matrix(0, size, size)\nfor(i in 1:size) {\n    for(j in 1:size) {\n        r2 &lt;- x[i]^2 + y[j]^2\n        z[i, j] &lt;- sin(x[i])*cos(y[j])*sin(r2)/log(r2+1)\n    }\n}\ndata &lt;- list(\n  list(\n    z = z, \n    x = x, \n    y = y, \n    type = \"contour\"\n  )\n)\n\nresponse &lt;- p$plotly(data, kwargs=list(filename=\"contour-simple-contour\", fileopt=\"overwrite\"))\nurl &lt;- response$url\nfilename &lt;- response$filename", 
              "matlab": "signin({% if username %}'{{username}}'{% else %}'theengineear'{% endif %}, {% if api_key %}'{{api_key}}'{% else %}'o9zlr0hy6z'{% endif %})\n\nsize = 100;\nx = linspace(-2*pi, 2*pi, size);\ny = linspace(-2*pi, 2*pi, size);\nz = zeros(size, size);\nfor n = 1:size\n    for m = 1:size\n        r2 = x(n)^2 + y(m)^2;\n        z(n, m) = sin(x(n))*cos(y(m))*sin(r2)/log(r2+1);\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'x', x, ...\n    'y', y, ...\n    'type', 'contour')...\n};\n\nresponse = plotly(data, struct('filename', 'contour-simple-contour', 'fileopt', 'overwrite'));\nplot_url = response.url", 
              "path": "hard-coded/chart-types/contour/simple-contour", 
              "node-exec": "var plotly = require('plotly')('theengineear', 'o9zlr0hy6z')\n\nvar linspace = require('linspace');\nvar unpack = require('ndarray-unpack');\nvar zeros = require('zeros');\nvar fill = require('ndarray-fill');\n\nvar size = 100\nvar x = linspace(-2 * Math.PI, 2 * Math.PI, size)\nvar y = linspace(-2 * Math.PI, 2 * Math.PI, size)\nvar z = unpack(zeros([size,size]))\nfor (var i = 0; i < size; i++) {\n  for (var j = 0; j < size; j++) {\n    r2 = (x * (i * i) + y * (j * j))\n      z[i][j] = Math.sin(x * i) * Math.cos(y * j) * Math.sin(r2) / Math.log(r2+1)\n  }\n}\nvar data = [\n  {\n    z: z, \n    x: x, \n    y: y, \n    type: \"contour\"\n  }\n];\n\nvar graph_options = {filename: \"contour-simple-contour\", fileopt: \"overwrite\", auto_open: \"false\"}\nplotly.plot(data, graph_options, function (err, msg) {\n    console.log(msg);\n});", 
              "matlab-exec": "signin('theengineear', 'o9zlr0hy6z')\n\nsize = 100;\nx = linspace(-2*pi, 2*pi, size);\ny = linspace(-2*pi, 2*pi, size);\nz = zeros(size, size);\nfor n = 1:size\n    for m = 1:size\n        r2 = x(n)^2 + y(m)^2;\n        z(n, m) = sin(x(n))*cos(y(m))*sin(r2)/log(r2+1);\n    end\nend\ndata = {...\n  struct(...\n    'z', z, ...\n    'x', x, ...\n    'y', y, ...\n    'type', 'contour')...\n};\n\nresponse = plotly(data, struct('filename', 'contour-simple-contour', 'fileopt', 'overwrite', 'auto_open', 'false'));\nplot_url = response.url", 
              "config.json": {
                "languages": {
                  "python": "model", 
                  "node": "model", 
                  "r": "model", 
                  "matlab": "model", 
                  "julia": "model"
                }, 
                "name": "for the people", 
                "prepend": true
              }, 
              "r-exec": "library(plotly)\n\np <- plotly(username='theengineear', key='o9zlr0hy6z')\n\nsize <- 100\nx <- seq(-2*pi, 2*pi, length=size)\ny <- seq(-2*pi, 2*pi, length=size)\nz <- matrix(0, size, size)\nfor(i in 1:size) {\n    for(j in 1:size) {\n        r2 <- x[i]^2 + y[j]^2\n        z[i, j] <- sin(x[i])*cos(y[j])*sin(r2)/log(r2+1)\n    }\n}\ndata <- list(\n  list(\n    z = z, \n    x = x, \n    y = y, \n    type = \"contour\"\n  )\n)\n\nresponse <- p$plotly(data, kwargs=list(filename=\"contour-simple-contour\", fileopt=\"overwrite\", auto_open=\"FALSE\"))\nurl <- response$url\nfilename <- response$filename", 
              "python-exec": "import plotly.plotly as py\nfrom plotly.graph_objs import *\n\npy.sign_in('theengineear', 'o9zlr0hy6z')\n\nimport numpy as np\n\nsize = 100\nx = np.linspace(-2*np.pi, 2*np.pi, size)\ny = np.linspace(-2*np.pi, 2*np.pi, size)\nz = np.empty((size, size))\nfor i, xi in enumerate(x):\n    for j, yj in enumerate(y):\n        r2 = (xi**2+yj**2)\n        z[i][j] = np.sin(xi)*np.cos(yj)*np.sin(r2)/(np.log(r2+1))\ndata = Data([\n    Contour(\n        z=z,\n        x=x,\n        y=y\n    )\n])\n\nif not fig:\n    if not data:\n        raise Exception('no data OR figure!!')\n    fig = dict(data=data)  # assumes fig or data\nif 'layout' not in fig:\n    fig['layout'] = dict()\nif 'margin' not in fig['layout']:\n    fig['layout']['margin'] = dict(t=50, b=50, r=50, l=50)\nfig['layout'].update(autosize=False, width=500, height=500)\n\n\nplot_url = py.plot(data, filename='contour-simple-contour', auto_open=False)"
            }
          }, 
          "name": "contour", 
          "config.json": {
            "has_thumbnail": true, 
            "name": "for the people", 
            "relative_url": "contour"
          }
        }
      }, 
      "name": "chart-types", 
      "config.json": {
        "has_thumbnail": true, 
        "name": "chart-types for the people"
      }
    }
  }, 
  "name": "hard-coded", 
  "config.json": {
    "has_thumbnail": true, 
    "name": "Examples for the people"
  }
}